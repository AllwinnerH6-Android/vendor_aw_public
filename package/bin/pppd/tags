!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A2T_LOCAL	plugins/pppoatm/atm.h	59;"	d
A2T_NAME	plugins/pppoatm/atm.h	57;"	d
A2T_PRETTY	plugins/pppoatm/atm.h	56;"	d
A2T_REMOTE	plugins/pppoatm/atm.h	58;"	d
ABORT_MSG	session.c	96;"	d	file:
ACCT	plugins/radius/radiusclient.h	43;"	d
ACKCIADDR	ipcp.c	934;"	d	file:
ACKCIADDRS	ipcp.c	891;"	d	file:
ACKCICHAP	lcp.c	846;"	d	file:
ACKCICHAR	lcp.c	833;"	d	file:
ACKCICHARS	ipxcp.c	681;"	d	file:
ACKCICOMPLETE	ipxcp.c	679;"	d	file:
ACKCIDNS	ipcp.c	950;"	d	file:
ACKCIENDP	lcp.c	891;"	d	file:
ACKCIIFACEID	ipv6cp.c	641;"	d	file:
ACKCILONG	lcp.c	862;"	d	file:
ACKCILQR	lcp.c	875;"	d	file:
ACKCINAME	ipxcp.c	702;"	d	file:
ACKCINETWORK	ipxcp.c	704;"	d	file:
ACKCINODE	ipxcp.c	701;"	d	file:
ACKCIPROTO	ipxcp.c	718;"	d	file:
ACKCISHORT	lcp.c	820;"	d	file:
ACKCIVJ	ipcp.c	911;"	d	file:
ACKCIVJ	ipv6cp.c	626;"	d	file:
ACKCIVOID	ipxcp.c	668;"	d	file:
ACKCIVOID	lcp.c	810;"	d	file:
ACKCIWINS	ipcp.c	965;"	d	file:
ACKRCVD	fsm.h	130;"	d
ACKSENT	fsm.h	131;"	d
ADDCIADDR	ipcp.c	807;"	d	file:
ADDCIADDRS	ipcp.c	776;"	d	file:
ADDCICHAP	lcp.c	726;"	d	file:
ADDCICHAR	lcp.c	746;"	d	file:
ADDCIDNS	ipcp.c	820;"	d	file:
ADDCIENDP	lcp.c	752;"	d	file:
ADDCIIFACEID	ipv6cp.c	583;"	d	file:
ADDCILONG	lcp.c	733;"	d	file:
ADDCILQR	lcp.c	739;"	d	file:
ADDCISHORT	lcp.c	720;"	d	file:
ADDCIVJ	ipcp.c	791;"	d	file:
ADDCIVJ	ipv6cp.c	571;"	d	file:
ADDCIVOID	lcp.c	715;"	d	file:
ADDCIWINS	ipcp.c	833;"	d	file:
AF_ATMPVC	plugins/pppoatm/atm.h	19;"	d
AF_ATMSVC	plugins/pppoatm/atm.h	23;"	d
AHDLC_MOD_NAME	sys-solaris.c	146;"	d	file:
ANS_HLT_VS_ID	plugins/pppoatm/atmsap.h	32;"	d
ANY_COMPRESS	ccp.c	242;"	d	file:
AREQUIPA_HLT_VS_ID	plugins/pppoatm/atmsap.h	36;"	d
ATMA_AESA	plugins/pppoatm/atmres.h	19;"	d
ATMA_E164	plugins/pppoatm/atmres.h	22;"	d
ATM_FORUM_OUI	plugins/pppoatm/atmsap.h	23;"	d
AUTH	plugins/radius/radiusclient.h	42;"	d
AUTHENTICATED	plugins/winbind.c	60;"	d	file:
AUTH_DONE	chap-new.c	109;"	d	file:
AUTH_FAILED	chap-new.c	110;"	d	file:
AUTH_HDR	plugins/radius/radiusclient.h	/^} AUTH_HDR;$/;"	t	typeref:struct:pw_auth_hdr
AUTH_HDR_LEN	plugins/radius/radiusclient.h	69;"	d
AUTH_ID_LEN	plugins/radius/radiusclient.h	33;"	d
AUTH_LOCAL_FST	plugins/radius/radiusclient.h	49;"	d
AUTH_LOCAL_SND	plugins/radius/radiusclient.h	51;"	d
AUTH_PASS_LEN	plugins/radius/radiusclient.h	32;"	d
AUTH_RADIUS_FST	plugins/radius/radiusclient.h	50;"	d
AUTH_RADIUS_SND	plugins/radius/radiusclient.h	52;"	d
AUTH_STARTED	chap-new.c	108;"	d	file:
AUTH_STRING_LEN	plugins/radius/radiusclient.h	34;"	d
AUTH_VECTOR_LEN	plugins/radius/radiusclient.h	31;"	d
AXE_PRVOPT	plugins/pppoatm/atm.h	63;"	d
AXE_WILDCARD	plugins/pppoatm/atm.h	62;"	d
BADRESP_RC	plugins/radius/radiusclient.h	343;"	d
BCMP	pppd.h	798;"	d
BCOPY	pppd.h	796;"	d
BIT	ipxcp.c	226;"	d	file:
BPF_BUFFER_HAS_DATA	plugins/rp-pppoe/pppoe.h	62;"	d
BPF_BUFFER_IS_EMPTY	plugins/rp-pppoe/pppoe.h	61;"	d
BROADCAST	plugins/rp-pppoe/pppoe.h	306;"	d
BSD_CURRENT_VERSION	include/net/ppp-comp.h	143;"	d
BSD_MAKE_OPT	include/net/ppp-comp.h	144;"	d
BSD_MAX_BITS	include/net/ppp-comp.h	147;"	d
BSD_MIN_BITS	include/net/ppp-comp.h	146;"	d
BSD_NBITS	include/net/ppp-comp.h	141;"	d
BSD_VERSION	include/net/ppp-comp.h	142;"	d
BUFFER_LEN	plugins/radius/radiusclient.h	36;"	d
BUF_LEN	plugins/radius/radius.c	47;"	d	file:
BUF_LEN	plugins/winbind.c	57;"	d	file:
BZERO	pppd.h	797;"	d
C2	md4.c	49;"	d	file:
C3	md4.c	50;"	d	file:
CALLBACK_DIALIN	pppd.h	270;"	d
CALLBACK_DIALOUT	pppd.h	271;"	d
CBCP_ACK	cbcp.h	20;"	d
CBCP_H	cbcp.h	2;"	d
CBCP_MINLEN	cbcp.h	16;"	d
CBCP_OPT	lcp.h	83;"	d
CBCP_REQ	cbcp.h	18;"	d
CBCP_RESP	cbcp.h	19;"	d
CB_CONF_ADMIN	cbcp.h	24;"	d
CB_CONF_LIST	cbcp.h	25;"	d
CB_CONF_NO	cbcp.h	22;"	d
CB_CONF_USER	cbcp.h	23;"	d
CCP_CODE	include/net/ppp-comp.h	125;"	d
CCP_COMP_RUN	include/net/pppio.h	78;"	d
CCP_CONFACK	include/net/ppp-comp.h	111;"	d
CCP_CONFREQ	include/net/ppp-comp.h	110;"	d
CCP_DECOMP_RUN	include/net/pppio.h	79;"	d
CCP_ERROR	include/net/pppio.h	76;"	d
CCP_FATALERROR	include/net/pppio.h	77;"	d
CCP_HDRLEN	include/net/ppp-comp.h	128;"	d
CCP_ID	include/net/ppp-comp.h	126;"	d
CCP_ISOPEN	include/net/pppio.h	74;"	d
CCP_ISUP	include/net/pppio.h	75;"	d
CCP_LENGTH	include/net/ppp-comp.h	127;"	d
CCP_MAX_OPTION_LENGTH	include/net/ppp-comp.h	120;"	d
CCP_OPT_CODE	include/net/ppp-comp.h	130;"	d
CCP_OPT_LENGTH	include/net/ppp-comp.h	131;"	d
CCP_OPT_MINLEN	include/net/ppp-comp.h	132;"	d
CCP_RESETACK	include/net/ppp-comp.h	115;"	d
CCP_RESETREQ	include/net/ppp-comp.h	114;"	d
CCP_TERMACK	include/net/ppp-comp.h	113;"	d
CCP_TERMREQ	include/net/ppp-comp.h	112;"	d
CHALLENGE_VALID	chap-new.c	112;"	d	file:
CHAL_MAX_PKTLEN	chap-new.c	92;"	d	file:
CHAPDEBUG	pppd.h	905;"	d
CHAPDEBUG	pppd.h	907;"	d
CHAPMS2_MAX_RESPONSE_CACHE_SIZE	chap_ms.c	334;"	d	file:
CHAP_CANDIGEST	chap-new.h	84;"	d
CHAP_CHALLENGE	chap-new.h	39;"	d
CHAP_DIGEST	chap-new.h	67;"	d
CHAP_FAILURE	chap-new.h	42;"	d
CHAP_HDRLEN	chap-new.h	34;"	d
CHAP_MD5	chap-new.h	47;"	d
CHAP_MD5_PEER	pppd.h	364;"	d
CHAP_MD5_WITHPEER	pppd.h	363;"	d
CHAP_MDTYPE	chap-new.h	74;"	d
CHAP_MDTYPE_D	chap-new.h	77;"	d
CHAP_MICROSOFT	chap-new.h	48;"	d
CHAP_MICROSOFT_V2	chap-new.h	49;"	d
CHAP_MS2_PEER	pppd.h	369;"	d
CHAP_MS2_WITHPEER	pppd.h	368;"	d
CHAP_MS_PEER	pppd.h	367;"	d
CHAP_MS_SHIFT	pppd.h	365;"	d
CHAP_MS_WITHPEER	pppd.h	366;"	d
CHAP_PEER	pppd.h	358;"	d
CHAP_RESPONSE	chap-new.h	40;"	d
CHAP_SUCCESS	chap-new.h	41;"	d
CHAP_VALUE_LENGTH	plugins/radius/radiusclient.h	71;"	d
CHAP_WITHPEER	pppd.h	357;"	d
CHECK_ROOM	plugins/rp-pppoe/pppoe.h	296;"	d
CILEN_ADDR	ipcp.c	284;"	d	file:
CILEN_ADDRS	ipcp.c	285;"	d	file:
CILEN_BSD_COMPRESS	include/net/ppp-comp.h	138;"	d
CILEN_CBCP	lcp.c	291;"	d	file:
CILEN_CHAP	lcp.c	288;"	d	file:
CILEN_CHAR	lcp.c	286;"	d	file:
CILEN_COMPLETE	ipxcp.c	208;"	d	file:
CILEN_COMPRESS	ipcp.c	282;"	d	file:
CILEN_COMPRESS	ipv6cp.c	312;"	d	file:
CILEN_COMPRESS	ipxcp.c	213;"	d	file:
CILEN_DEFLATE	include/net/ppp-comp.h	154;"	d
CILEN_IFACEID	ipv6cp.c	313;"	d	file:
CILEN_LONG	lcp.c	289;"	d	file:
CILEN_LQR	lcp.c	290;"	d	file:
CILEN_MPPE	include/net/ppp-comp.h	169;"	d
CILEN_NAME	ipxcp.c	212;"	d	file:
CILEN_NETN	ipxcp.c	209;"	d	file:
CILEN_NODEN	ipxcp.c	210;"	d	file:
CILEN_PREDICTOR_1	include/net/ppp-comp.h	175;"	d
CILEN_PREDICTOR_2	include/net/ppp-comp.h	177;"	d
CILEN_PROTOCOL	ipxcp.c	211;"	d	file:
CILEN_SHORT	lcp.c	287;"	d	file:
CILEN_VJ	ipcp.c	283;"	d	file:
CILEN_VOID	ipcp.c	281;"	d	file:
CILEN_VOID	ipv6cp.c	311;"	d	file:
CILEN_VOID	ipxcp.c	207;"	d	file:
CILEN_VOID	lcp.c	285;"	d	file:
CI_ACCOMPRESSION	lcp.h	55;"	d
CI_ADDR	ipcp.h	50;"	d
CI_ADDRS	ipcp.h	48;"	d
CI_ASYNCMAP	lcp.h	50;"	d
CI_AUTHTYPE	lcp.h	51;"	d
CI_BSD_COMPRESS	include/net/ppp-comp.h	137;"	d
CI_CALLBACK	lcp.h	59;"	d
CI_COBS	lcp.h	66;"	d
CI_COMPRESSTYPE	ipcp.h	49;"	d
CI_COMPRESSTYPE	ipv6cp.h	145;"	d
CI_DEFLATE	include/net/ppp-comp.h	152;"	d
CI_DEFLATE_DRAFT	include/net/ppp-comp.h	153;"	d
CI_EPDISC	lcp.h	62;"	d
CI_FCSALTERN	lcp.h	56;"	d
CI_I18N	lcp.h	69;"	d
CI_IFACEID	ipv6cp.h	144;"	d
CI_LCPAUTH	lcp.h	65;"	d
CI_LDISC	lcp.h	64;"	d
CI_MAGICNUMBER	lcp.h	53;"	d
CI_MPHDRFMT	lcp.h	68;"	d
CI_MPPE	include/net/ppp-comp.h	168;"	d
CI_MPPLUS	lcp.h	63;"	d
CI_MRRU	lcp.h	60;"	d
CI_MRU	lcp.h	49;"	d
CI_MS_DNS1	ipcp.h	52;"	d
CI_MS_DNS2	ipcp.h	54;"	d
CI_MS_WINS1	ipcp.h	53;"	d
CI_MS_WINS2	ipcp.h	55;"	d
CI_NUMBERED	lcp.h	58;"	d
CI_PCOMPRESSION	lcp.h	54;"	d
CI_PREDICTOR_1	include/net/ppp-comp.h	174;"	d
CI_PREDICTOR_2	include/net/ppp-comp.h	176;"	d
CI_PREFELIS	lcp.h	67;"	d
CI_QUALITY	lcp.h	52;"	d
CI_SDL	lcp.h	70;"	d
CI_SDP	lcp.h	57;"	d
CI_SSNHF	lcp.h	61;"	d
CI_VENDOR	lcp.h	48;"	d
CLOSED	fsm.h	125;"	d
CLOSING	fsm.h	127;"	d
CODENAME	ipcp.c	288;"	d	file:
CODENAME	ipv6cp.c	315;"	d	file:
CODENAME	ipxcp.c	215;"	d	file:
CODENAME	lcp.c	293;"	d	file:
CODEREJ	fsm.h	60;"	d
CODE_PADI	plugins/rp-pppoe/pppoe.h	111;"	d
CODE_PADM	plugins/rp-pppoe/pppoe.h	119;"	d
CODE_PADN	plugins/rp-pppoe/pppoe.h	120;"	d
CODE_PADO	plugins/rp-pppoe/pppoe.h	112;"	d
CODE_PADR	plugins/rp-pppoe/pppoe.h	113;"	d
CODE_PADS	plugins/rp-pppoe/pppoe.h	114;"	d
CODE_PADT	plugins/rp-pppoe/pppoe.h	115;"	d
CODE_SESS	plugins/rp-pppoe/pppoe.h	122;"	d
COMP_AC	include/net/pppio.h	64;"	d
COMP_MOD_NAME	sys-solaris.c	150;"	d	file:
COMP_PROT	include/net/pppio.h	66;"	d
COMP_VJC	include/net/pppio.h	69;"	d
COMP_VJCCID	include/net/pppio.h	70;"	d
CONFACK	fsm.h	55;"	d
CONFNAK	fsm.h	56;"	d
CONFREJ	fsm.h	57;"	d
CONFREQ	fsm.h	54;"	d
COPY_STRING	session.c	93;"	d	file:
ChallengeHash	chap_ms.c	/^ChallengeHash(u_char PeerChallenge[16], u_char *rchallenge,$/;"	f
ChallengeResponse	chap_ms.c	/^ChallengeResponse(u_char *challenge,$/;"	f	file:
ChapMS	chap_ms.c	/^ChapMS(u_char *rchallenge, char *secret, int secret_len,$/;"	f
ChapMS2	chap_ms.c	/^ChapMS2(u_char *rchallenge, u_char *PeerChallenge,$/;"	f
ChapMS2_NT	chap_ms.c	/^ChapMS2_NT(u_char *rchallenge, u_char PeerChallenge[16], char *username,$/;"	f	file:
ChapMS_LANMan	chap_ms.c	/^ChapMS_LANMan(u_char *rchallenge, char *secret, int secret_len,$/;"	f	file:
ChapMS_NT	chap_ms.c	/^ChapMS_NT(u_char *rchallenge, char *secret, int secret_len,$/;"	f	file:
Collapse	pppcrypt.c	/^Collapse(in, out)$/;"	f	file:
DATE	patchlevel.h	2;"	d
DEBUGCHAP	pppd.h	849;"	d
DEBUGFSM	pppd.h	844;"	d
DEBUGIPCP	pppd.h	846;"	d
DEBUGIPV6CP	pppd.h	847;"	d
DEBUGLCP	pppd.h	845;"	d
DEBUGMAIN	pppd.h	843;"	d
DEBUGUPAP	pppd.h	848;"	d
DECOMP_AC	include/net/pppio.h	65;"	d
DECOMP_ERROR	include/net/ppp-comp.h	104;"	d
DECOMP_FATALERROR	include/net/ppp-comp.h	105;"	d
DECOMP_OK	include/net/ppp-comp.h	103;"	d
DECOMP_PROT	include/net/pppio.h	67;"	d
DECOMP_VJC	include/net/pppio.h	71;"	d
DECOMP_VJCCID	include/net/pppio.h	72;"	d
DECPTR	pppd.h	787;"	d
DEFLATE_CHK_SEQUENCE	include/net/ppp-comp.h	163;"	d
DEFLATE_MAKE_OPT	include/net/ppp-comp.h	161;"	d
DEFLATE_MAX_SIZE	include/net/ppp-comp.h	157;"	d
DEFLATE_METHOD	include/net/ppp-comp.h	160;"	d
DEFLATE_METHOD_VAL	include/net/ppp-comp.h	158;"	d
DEFLATE_MIN_SIZE	include/net/ppp-comp.h	156;"	d
DEFLATE_MIN_WORKS	ccp.c	55;"	d	file:
DEFLATE_SIZE	include/net/ppp-comp.h	159;"	d
DEFLOOPBACKFAIL	lcp.h	135;"	d
DEFMAXCONFREQS	fsm.h	148;"	d
DEFMAXNAKLOOPS	fsm.h	149;"	d
DEFMAXTERMREQS	fsm.h	147;"	d
DEFMRU	lcp.h	121;"	d
DEFTIMEOUT	fsm.h	146;"	d
DELAYED_UP	lcp.c	67;"	d	file:
DICT_ATTR	plugins/radius/radiusclient.h	/^} DICT_ATTR;$/;"	t	typeref:struct:dict_attr
DICT_VALUE	plugins/radius/radiusclient.h	/^} DICT_VALUE;$/;"	t	typeref:struct:dict_value
DISCREQ	lcp.h	78;"	d
DLT_PPP_PPPD	options.c	68;"	d	file:
DLT_PPP_PPPD	options.c	70;"	d	file:
DO_BSD_COMPRESS	include/net/ppp-comp.h	46;"	d
DO_DEFLATE	include/net/ppp-comp.h	49;"	d
DO_PREDICTOR_1	include/net/ppp-comp.h	51;"	d
DO_PREDICTOR_2	include/net/ppp-comp.h	52;"	d
DesDecrypt	pppcrypt.c	/^DesDecrypt(cipher, clear)$/;"	f
DesEncrypt	pppcrypt.c	/^DesEncrypt(clear, cipher)$/;"	f
DesSetkey	pppcrypt.c	/^DesSetkey(key)$/;"	f
E164_CC_DEFAULT_LEN	plugins/pppoatm/ans.c	35;"	d	file:
E164_CC_FILE	plugins/pppoatm/ans.c	36;"	d	file:
EAPSRP_ACK	eap.h	69;"	d
EAPSRP_CHALLENGE	eap.h	64;"	d
EAPSRP_CKEY	eap.h	65;"	d
EAPSRP_CVALIDATOR	eap.h	67;"	d
EAPSRP_LWRECHALLENGE	eap.h	70;"	d
EAPSRP_SKEY	eap.h	66;"	d
EAPSRP_SVALIDATOR	eap.h	68;"	d
EAPT_ARCOT	eap.h	57;"	d
EAPT_CISCOWIRELESS	eap.h	58;"	d
EAPT_DEFENDER	eap.h	55;"	d
EAPT_DSS	eap.h	51;"	d
EAPT_IDENTITY	eap.h	43;"	d
EAPT_KEA	eap.h	52;"	d
EAPT_KEA_VALIDATE	eap.h	53;"	d
EAPT_MD5CHAP	eap.h	46;"	d
EAPT_NAK	eap.h	45;"	d
EAPT_NOKIACARD	eap.h	59;"	d
EAPT_NOTIFICATION	eap.h	44;"	d
EAPT_OTP	eap.h	47;"	d
EAPT_RSA	eap.h	50;"	d
EAPT_SRP	eap.h	60;"	d
EAPT_TLS	eap.h	54;"	d
EAPT_TOKEN	eap.h	48;"	d
EAPT_W2K	eap.h	56;"	d
EAP_DEFALLOWREQ	eap.h	144;"	d
EAP_DEFREQTIME	eap.h	143;"	d
EAP_DEFTIMEOUT	eap.h	141;"	d
EAP_DEFTRANSMITS	eap.h	142;"	d
EAP_FAILURE	eap.h	40;"	d
EAP_HEADERLEN	eap.h	33;"	d
EAP_PEER	pppd.h	360;"	d
EAP_REQUEST	eap.h	37;"	d
EAP_RESPONSE	eap.h	38;"	d
EAP_STATES	eap.h	96;"	d
EAP_SUCCESS	eap.h	39;"	d
EAP_WITHPEER	pppd.h	359;"	d
ECHOREP	lcp.h	77;"	d
ECHOREQ	lcp.h	76;"	d
EH	plugins/rp-pppoe/common.c	167;"	d	file:
ENV	plugins/radius/radiusclient.h	/^} ENV;$/;"	t	typeref:struct:env
ENV_SIZE	plugins/radius/radiusclient.h	383;"	d
EPD_IP	pppd.h	196;"	d
EPD_LOCAL	pppd.h	195;"	d
EPD_MAC	pppd.h	197;"	d
EPD_MAGIC	pppd.h	198;"	d
EPD_NULL	pppd.h	194;"	d
EPD_PHONENUM	pppd.h	199;"	d
EPFL_OUI	plugins/pppoatm/atmsap.h	24;"	d
ERROR_RC	plugins/radius/radiusclient.h	344;"	d
ETH_JUMBO_LEN	plugins/rp-pppoe/pppoe.h	176;"	d
ETH_PPPOE_DISCOVERY	plugins/rp-pppoe/pppoe.h	103;"	d
ETH_PPPOE_MTU	plugins/rp-pppoe/pppoe.h	199;"	d
ETH_PPPOE_SESSION	plugins/rp-pppoe/pppoe.h	104;"	d
EXIT_AUTH_TOPEER_FAILED	pppd.h	832;"	d
EXIT_CALLBACK	pppd.h	827;"	d
EXIT_CNID_AUTH_FAILED	pppd.h	836;"	d
EXIT_CONNECT_FAILED	pppd.h	821;"	d
EXIT_CONNECT_TIME	pppd.h	826;"	d
EXIT_FATAL_ERROR	pppd.h	814;"	d
EXIT_HANGUP	pppd.h	829;"	d
EXIT_IDLE_TIMEOUT	pppd.h	825;"	d
EXIT_INIT_FAILED	pppd.h	831;"	d
EXIT_LOCK_FAILED	pppd.h	819;"	d
EXIT_LOOPBACK	pppd.h	830;"	d
EXIT_NEGOTIATION_FAILED	pppd.h	823;"	d
EXIT_NOT_ROOT	pppd.h	816;"	d
EXIT_NO_KERNEL_SUPPORT	pppd.h	817;"	d
EXIT_OK	pppd.h	813;"	d
EXIT_OPEN_FAILED	pppd.h	820;"	d
EXIT_OPTION_ERROR	pppd.h	815;"	d
EXIT_PEER_AUTH_FAILED	pppd.h	824;"	d
EXIT_PEER_DEAD	pppd.h	828;"	d
EXIT_PTYCMD_FAILED	pppd.h	822;"	d
EXIT_TRAFFIC_LIMIT	pppd.h	834;"	d
EXIT_USER_REQUEST	pppd.h	818;"	d
Eth_PPPOE_Discovery	plugins/rp-pppoe/if.c	/^UINT16_t Eth_PPPOE_Discovery = ETH_PPPOE_DISCOVERY;$/;"	v
Eth_PPPOE_Discovery	plugins/rp-pppoe/pppoe-discovery.c	/^UINT16_t Eth_PPPOE_Discovery = ETH_PPPOE_DISCOVERY;$/;"	v
Eth_PPPOE_Session	plugins/rp-pppoe/if.c	/^UINT16_t Eth_PPPOE_Session   = ETH_PPPOE_SESSION;$/;"	v
Eth_PPPOE_Session	plugins/rp-pppoe/pppoe-discovery.c	/^UINT16_t Eth_PPPOE_Session   = ETH_PPPOE_SESSION;$/;"	v
Expand	pppcrypt.c	/^Expand(in, out)$/;"	f	file:
F	md5.c	65;"	d	file:
FALSE	md4.c	35;"	d	file:
FATAL	plugins/pppoatm/atmres.h	28;"	d
FF	md5.c	75;"	d	file:
FLAGS_GOOD	sys-linux.c	227;"	d	file:
FLAGS_MASK	sys-linux.c	228;"	d	file:
FRAME_ADDR	plugins/rp-pppoe/pppoe.h	164;"	d
FRAME_CTRL	plugins/rp-pppoe/pppoe.h	165;"	d
FRAME_ENC	plugins/rp-pppoe/pppoe.h	166;"	d
FRAME_ESC	plugins/rp-pppoe/pppoe.h	162;"	d
FRAME_FLAG	plugins/rp-pppoe/pppoe.h	163;"	d
FSMDEBUG	pppd.h	875;"	d
FSMDEBUG	pppd.h	877;"	d
G	md5.c	66;"	d	file:
GET16	plugins/pppoatm/ans.c	38;"	d	file:
GETCHAR	pppd.h	756;"	d
GETLONG	pppd.h	773;"	d
GETSHORT	pppd.h	764;"	d
GETSTR_LENGTH	plugins/radius/radiusclient.h	39;"	d
GG	md5.c	80;"	d	file:
GIDSET_TYPE	pppd.h	156;"	d
GenerateAuthenticatorResponse	chap_ms.c	/^GenerateAuthenticatorResponse(u_char PasswordHashHash[MD4_SIGNATURE_SIZE],$/;"	f
GenerateAuthenticatorResponsePlain	chap_ms.c	/^GenerateAuthenticatorResponsePlain$/;"	f	file:
Get7Bits	pppcrypt.c	/^Get7Bits(input, startBit)$/;"	f	file:
GetMask	sys-linux.c	/^u_int32_t GetMask (u_int32_t addr)$/;"	f
GetMask	sys-solaris.c	/^GetMask(addr)$/;"	f
H	md5.c	67;"	d	file:
HAS_BACKSLASH	srp-entry.c	46;"	d	file:
HAS_DQUOTE	srp-entry.c	44;"	d	file:
HAS_SPACE	srp-entry.c	43;"	d	file:
HAS_SQUOTE	srp-entry.c	45;"	d	file:
HAVE_ASM_TYPES_H	plugins/rp-pppoe/config.h	54;"	d
HAVE_FCNTL_H	plugins/rp-pppoe/config.h	57;"	d
HAVE_GETOPT_H	plugins/rp-pppoe/config.h	60;"	d
HAVE_LINUX_IF_ETHER_H	plugins/rp-pppoe/config.h	63;"	d
HAVE_LINUX_IF_H	plugins/rp-pppoe/config.h	87;"	d
HAVE_LINUX_IF_PACKET_H	plugins/rp-pppoe/config.h	69;"	d
HAVE_LINUX_IF_PPPOX_H	plugins/rp-pppoe/config.h	72;"	d
HAVE_LINUX_KERNEL_PPPOE	plugins/rp-pppoe/config.h	66;"	d
HAVE_NETINET_IF_ETHER_H	plugins/rp-pppoe/config.h	99;"	d
HAVE_NETPACKET_PACKET_H	plugins/rp-pppoe/config.h	102;"	d
HAVE_NET_BPF_H	plugins/rp-pppoe/config.h	75;"	d
HAVE_NET_ETHERNET_H	plugins/rp-pppoe/config.h	81;"	d
HAVE_NET_IF_ARP_H	plugins/rp-pppoe/config.h	78;"	d
HAVE_NET_IF_ETHER_H	plugins/rp-pppoe/config.h	93;"	d
HAVE_NET_IF_H	plugins/rp-pppoe/config.h	84;"	d
HAVE_NET_IF_TYPES_H	plugins/rp-pppoe/config.h	96;"	d
HAVE_N_HDLC	plugins/rp-pppoe/config.h	132;"	d
HAVE_SELECT	plugins/rp-pppoe/config.h	42;"	d
HAVE_SOCKET	plugins/rp-pppoe/config.h	45;"	d
HAVE_STRERROR	plugins/rp-pppoe/config.h	48;"	d
HAVE_STRTOL	plugins/rp-pppoe/config.h	51;"	d
HAVE_STRUCT_SOCKADDR_LL	plugins/rp-pppoe/config.h	30;"	d
HAVE_SYSLOG_H	plugins/rp-pppoe/config.h	126;"	d
HAVE_SYS_CDEFS_H	plugins/rp-pppoe/config.h	105;"	d
HAVE_SYS_IOCTL_H	plugins/rp-pppoe/config.h	111;"	d
HAVE_SYS_PARAM_H	plugins/rp-pppoe/config.h	114;"	d
HAVE_SYS_SOCKET_H	plugins/rp-pppoe/config.h	117;"	d
HAVE_SYS_TIME_H	plugins/rp-pppoe/config.h	120;"	d
HAVE_SYS_UIO_H	plugins/rp-pppoe/config.h	123;"	d
HAVE_SYS_WAIT_H	plugins/rp-pppoe/config.h	8;"	d
HAVE_UNISTD_H	plugins/rp-pppoe/config.h	129;"	d
HDR_SIZE	plugins/rp-pppoe/pppoe.h	194;"	d
HEADERLEN	fsm.h	48;"	d
HH	md5.c	85;"	d	file:
HOSTS_ATM	plugins/pppoatm/atm.h	43;"	d
I	md5.c	68;"	d	file:
I0	md4.c	45;"	d	file:
I1	md4.c	46;"	d	file:
I2	md4.c	47;"	d	file:
I3	md4.c	48;"	d	file:
IDENTIF	lcp.h	79;"	d
II	md5.c	90;"	d	file:
IMPLEMENTATION	options.c	346;"	d	file:
IN6_LLADDR_FROM_EUI64	sys-linux.c	160;"	d	file:
IN6_LLADDR_FROM_EUI64	sys-solaris.c	201;"	d	file:
IN6_LLTOKEN_FROM_EUI64	sys-solaris.c	204;"	d	file:
INCPTR	pppd.h	786;"	d
INET_ADDR	sys-solaris.c	1963;"	d	file:
INITIAL	fsm.h	123;"	d
INT4	md5.h	/^typedef int          INT4;$/;"	t
INT4	md5.h	/^typedef long          INT4;$/;"	t
INT4	plugins/radius/radiusclient.h	/^typedef int          INT4;$/;"	t
IP6_HDRLEN	ipv6cp.c	1509;"	d	file:
IP6_NHDR_FRAG	ipv6cp.c	1510;"	d	file:
IPCPDEBUG	pppd.h	887;"	d
IPCPDEBUG	pppd.h	889;"	d
IPCP_VJMODE_OLD	ipcp.h	59;"	d
IPCP_VJMODE_RFC1172	ipcp.h	60;"	d
IPCP_VJMODE_RFC1332	ipcp.h	61;"	d
IPCP_VJ_COMP	ipcp.h	64;"	d
IPCP_VJ_COMP_OLD	ipcp.h	65;"	d
IPPROTO_TCP	ipcp.c	2273;"	d	file:
IPV4ALEN	plugins/rp-pppoe/pppoe.h	168;"	d
IPV6CPDEBUG	pppd.h	893;"	d
IPV6CPDEBUG	pppd.h	895;"	d
IPXCPDEBUG	pppd.h	911;"	d
IPXCPDEBUG	pppd.h	913;"	d
IPX_COMPLETE	ipxcp.h	53;"	d
IPX_COMPRESSION_PROTOCOL	ipxcp.h	50;"	d
IPX_NETWORK_NUMBER	ipxcp.h	48;"	d
IPX_NODE_NUMBER	ipxcp.h	49;"	d
IPX_NONE	ipxcp.h	56;"	d
IPX_ROUTER_NAME	ipxcp.h	52;"	d
IPX_ROUTER_PROTOCOL	ipxcp.h	51;"	d
IP_DEV_NAME	sys-solaris.c	154;"	d	file:
IP_HDRLEN	ipcp.c	2270;"	d	file:
IP_MOD_NAME	sys-solaris.c	158;"	d	file:
IP_OFFMASK	ipcp.c	2271;"	d	file:
ISWILD	auth.c	124;"	d	file:
KVERSION	sys-linux.c	223;"	d	file:
LCPDEBUG	pppd.h	881;"	d
LCPDEBUG	pppd.h	883;"	d
LENCIADDR	ipcp.c	733;"	d	file:
LENCIADDRS	ipcp.c	731;"	d	file:
LENCICBCP	lcp.c	681;"	d	file:
LENCICHAP	lcp.c	677;"	d	file:
LENCIDNS	ipcp.c	734;"	d	file:
LENCIIFACEID	ipv6cp.c	552;"	d	file:
LENCILONG	lcp.c	679;"	d	file:
LENCILQR	lcp.c	680;"	d	file:
LENCISHORT	lcp.c	678;"	d	file:
LENCIVJ	ipcp.c	732;"	d	file:
LENCIVJ	ipv6cp.c	551;"	d	file:
LENCIVOID	lcp.c	676;"	d	file:
LENCIWINS	ipcp.c	735;"	d	file:
LOCAL_CFLAGS	Android.mk	/^LOCAL_CFLAGS := -DCHAPMS=1 -DMPPE=1 -DINET6=1 -DUSE_OPENSSL=1 -Wno-unused-parameter -Wno-empty-body -Wno-missing-field-initializers -Wno-attributes -Wno-sign-compare -Wno-pointer-sign -Werror$/;"	m
LOCAL_C_INCLUDES	Android.mk	/^LOCAL_C_INCLUDES := \\$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= pppd_vendor$/;"	m
LOCAL_PATH	Android.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_PROPRIETARY_MODULE	Android.mk	/^LOCAL_PROPRIETARY_MODULE := true$/;"	m
LOCAL_SHARED_LIBRARIES	Android.mk	/^LOCAL_SHARED_LIBRARIES := \\$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES:= \\$/;"	m
LOCK_DIR	utils.c	859;"	d	file:
LOCK_DIR	utils.c	862;"	d	file:
LOCK_DIR	utils.c	864;"	d	file:
LOG_PPP	pppd.h	856;"	d
LOG_PPP	pppd.h	858;"	d
LOWERUP	chap-new.c	107;"	d	file:
LcpEchoCheck	lcp.c	/^LcpEchoCheck (f)$/;"	f	file:
LcpEchoTimeout	lcp.c	/^LcpEchoTimeout (arg)$/;"	f	file:
LcpLinkFailure	lcp.c	/^void LcpLinkFailure (f)$/;"	f	file:
LcpSendEchoRequest	lcp.c	/^LcpSendEchoRequest (f)$/;"	f	file:
MAINDEBUG	pppd.h	863;"	d
MAINDEBUG	pppd.h	865;"	d
MAKEHEADER	pppd.h	805;"	d
MAX	plugins/radius/radiusclient.h	370;"	d
MAX	pppd.h	928;"	d
MAXARGS	pppd.h	80;"	d
MAXCLASSLEN	plugins/radius/radius.c	106;"	d	file:
MAXIFS	sys-solaris.c	213;"	d	file:
MAXMRU	lcp.h	123;"	d
MAXNAMELEN	pppd.h	81;"	d
MAXSECRETLEN	pppd.h	82;"	d
MAXSESSIONID	plugins/radius/radius.c	102;"	d	file:
MAXWORDLEN	pppd.h	79;"	d
MAX_ADDR_LEN	sys-linux.c	102;"	d	file:
MAX_ANSWER	plugins/pppoatm/ans.c	31;"	d	file:
MAX_ATM_ADDR_LEN	plugins/pppoatm/atm.h	83;"	d
MAX_ATM_NAME_LEN	plugins/pppoatm/atm.h	85;"	d
MAX_ATM_QOS_LEN	plugins/pppoatm/atm.h	86;"	d
MAX_ATM_SAP_LEN	plugins/pppoatm/atm.h	87;"	d
MAX_CHALLENGE_LEN	chap-new.h	54;"	d
MAX_CHALLENGE_LENGTH	eap.h	79;"	d
MAX_ENDP_LEN	pppd.h	186;"	d
MAX_HDR	include/net/slcompress.h	29;"	d
MAX_HDR	include/net/vjcompress.h	29;"	d
MAX_IFS	sys-linux.c	225;"	d	file:
MAX_IFS	sys-solaris.c	2148;"	d	file:
MAX_LINE	plugins/pppoatm/ans.c	34;"	d	file:
MAX_NAME	plugins/pppoatm/ans.c	32;"	d	file:
MAX_NT_PASSWORD	chap_ms.h	36;"	d
MAX_PADI_ATTEMPTS	plugins/rp-pppoe/pppoe.h	151;"	d
MAX_POLLFDS	sys-solaris.c	227;"	d	file:
MAX_PPPOE_MTU	plugins/rp-pppoe/pppoe.h	197;"	d
MAX_PPPOE_PAYLOAD	plugins/rp-pppoe/pppoe.h	195;"	d
MAX_RESPONSE_LEN	chap-new.h	55;"	d
MAX_SECRET_LENGTH	plugins/radius/radiusclient.h	70;"	d
MAX_STATES	include/net/slcompress.h	28;"	d
MAX_STATES	include/net/vjcompress.h	28;"	d
MAX_STATES	ipcp.h	57;"	d
MD4Final	md4.c	/^MD4Final(buf, MD)$/;"	f
MD4Final	openssl-hash.h	29;"	d
MD4Init	md4.c	/^MD4Init(MDp)$/;"	f
MD4Init	openssl-hash.h	27;"	d
MD4Print	md4.c	/^MD4Print(MDp)$/;"	f
MD4Update	md4.c	/^MD4Update(MDp,X,count)$/;"	f
MD4Update	openssl-hash.h	28;"	d
MD4_CTX	md4.h	/^} MD4_CTX;$/;"	t	typeref:struct:__anon6
MD4_SIGNATURE_SIZE	chap_ms.h	35;"	d
MD5_CTX	md5.h	/^} MD5_CTX;$/;"	t	typeref:struct:__anon7
MD5_Final	md5.c	/^void MD5_Final (hash, mdContext)$/;"	f
MD5_HASH_SIZE	chap-md5.c	41;"	d	file:
MD5_HASH_SIZE	plugins/radius/radius.c	49;"	d	file:
MD5_Init	md5.c	/^void MD5_Init (mdContext)$/;"	f
MD5_MAX_CHALLENGE	chap-md5.c	43;"	d	file:
MD5_MIN_CHALLENGE	chap-md5.c	42;"	d	file:
MD5_SIGNATURE_SIZE	eap.h	77;"	d
MD5_Update	md5.c	/^void MD5_Update (mdContext, inBuf, inLen)$/;"	f
MDTYPE_ALL	chap-new.c	45;"	d	file:
MDTYPE_ALL	chap-new.c	47;"	d	file:
MDTYPE_MD5	chap-new.h	60;"	d
MDTYPE_MICROSOFT	chap-new.h	59;"	d
MDTYPE_MICROSOFT_V2	chap-new.h	58;"	d
MDTYPE_NONE	chap-new.h	61;"	d
MDblock	md4.c	/^MDblock(MDp,Xb)$/;"	f	file:
MGMT_POLL_SECRET	plugins/radius/radiusclient.h	339;"	d
MIN	plugins/radius/radiusclient.h	367;"	d
MIN	pppd.h	925;"	d
MINMRU	lcp.h	122;"	d
MIN_CHALLENGE_LENGTH	eap.h	78;"	d
MPPE_ALL_BITS	mppe.h	65;"	d
MPPE_CI_TO_OPTS	mppe.h	90;"	d
MPPE_C_BIT	mppe.h	57;"	d
MPPE_D_BIT	mppe.h	58;"	d
MPPE_ENC_POL_ENC_ALLOWED	chap_ms.h	77;"	d
MPPE_ENC_POL_ENC_REQUIRED	chap_ms.h	78;"	d
MPPE_ENC_TYPES_RC4_128	chap_ms.h	80;"	d
MPPE_ENC_TYPES_RC4_40	chap_ms.h	79;"	d
MPPE_H_BIT	mppe.h	62;"	d
MPPE_L_BIT	mppe.h	59;"	d
MPPE_MAX_KEY_LEN	mppe.h	37;"	d
MPPE_M_BIT	mppe.h	61;"	d
MPPE_OPTS_TO_CI	mppe.h	68;"	d
MPPE_OPT_128	mppe.h	41;"	d
MPPE_OPT_40	mppe.h	40;"	d
MPPE_OPT_56	mppe.h	44;"	d
MPPE_OPT_D	mppe.h	46;"	d
MPPE_OPT_MPPC	mppe.h	45;"	d
MPPE_OPT_STATEFUL	mppe.h	42;"	d
MPPE_OPT_UNKNOWN	mppe.h	48;"	d
MPPE_OPT_UNSUPPORTED	mppe.h	47;"	d
MPPE_PAD	mppe.h	36;"	d
MPPE_S_BIT	mppe.h	60;"	d
MSDNS	plugins/radius/radius.c	51;"	d	file:
MS_AUTH_RESPONSE_LENGTH	chap_ms.h	40;"	d
MS_CHAP2_AUTHENTICATEE	chap_ms.h	87;"	d
MS_CHAP2_AUTHENTICATOR	chap_ms.h	88;"	d
MS_CHAP2_FLAGS	chap_ms.h	68;"	d
MS_CHAP2_NTRESP	chap_ms.h	66;"	d
MS_CHAP2_NTRESP_LEN	chap_ms.h	67;"	d
MS_CHAP2_PEER_CHALLENGE	chap_ms.h	63;"	d
MS_CHAP2_PEER_CHAL_LEN	chap_ms.h	64;"	d
MS_CHAP2_RESERVED_LEN	chap_ms.h	65;"	d
MS_CHAP2_RESPONSE_LEN	chap_ms.h	39;"	d
MS_CHAP_ERROR_ACCT_DISABLED	chap_ms.h	45;"	d
MS_CHAP_ERROR_AUTHENTICATION_FAILURE	chap_ms.h	48;"	d
MS_CHAP_ERROR_CHANGING_PASSWORD	chap_ms.h	49;"	d
MS_CHAP_ERROR_NO_DIALIN_PERMISSION	chap_ms.h	47;"	d
MS_CHAP_ERROR_PASSWD_EXPIRED	chap_ms.h	46;"	d
MS_CHAP_ERROR_RESTRICTED_LOGON_HOURS	chap_ms.h	44;"	d
MS_CHAP_LANMANRESP	chap_ms.h	54;"	d
MS_CHAP_LANMANRESP_LEN	chap_ms.h	55;"	d
MS_CHAP_NTRESP	chap_ms.h	56;"	d
MS_CHAP_NTRESP_LEN	chap_ms.h	57;"	d
MS_CHAP_RESPONSE_LEN	chap_ms.h	38;"	d
MS_CHAP_USENT	chap_ms.h	58;"	d
MakeKey	pppcrypt.c	/^MakeKey(key, des_key)$/;"	f	file:
NAKCIADDR	ipcp.c	1068;"	d	file:
NAKCIADDRS	ipcp.c	1041;"	d	file:
NAKCICHAP	lcp.c	984;"	d	file:
NAKCICHAR	lcp.c	996;"	d	file:
NAKCIDNS	ipcp.c	1081;"	d	file:
NAKCIENDP	lcp.c	1041;"	d	file:
NAKCIIFACEID	ipv6cp.c	703;"	d	file:
NAKCILONG	lcp.c	1018;"	d	file:
NAKCILQR	lcp.c	1029;"	d	file:
NAKCISHORT	lcp.c	1007;"	d	file:
NAKCIVJ	ipcp.c	1056;"	d	file:
NAKCIVJ	ipv6cp.c	715;"	d	file:
NAKCIVOID	lcp.c	974;"	d	file:
NAME_LENGTH	plugins/radius/radiusclient.h	38;"	d
NEW_A	include/net/slcompress.h	84;"	d
NEW_A	include/net/vjcompress.h	84;"	d
NEW_C	include/net/slcompress.h	81;"	d
NEW_C	include/net/vjcompress.h	81;"	d
NEW_I	include/net/slcompress.h	82;"	d
NEW_I	include/net/vjcompress.h	82;"	d
NEW_S	include/net/slcompress.h	83;"	d
NEW_S	include/net/vjcompress.h	83;"	d
NEW_U	include/net/slcompress.h	86;"	d
NEW_U	include/net/vjcompress.h	86;"	d
NEW_W	include/net/slcompress.h	85;"	d
NEW_W	include/net/vjcompress.h	85;"	d
NLPID_IEEE802_1_SNAP	plugins/pppoatm/atmsap.h	17;"	d
NLSP	ipxcp.h	58;"	d
NMODULES	sys-solaris.c	233;"	d	file:
NODE	ipxcp.c	223;"	d	file:
NONWILD_CLIENT	auth.c	122;"	d	file:
NONWILD_SERVER	auth.c	121;"	d	file:
NOT_AUTHENTICATED	plugins/winbind.c	59;"	d	file:
NOT_BROADCAST	plugins/rp-pppoe/pppoe.h	307;"	d
NOT_UNICAST	plugins/rp-pppoe/pppoe.h	305;"	d
NPMODE_DROP	include/net/ppp_defs.h	/^    NPMODE_DROP,		\/* silently drop the packet *\/$/;"	e	enum:NPmode
NPMODE_ERROR	include/net/ppp_defs.h	/^    NPMODE_ERROR,		\/* return an error *\/$/;"	e	enum:NPmode
NPMODE_PASS	include/net/ppp_defs.h	/^    NPMODE_PASS,		\/* pass the packet through *\/$/;"	e	enum:NPmode
NPMODE_QUEUE	include/net/ppp_defs.h	/^    NPMODE_QUEUE		\/* save it up for later. *\/$/;"	e	enum:NPmode
NPmode	include/net/ppp_defs.h	/^enum NPmode {$/;"	g
NTPasswordHash	chap_ms.c	/^NTPasswordHash(u_char *secret, int secret_len, u_char hash[MD4_SIGNATURE_SIZE])$/;"	f	file:
NUM_PPP	pppd.h	78;"	d
N_SYNC_PPP	sys-linux.c	427;"	d	file:
OK_RC	plugins/radius/radiusclient.h	345;"	d
OPENED	fsm.h	132;"	d
OPRIO_CFGFILE	pppd.h	150;"	d
OPRIO_CMDLINE	pppd.h	151;"	d
OPRIO_DEFAULT	pppd.h	149;"	d
OPRIO_ROOT	pppd.h	153;"	d
OPRIO_SECFILE	pppd.h	152;"	d
OPTION	plugins/radius/options.h	/^} OPTION;$/;"	t	typeref:struct:_option
OPTION_LEN	plugins/radius/options.h	12;"	d
OPT_A2CLR	pppd.h	137;"	d
OPT_A2CLRB	pppd.h	130;"	d
OPT_A2COPY	pppd.h	135;"	d
OPT_A2LIST	pppd.h	129;"	d
OPT_A2OR	pppd.h	120;"	d
OPT_A2PRINTER	pppd.h	142;"	d
OPT_A2STRVAL	pppd.h	143;"	d
OPT_ALIAS	pppd.h	134;"	d
OPT_DEVEQUIV	pppd.h	140;"	d
OPT_DEVNAM	pppd.h	141;"	d
OPT_ENABLE	pppd.h	136;"	d
OPT_HEX	pppd.h	116;"	d
OPT_HIDE	pppd.h	128;"	d
OPT_INC	pppd.h	119;"	d
OPT_INITONLY	pppd.h	139;"	d
OPT_LIMITS	pppd.h	126;"	d
OPT_LLIMIT	pppd.h	124;"	d
OPT_NOARG	pppd.h	117;"	d
OPT_NOINCR	pppd.h	123;"	d
OPT_NOPRINT	pppd.h	144;"	d
OPT_OR	pppd.h	118;"	d
OPT_PASSIVE	fsm.h	138;"	d
OPT_PRIO	pppd.h	132;"	d
OPT_PRIOSUB	pppd.h	133;"	d
OPT_PRIV	pppd.h	121;"	d
OPT_PRIVFIX	pppd.h	138;"	d
OPT_RESTART	fsm.h	139;"	d
OPT_SILENT	fsm.h	140;"	d
OPT_STATIC	pppd.h	122;"	d
OPT_ULIMIT	pppd.h	125;"	d
OPT_VAL	pppd.h	146;"	d
OPT_VALUE	pppd.h	115;"	d
OPT_ZEROINF	pppd.h	131;"	d
OPT_ZEROOK	pppd.h	127;"	d
OT_ANY	plugins/radius/options.h	20;"	d
OT_AUO	plugins/radius/options.h	18;"	d
OT_INT	plugins/radius/options.h	16;"	d
OT_SRV	plugins/radius/options.h	17;"	d
OT_STR	plugins/radius/options.h	15;"	d
OUTCHAR	utils.c	153;"	d	file:
O_NONBLOCK	main.c	265;"	d	file:
O_NONBLOCK	main.c	266;"	d	file:
OldDevnameHook	plugins/rp-pppoe/plugin.c	/^int (*OldDevnameHook)(char *cmd, char **argv, int doit) = NULL;$/;"	v
Options	plugins/radius/radius.c	/^static option_t Options[] = {$/;"	v	file:
Options	plugins/radius/radrealms.c	/^static option_t Options[] = {$/;"	v	file:
Options	plugins/rp-pppoe/plugin.c	/^static option_t Options[] = {$/;"	v	file:
Options	plugins/winbind.c	/^static option_t Options[] = {$/;"	v	file:
OrigMissed	include/pcap-int.h	/^	long	OrigMissed;	\/* missed by i\/f before this run *\/$/;"	m	struct:pcap_md
PADDING	md5.c	/^static unsigned char PADDING[64] = {$/;"	v	file:
PADI_TIMEOUT	plugins/rp-pppoe/pppoe.h	154;"	d
PAM_password	session.c	/^static const char *PAM_password;$/;"	v	file:
PAM_session	session.c	/^static int   PAM_session = 0;$/;"	v	file:
PAM_username	session.c	/^static const char *PAM_username;$/;"	v	file:
PAP_PEER	pppd.h	356;"	d
PAP_WITHPEER	pppd.h	355;"	d
PARSE_MODE_EQUAL	plugins/radius/avpair.c	518;"	d	file:
PARSE_MODE_INVALID	plugins/radius/avpair.c	520;"	d	file:
PARSE_MODE_NAME	plugins/radius/avpair.c	517;"	d	file:
PARSE_MODE_VALUE	plugins/radius/avpair.c	519;"	d	file:
PATHNAMES_H	plugins/radius/pathnames.h	18;"	d
PATH_MAX	plugins/radius/includes.h	36;"	d
PATH_MAX	plugins/radius/radiusclient.h	374;"	d
PCAP_FDDIPAD	include/pcap-int.h	112;"	d
PF_ATMPVC	plugins/pppoatm/atm.h	27;"	d
PF_ATMSVC	plugins/pppoatm/atm.h	31;"	d
PHASE_AUTHENTICATE	pppd.h	384;"	d
PHASE_CALLBACK	pppd.h	385;"	d
PHASE_DEAD	pppd.h	379;"	d
PHASE_DISCONNECT	pppd.h	389;"	d
PHASE_DORMANT	pppd.h	382;"	d
PHASE_ESTABLISH	pppd.h	383;"	d
PHASE_HOLDOFF	pppd.h	390;"	d
PHASE_INITIALIZE	pppd.h	380;"	d
PHASE_MASTER	pppd.h	391;"	d
PHASE_NETWORK	pppd.h	386;"	d
PHASE_RUNNING	pppd.h	387;"	d
PHASE_SERIALCONN	pppd.h	381;"	d
PHASE_TERMINATE	pppd.h	388;"	d
PPPCRYPT_H	pppcrypt.h	34;"	d
PPPCTL_IERROR	include/net/pppio.h	94;"	d
PPPCTL_MRU	include/net/pppio.h	96;"	d
PPPCTL_MTU	include/net/pppio.h	95;"	d
PPPCTL_OERROR	include/net/pppio.h	93;"	d
PPPCTL_UNIT	include/net/pppio.h	97;"	d
PPPDBG_AHDLC	include/net/pppio.h	107;"	d
PPPDBG_COMP	include/net/pppio.h	106;"	d
PPPDBG_DRIVER	include/net/pppio.h	104;"	d
PPPDBG_DUMP	include/net/pppio.h	102;"	d
PPPDBG_IF	include/net/pppio.h	105;"	d
PPPDBG_LOG	include/net/pppio.h	103;"	d
PPPD_LOCK_KEY	main.c	2178;"	d	file:
PPPINITFCS16	plugins/rp-pppoe/pppoe.h	220;"	d
PPPIOCGASYNCMAP	include/net/if_ppp.h	117;"	d
PPPIOCGFLAGS	include/net/if_ppp.h	115;"	d
PPPIOCGIDLE	include/net/if_ppp.h	131;"	d
PPPIOCGMRU	include/net/if_ppp.h	122;"	d
PPPIOCGMTU	include/net/if_ppp.h	138;"	d
PPPIOCGNPMODE	include/net/if_ppp.h	129;"	d
PPPIOCGRASYNCMAP	include/net/if_ppp.h	120;"	d
PPPIOCGUNIT	include/net/if_ppp.h	119;"	d
PPPIOCGXASYNCMAP	include/net/if_ppp.h	125;"	d
PPPIOCSACTIVE	include/net/if_ppp.h	134;"	d
PPPIOCSASYNCMAP	include/net/if_ppp.h	118;"	d
PPPIOCSCOMPRESS	include/net/if_ppp.h	128;"	d
PPPIOCSFLAGS	include/net/if_ppp.h	116;"	d
PPPIOCSMAXCID	include/net/if_ppp.h	124;"	d
PPPIOCSMRU	include/net/if_ppp.h	123;"	d
PPPIOCSMTU	include/net/if_ppp.h	139;"	d
PPPIOCSNPMODE	include/net/if_ppp.h	130;"	d
PPPIOCSPASS	include/net/if_ppp.h	133;"	d
PPPIOCSRASYNCMAP	include/net/if_ppp.h	121;"	d
PPPIOCSXASYNCMAP	include/net/if_ppp.h	126;"	d
PPPIOCXFERUNIT	include/net/if_ppp.h	127;"	d
PPPIO_ACTIVEFILT	include/net/pppio.h	59;"	d
PPPIO_ATTACH	include/net/pppio.h	51;"	d
PPPIO_BIND	include/net/pppio.h	55;"	d
PPPIO_CFLAGS	include/net/pppio.h	45;"	d
PPPIO_DEBUG	include/net/pppio.h	54;"	d
PPPIO_GCLEAN	include/net/pppio.h	53;"	d
PPPIO_GETCSTAT	include/net/pppio.h	42;"	d
PPPIO_GETSTAT	include/net/pppio.h	41;"	d
PPPIO_GIDLE	include/net/pppio.h	57;"	d
PPPIO_LASTMOD	include/net/pppio.h	52;"	d
PPPIO_MRU	include/net/pppio.h	44;"	d
PPPIO_MTU	include/net/pppio.h	43;"	d
PPPIO_NEWPPA	include/net/pppio.h	40;"	d
PPPIO_NPMODE	include/net/pppio.h	56;"	d
PPPIO_PASSFILT	include/net/pppio.h	58;"	d
PPPIO_RACCM	include/net/pppio.h	49;"	d
PPPIO_RCOMP	include/net/pppio.h	47;"	d
PPPIO_VJINIT	include/net/pppio.h	50;"	d
PPPIO_XACCM	include/net/pppio.h	48;"	d
PPPIO_XCOMP	include/net/pppio.h	46;"	d
PPPOEConnectDevice	plugins/rp-pppoe/plugin.c	/^PPPOEConnectDevice(void)$/;"	f	file:
PPPOEDeviceOptions	plugins/rp-pppoe/plugin.c	/^PPPOEDeviceOptions(void)$/;"	f	file:
PPPOEDisconnectDevice	plugins/rp-pppoe/plugin.c	/^PPPOEDisconnectDevice(void)$/;"	f	file:
PPPOEInitDevice	plugins/rp-pppoe/plugin.c	/^PPPOEInitDevice(void)$/;"	f	file:
PPPOERecvConfig	plugins/rp-pppoe/plugin.c	/^PPPOERecvConfig(int mru,$/;"	f	file:
PPPOE_OVERHEAD	plugins/rp-pppoe/pppoe.h	193;"	d
PPPOE_TYPE	plugins/rp-pppoe/pppoe.h	189;"	d
PPPOE_VER	plugins/rp-pppoe/pppoe.h	188;"	d
PPPOE_VER_TYPE	plugins/rp-pppoe/pppoe.h	190;"	d
PPP_ADDRESS	include/net/ppp_defs.h	67;"	d
PPP_ALLSTATIONS	include/net/ppp_defs.h	75;"	d
PPP_AT	include/net/ppp_defs.h	85;"	d
PPP_ATCP	include/net/ppp_defs.h	92;"	d
PPP_CBCP	include/net/ppp_defs.h	101;"	d
PPP_CCP	include/net/ppp_defs.h	95;"	d
PPP_CHAP	include/net/ppp_defs.h	100;"	d
PPP_COMP	include/net/ppp_defs.h	90;"	d
PPP_CONTROL	include/net/ppp_defs.h	68;"	d
PPP_DEV_NAME	sys-solaris.c	142;"	d	file:
PPP_DRV_NAME	main.c	305;"	d	file:
PPP_DRV_NAME	sys-solaris.c	138;"	d	file:
PPP_EAP	include/net/ppp_defs.h	102;"	d
PPP_EAP_H	eap.h	24;"	d
PPP_ECP	include/net/ppp_defs.h	96;"	d
PPP_ESCAPE	include/net/ppp_defs.h	78;"	d
PPP_FCS	include/net/ppp_defs.h	109;"	d
PPP_FCSLEN	include/net/ppp_defs.h	49;"	d
PPP_FLAG	include/net/ppp_defs.h	77;"	d
PPP_GOODFCS	include/net/ppp_defs.h	108;"	d
PPP_HDRLEN	include/net/ppp_defs.h	48;"	d
PPP_INITFCS	include/net/ppp_defs.h	107;"	d
PPP_IP	include/net/ppp_defs.h	84;"	d
PPP_IPCP	include/net/ppp_defs.h	91;"	d
PPP_IPV6	include/net/ppp_defs.h	89;"	d
PPP_IPV6CP	include/net/ppp_defs.h	94;"	d
PPP_IPX	include/net/ppp_defs.h	86;"	d
PPP_IPXCP	include/net/ppp_defs.h	93;"	d
PPP_LCP	include/net/ppp_defs.h	97;"	d
PPP_LQR	include/net/ppp_defs.h	99;"	d
PPP_MAXMRU	include/net/ppp_defs.h	63;"	d
PPP_MAXMTU	include/net/ppp_defs.h	60;"	d
PPP_MINMRU	include/net/ppp_defs.h	64;"	d
PPP_MINMTU	include/net/ppp_defs.h	61;"	d
PPP_MRU	include/net/ppp_defs.h	62;"	d
PPP_MTU	include/net/ppp_defs.h	59;"	d
PPP_OCTETS_DIRECTION_IN	pppd.h	337;"	d
PPP_OCTETS_DIRECTION_MAXOVERAL	pppd.h	339;"	d
PPP_OCTETS_DIRECTION_MAXSESSION	pppd.h	341;"	d
PPP_OCTETS_DIRECTION_OUT	pppd.h	338;"	d
PPP_OCTETS_DIRECTION_SUM	pppd.h	336;"	d
PPP_OVERHEAD	plugins/rp-pppoe/pppoe.h	196;"	d
PPP_PAP	include/net/ppp_defs.h	98;"	d
PPP_PROTOCOL	include/net/ppp_defs.h	69;"	d
PPP_TRANS	include/net/ppp_defs.h	79;"	d
PPP_UI	include/net/ppp_defs.h	76;"	d
PPP_VJC_COMP	include/net/ppp_defs.h	87;"	d
PPP_VJC_UNCOMP	include/net/ppp_defs.h	88;"	d
PPPoEConnection	plugins/rp-pppoe/pppoe.h	/^} PPPoEConnection;$/;"	t	typeref:struct:PPPoEConnectionStruct
PPPoEConnectionStruct	plugins/rp-pppoe/pppoe.h	/^typedef struct PPPoEConnectionStruct {$/;"	s
PPPoEDevnameHook	plugins/rp-pppoe/plugin.c	/^PPPoEDevnameHook(char *cmd, char **argv, int doit)$/;"	f	file:
PPPoEPacket	plugins/rp-pppoe/pppoe.h	/^} PPPoEPacket;$/;"	t	typeref:struct:PPPoEPacketStruct
PPPoEPacketStruct	plugins/rp-pppoe/pppoe.h	/^typedef struct PPPoEPacketStruct {$/;"	s
PPPoETag	plugins/rp-pppoe/pppoe.h	/^} PPPoETag;$/;"	t	typeref:struct:PPPoETagStruct
PPPoETagStruct	plugins/rp-pppoe/pppoe.h	/^typedef struct PPPoETagStruct {$/;"	s
PRINTMSG	pppd.h	800;"	d
PROTO_NAME	fsm.c	69;"	d	file:
PROTREJ	lcp.h	75;"	d
PUTCHAR	pppd.h	759;"	d
PUTLONG	pppd.h	779;"	d
PUTSHORT	pppd.h	768;"	d
PW_ACCESS_ACCEPT	plugins/radius/radiusclient.h	84;"	d
PW_ACCESS_CHALLENGE	plugins/radius/radiusclient.h	93;"	d
PW_ACCESS_REJECT	plugins/radius/radiusclient.h	85;"	d
PW_ACCESS_REQUEST	plugins/radius/radiusclient.h	83;"	d
PW_ACCOUNTING_MESSAGE	plugins/radius/radiusclient.h	92;"	d
PW_ACCOUNTING_OFF	plugins/radius/radiusclient.h	252;"	d
PW_ACCOUNTING_ON	plugins/radius/radiusclient.h	251;"	d
PW_ACCOUNTING_REQUEST	plugins/radius/radiusclient.h	86;"	d
PW_ACCOUNTING_RESPONSE	plugins/radius/radiusclient.h	87;"	d
PW_ACCOUNTING_STATUS	plugins/radius/radiusclient.h	88;"	d
PW_ACCT_AUTHENTIC	plugins/radius/radiusclient.h	167;"	d
PW_ACCT_DELAY_TIME	plugins/radius/radiusclient.h	163;"	d
PW_ACCT_IDLE_TIMEOUT	plugins/radius/radiusclient.h	259;"	d
PW_ACCT_INPUT_OCTETS	plugins/radius/radiusclient.h	164;"	d
PW_ACCT_INPUT_PACKETS	plugins/radius/radiusclient.h	169;"	d
PW_ACCT_INTERIM_INTERVAL	plugins/radius/radiusclient.h	176;"	d
PW_ACCT_LINK_COUNT	plugins/radius/radiusclient.h	173;"	d
PW_ACCT_MULTI_SESSION_ID	plugins/radius/radiusclient.h	172;"	d
PW_ACCT_OUTPUT_OCTETS	plugins/radius/radiusclient.h	165;"	d
PW_ACCT_OUTPUT_PACKETS	plugins/radius/radiusclient.h	170;"	d
PW_ACCT_SESSION_ID	plugins/radius/radiusclient.h	166;"	d
PW_ACCT_SESSION_TIME	plugins/radius/radiusclient.h	168;"	d
PW_ACCT_SESSION_TIMEOUT	plugins/radius/radiusclient.h	260;"	d
PW_ACCT_STATUS_TYPE	plugins/radius/radiusclient.h	162;"	d
PW_ACCT_TERMINATE_CAUSE	plugins/radius/radiusclient.h	171;"	d
PW_ACCT_UDP_PORT	plugins/radius/radiusclient.h	74;"	d
PW_ADMINISTRATIVE	plugins/radius/radiusclient.h	197;"	d
PW_ADMIN_REBOOT	plugins/radius/radiusclient.h	262;"	d
PW_ADMIN_RESET	plugins/radius/radiusclient.h	261;"	d
PW_ALL	plugins/radius/radiusclient.h	241;"	d
PW_ARA	plugins/radius/radiusclient.h	206;"	d
PW_ASYNC	plugins/radius/radiusclient.h	277;"	d
PW_AUTHENTICATE_ONLY	plugins/radius/radiusclient.h	199;"	d
PW_AUTH_ONLY	plugins/radius/radiusclient.h	240;"	d
PW_AUTH_UDP_PORT	plugins/radius/radiusclient.h	73;"	d
PW_BROADCAST	plugins/radius/radiusclient.h	213;"	d
PW_BROADCAST_LISTEN	plugins/radius/radiusclient.h	215;"	d
PW_CALLBACK	plugins/radius/radiusclient.h	271;"	d
PW_CALLBACK_FRAMED	plugins/radius/radiusclient.h	195;"	d
PW_CALLBACK_LOGIN	plugins/radius/radiusclient.h	194;"	d
PW_CALLBACK_NAS_PROMPT	plugins/radius/radiusclient.h	200;"	d
PW_CALLED_STATION_ID	plugins/radius/radiusclient.h	129;"	d
PW_CALLING_STATION_ID	plugins/radius/radiusclient.h	130;"	d
PW_CHAP_CHALLENGE	plugins/radius/radiusclient.h	139;"	d
PW_CHAP_PASSWORD	plugins/radius/radiusclient.h	102;"	d
PW_CLASS	plugins/radius/radiusclient.h	124;"	d
PW_DEFAULT	plugins/radius/radiusclient.h	234;"	d
PW_DUMB	plugins/radius/radiusclient.h	239;"	d
PW_EXPIRATION	plugins/radius/radiusclient.h	120;"	d
PW_FILTER_ID	plugins/radius/radiusclient.h	110;"	d
PW_FRAMED	plugins/radius/radiusclient.h	193;"	d
PW_FRAMED_APPLETALK_LINK	plugins/radius/radiusclient.h	136;"	d
PW_FRAMED_APPLETALK_NETWORK	plugins/radius/radiusclient.h	137;"	d
PW_FRAMED_APPLETALK_ZONE	plugins/radius/radiusclient.h	138;"	d
PW_FRAMED_CALLBACK_ID	plugins/radius/radiusclient.h	119;"	d
PW_FRAMED_COMPRESSION	plugins/radius/radiusclient.h	112;"	d
PW_FRAMED_IPX_NETWORK	plugins/radius/radiusclient.h	122;"	d
PW_FRAMED_IP_ADDRESS	plugins/radius/radiusclient.h	107;"	d
PW_FRAMED_IP_NETMASK	plugins/radius/radiusclient.h	108;"	d
PW_FRAMED_MTU	plugins/radius/radiusclient.h	111;"	d
PW_FRAMED_PROTOCOL	plugins/radius/radiusclient.h	106;"	d
PW_FRAMED_ROUTE	plugins/radius/radiusclient.h	121;"	d
PW_FRAMED_ROUTING	plugins/radius/radiusclient.h	109;"	d
PW_GANDALF	plugins/radius/radiusclient.h	207;"	d
PW_HOST_REQUEST	plugins/radius/radiusclient.h	273;"	d
PW_IDLE_TIMEOUT	plugins/radius/radiusclient.h	127;"	d
PW_IPX_HEADER_COMPRESSION	plugins/radius/radiusclient.h	220;"	d
PW_ISDN_SYNC	plugins/radius/radiusclient.h	279;"	d
PW_ISDN_SYNC_V110	plugins/radius/radiusclient.h	281;"	d
PW_ISDN_SYNC_V120	plugins/radius/radiusclient.h	280;"	d
PW_LAT	plugins/radius/radiusclient.h	228;"	d
PW_LISTEN	plugins/radius/radiusclient.h	214;"	d
PW_LOCAL	plugins/radius/radiusclient.h	286;"	d
PW_LOGIN	plugins/radius/radiusclient.h	192;"	d
PW_LOGIN_CALLBACK_NUMBER	plugins/radius/radiusclient.h	118;"	d
PW_LOGIN_IP_HOST	plugins/radius/radiusclient.h	113;"	d
PW_LOGIN_LAT_GROUP	plugins/radius/radiusclient.h	135;"	d
PW_LOGIN_LAT_NODE	plugins/radius/radiusclient.h	134;"	d
PW_LOGIN_LAT_PORT	plugins/radius/radiusclient.h	142;"	d
PW_LOGIN_LAT_SERVICE	plugins/radius/radiusclient.h	133;"	d
PW_LOGIN_PORT	plugins/radius/radiusclient.h	115;"	d
PW_LOGIN_SERVICE	plugins/radius/radiusclient.h	114;"	d
PW_LOST_CARRIER	plugins/radius/radiusclient.h	257;"	d
PW_LOST_SERVICE	plugins/radius/radiusclient.h	258;"	d
PW_MS_CHAP2_RESPONSE	plugins/radius/radiusclient.h	147;"	d
PW_MS_CHAP2_SUCCESS	plugins/radius/radiusclient.h	148;"	d
PW_MS_CHAP_CHALLENGE	plugins/radius/radiusclient.h	145;"	d
PW_MS_CHAP_MPPE_KEYS	plugins/radius/radiusclient.h	152;"	d
PW_MS_CHAP_RESPONSE	plugins/radius/radiusclient.h	146;"	d
PW_MS_MPPE_ENCRYPTION_POLICY	plugins/radius/radiusclient.h	149;"	d
PW_MS_MPPE_ENCRYPTION_TYPE	plugins/radius/radiusclient.h	150;"	d
PW_MS_MPPE_ENCRYPTION_TYPES	plugins/radius/radiusclient.h	151;"	d
PW_MS_MPPE_RECV_KEY	plugins/radius/radiusclient.h	154;"	d
PW_MS_MPPE_SEND_KEY	plugins/radius/radiusclient.h	153;"	d
PW_MS_PRIMARY_DNS_SERVER	plugins/radius/radiusclient.h	155;"	d
PW_MS_PRIMARY_NBNS_SERVER	plugins/radius/radiusclient.h	157;"	d
PW_MS_SECONDARY_DNS_SERVER	plugins/radius/radiusclient.h	156;"	d
PW_MS_SECONDARY_NBNS_SERVER	plugins/radius/radiusclient.h	158;"	d
PW_NAS_ERROR	plugins/radius/radiusclient.h	264;"	d
PW_NAS_IDENTIFIER	plugins/radius/radiusclient.h	131;"	d
PW_NAS_IP_ADDRESS	plugins/radius/radiusclient.h	103;"	d
PW_NAS_PORT	plugins/radius/radiusclient.h	104;"	d
PW_NAS_PORT_TYPE	plugins/radius/radiusclient.h	140;"	d
PW_NAS_PROMPT	plugins/radius/radiusclient.h	198;"	d
PW_NAS_REBOOT	plugins/radius/radiusclient.h	266;"	d
PW_NAS_REQUEST	plugins/radius/radiusclient.h	265;"	d
PW_NONE	plugins/radius/radiusclient.h	212;"	d
PW_OCTETS_DIRECTION	plugins/radius/radiusclient.h	186;"	d
PW_OCTETS_DIRECTION_IN	plugins/radius/radiusclient.h	291;"	d
PW_OCTETS_DIRECTION_MAX	plugins/radius/radiusclient.h	293;"	d
PW_OCTETS_DIRECTION_OUT	plugins/radius/radiusclient.h	292;"	d
PW_OCTETS_DIRECTION_SUM	plugins/radius/radiusclient.h	290;"	d
PW_OLD_PASSWORD	plugins/radius/radiusclient.h	116;"	d
PW_OUTBOUND	plugins/radius/radiusclient.h	196;"	d
PW_PASSWORD_ACK	plugins/radius/radiusclient.h	90;"	d
PW_PASSWORD_REJECT	plugins/radius/radiusclient.h	91;"	d
PW_PASSWORD_REQUEST	plugins/radius/radiusclient.h	89;"	d
PW_PORTMASTER	plugins/radius/radiusclient.h	227;"	d
PW_PORT_ERROR	plugins/radius/radiusclient.h	263;"	d
PW_PORT_LIMIT	plugins/radius/radiusclient.h	141;"	d
PW_PORT_PREEMPTED	plugins/radius/radiusclient.h	268;"	d
PW_PORT_SUSPENDED	plugins/radius/radiusclient.h	269;"	d
PW_PORT_UNNEEDED	plugins/radius/radiusclient.h	267;"	d
PW_PPP	auth.c	98;"	d	file:
PW_PPP	plugins/radius/radiusclient.h	204;"	d
PW_PROXY_STATE	plugins/radius/radiusclient.h	132;"	d
PW_RADIUS	plugins/radius/radiusclient.h	285;"	d
PW_RADIUS_REQUEST	plugins/radius/radiusclient.h	235;"	d
PW_REMOTE	plugins/radius/radiusclient.h	287;"	d
PW_REPLY_MESSAGE	plugins/radius/radiusclient.h	117;"	d
PW_RLOGIN	plugins/radius/radiusclient.h	225;"	d
PW_SERVICE_TYPE	plugins/radius/radiusclient.h	105;"	d
PW_SERVICE_UNAVAILABLE	plugins/radius/radiusclient.h	270;"	d
PW_SESSION_OCTETS_LIMIT	plugins/radius/radiusclient.h	185;"	d
PW_SESSION_TIMEOUT	plugins/radius/radiusclient.h	126;"	d
PW_SLIP	plugins/radius/radiusclient.h	205;"	d
PW_STATE	plugins/radius/radiusclient.h	123;"	d
PW_STATUS_ALIVE	plugins/radius/radiusclient.h	247;"	d
PW_STATUS_CANCEL	plugins/radius/radiusclient.h	250;"	d
PW_STATUS_CLIENT	plugins/radius/radiusclient.h	95;"	d
PW_STATUS_MODEM_START	plugins/radius/radiusclient.h	248;"	d
PW_STATUS_MODEM_STOP	plugins/radius/radiusclient.h	249;"	d
PW_STATUS_SERVER	plugins/radius/radiusclient.h	94;"	d
PW_STATUS_START	plugins/radius/radiusclient.h	245;"	d
PW_STATUS_STOP	plugins/radius/radiusclient.h	246;"	d
PW_SYNC	plugins/radius/radiusclient.h	278;"	d
PW_TCP_CLEAR	plugins/radius/radiusclient.h	226;"	d
PW_TELNET	plugins/radius/radiusclient.h	224;"	d
PW_TERMINATION_ACTION	plugins/radius/radiusclient.h	128;"	d
PW_TYPE_DATE	plugins/radius/radiusclient.h	79;"	d
PW_TYPE_INTEGER	plugins/radius/radiusclient.h	77;"	d
PW_TYPE_IPADDR	plugins/radius/radiusclient.h	78;"	d
PW_TYPE_STRING	plugins/radius/radiusclient.h	76;"	d
PW_USER_ERROR	plugins/radius/radiusclient.h	272;"	d
PW_USER_ID	plugins/radius/radiusclient.h	180;"	d
PW_USER_NAME	plugins/radius/radiusclient.h	100;"	d
PW_USER_PASSWORD	plugins/radius/radiusclient.h	101;"	d
PW_USER_REALM	plugins/radius/radiusclient.h	181;"	d
PW_USER_REQUEST	plugins/radius/radiusclient.h	256;"	d
PW_VAN_JACOBSON_TCP_IP	plugins/radius/radiusclient.h	219;"	d
PW_VENDOR_SPECIFIC	plugins/radius/radiusclient.h	125;"	d
PW_VIRTUAL	plugins/radius/radiusclient.h	282;"	d
PW_X25_PAD	plugins/radius/radiusclient.h	229;"	d
PW_X25_T3POS	plugins/radius/radiusclient.h	230;"	d
PW_XYLOGICS	plugins/radius/radiusclient.h	208;"	d
PacketCriteria	plugins/rp-pppoe/pppoe.h	/^struct PacketCriteria {$/;"	s
ParseFunc	plugins/rp-pppoe/pppoe.h	/^typedef void ParseFunc(UINT16_t type,$/;"	t
R0	sha1.c	36;"	d	file:
R1	sha1.c	37;"	d	file:
R2	sha1.c	38;"	d	file:
R3	sha1.c	39;"	d	file:
R4	sha1.c	40;"	d	file:
RACKTIMEOUT	ccp.c	253;"	d	file:
RACK_PENDING	ccp.c	250;"	d	file:
RADIUSCLIENT_H	plugins/radius/radiusclient.h	18;"	d
RATE_ERROR	plugins/pppoatm/text2qos.c	22;"	d	file:
RCSID	auth.c	71;"	d	file:
RCSID	cbcp.c	36;"	d	file:
RCSID	ccp.c	31;"	d	file:
RCSID	chap-md5.c	31;"	d	file:
RCSID	chap-new.c	31;"	d	file:
RCSID	chap_ms.c	77;"	d	file:
RCSID	demand.c	31;"	d	file:
RCSID	eap.c	46;"	d	file:
RCSID	ecp.c	60;"	d	file:
RCSID	eui64.c	38;"	d	file:
RCSID	fsm.c	43;"	d	file:
RCSID	ipcp.c	43;"	d	file:
RCSID	ipv6cp.c	141;"	d	file:
RCSID	ipxcp.c	45;"	d	file:
RCSID	lcp.c	43;"	d	file:
RCSID	magic.c	43;"	d	file:
RCSID	main.c	69;"	d	file:
RCSID	options.c	43;"	d	file:
RCSID	plugins/radius/radattr.c	/^static char const RCSID[] =$/;"	v	file:
RCSID	plugins/radius/radius.c	/^static char const RCSID[] =$/;"	v	file:
RCSID	plugins/radius/radrealms.c	/^static char const RCSID[] =$/;"	v	file:
RCSID	plugins/rp-pppoe/common.c	/^static char const RCSID[] =$/;"	v	file:
RCSID	plugins/rp-pppoe/debug.c	/^static char const RCSID[] =$/;"	v	file:
RCSID	plugins/rp-pppoe/discovery.c	/^static char const RCSID[] =$/;"	v	file:
RCSID	plugins/rp-pppoe/if.c	/^static char const RCSID[] =$/;"	v	file:
RCSID	plugins/rp-pppoe/plugin.c	/^static char const RCSID[] =$/;"	v	file:
RCSID	sys-solaris.c	88;"	d	file:
RCSID	tty.c	71;"	d	file:
RCSID	upap.c	43;"	d	file:
RCSID	utils.c	31;"	d	file:
RCV_B7_0	include/net/pppio.h	84;"	d
RCV_B7_1	include/net/pppio.h	85;"	d
RCV_EVNP	include/net/pppio.h	86;"	d
RCV_ODDP	include/net/pppio.h	87;"	d
READ_CHUNK	plugins/rp-pppoe/pppoe.h	212;"	d
REJCIADDR	ipcp.c	1328;"	d	file:
REJCIADDRS	ipcp.c	1285;"	d	file:
REJCICBCP	lcp.c	1426;"	d	file:
REJCICHAP	lcp.c	1384;"	d	file:
REJCICHARS	ipxcp.c	904;"	d	file:
REJCIDNS	ipcp.c	1344;"	d	file:
REJCIENDP	lcp.c	1439;"	d	file:
REJCIIFACEID	ipv6cp.c	837;"	d	file:
REJCILONG	lcp.c	1399;"	d	file:
REJCILQR	lcp.c	1412;"	d	file:
REJCINAME	ipxcp.c	926;"	d	file:
REJCINETWORK	ipxcp.c	889;"	d	file:
REJCINODE	ipxcp.c	925;"	d	file:
REJCIPROTO	ipxcp.c	941;"	d	file:
REJCISHORT	lcp.c	1371;"	d	file:
REJCIVJ	ipcp.c	1306;"	d	file:
REJCIVJ	ipv6cp.c	851;"	d	file:
REJCIVOID	ipxcp.c	928;"	d	file:
REJCIVOID	lcp.c	1362;"	d	file:
REJCIWINS	ipcp.c	1360;"	d	file:
REQSENT	fsm.h	129;"	d
REQUEST_INFO	plugins/radius/radiusclient.h	/^} REQUEST_INFO;$/;"	t	typeref:struct:request_info
RESP_MAX_PKTLEN	chap-new.c	93;"	d	file:
RETSIGTYPE	plugins/rp-pppoe/config.h	14;"	d
RIP_SAP	ipxcp.h	57;"	d
ROTATE_LEFT	md5.c	71;"	d	file:
ROUTE_MAX_COLS	sys-linux.c	1451;"	d	file:
RREQ_REPEAT	ccp.c	251;"	d	file:
S11	md5.c	210;"	d	file:
S12	md5.c	211;"	d	file:
S13	md5.c	212;"	d	file:
S14	md5.c	213;"	d	file:
S21	md5.c	232;"	d	file:
S22	md5.c	233;"	d	file:
S23	md5.c	234;"	d	file:
S24	md5.c	235;"	d	file:
S2T_LOCAL	plugins/pppoatm/atm.h	74;"	d
S2T_NAME	plugins/pppoatm/atm.h	73;"	d
S31	md5.c	254;"	d	file:
S32	md5.c	255;"	d	file:
S33	md5.c	256;"	d	file:
S34	md5.c	257;"	d	file:
S41	md5.c	276;"	d	file:
S42	md5.c	277;"	d	file:
S43	md5.c	278;"	d	file:
S44	md5.c	279;"	d	file:
SC_CCP_OPEN	include/net/if_ppp.h	57;"	d
SC_CCP_UP	include/net/if_ppp.h	58;"	d
SC_COMP_AC	include/net/if_ppp.h	52;"	d
SC_COMP_PROT	include/net/if_ppp.h	51;"	d
SC_COMP_RUN	include/net/if_ppp.h	76;"	d
SC_COMP_TCP	include/net/if_ppp.h	53;"	d
SC_DC_ERROR	include/net/if_ppp.h	78;"	d
SC_DC_FERROR	include/net/if_ppp.h	79;"	d
SC_DEBUG	include/net/if_ppp.h	59;"	d
SC_DECOMP_RUN	include/net/if_ppp.h	77;"	d
SC_ESCAPED	include/net/if_ppp.h	83;"	d
SC_FLUSH	include/net/if_ppp.h	82;"	d
SC_LOGB	sys-linux.c	440;"	d	file:
SC_LOG_FLUSH	include/net/if_ppp.h	63;"	d
SC_LOG_INPKT	include/net/if_ppp.h	60;"	d
SC_LOG_OUTPKT	include/net/if_ppp.h	61;"	d
SC_LOG_RAWIN	include/net/if_ppp.h	62;"	d
SC_MASK	include/net/if_ppp.h	69;"	d
SC_NO_TCP_CCID	include/net/if_ppp.h	54;"	d
SC_PKTLOST	include/net/if_ppp.h	81;"	d
SC_RCVB	sys-linux.c	439;"	d	file:
SC_RCV_B7_0	include/net/if_ppp.h	64;"	d
SC_RCV_B7_1	include/net/if_ppp.h	65;"	d
SC_RCV_EVNP	include/net/if_ppp.h	66;"	d
SC_RCV_ODDP	include/net/if_ppp.h	67;"	d
SC_REJ_COMP_AC	include/net/if_ppp.h	55;"	d
SC_REJ_COMP_TCP	include/net/if_ppp.h	56;"	d
SC_SYNC	include/net/if_ppp.h	68;"	d
SC_TBUSY	include/net/if_ppp.h	80;"	d
SC_TIMEOUT	include/net/if_ppp.h	74;"	d
SC_VJ_RESET	include/net/if_ppp.h	75;"	d
SEND_DATA	plugins/radius/radiusclient.h	/^} SEND_DATA;$/;"	t	typeref:struct:send_data
SERVER	plugins/radius/radiusclient.h	/^} SERVER;$/;"	t	typeref:struct:server
SERVER_MAX	plugins/radius/radiusclient.h	47;"	d
SERVICE_NAME	session.c	97;"	d	file:
SESSION_FAILED	session.c	99;"	d	file:
SESSION_OK	session.c	100;"	d	file:
SESS_ACCT	session.h	35;"	d
SESS_ALL	session.h	38;"	d
SESS_AUTH	session.h	34;"	d
SET_MSG	session.c	92;"	d	file:
SET_SA_FAMILY	sys-linux.c	256;"	d	file:
SET_STRING	plugins/rp-pppoe/pppoe.h	294;"	d
SHA1_CTX	openssl-hash.h	26;"	d
SHA1_CTX	sha1.h	/^} SHA1_CTX;$/;"	t	typeref:struct:__anon8
SHA1_Final	sha1.c	/^SHA1_Final(unsigned char digest[20], SHA1_CTX *context)$/;"	f
SHA1_Init	sha1.c	/^SHA1_Init(SHA1_CTX *context)$/;"	f
SHA1_SIGNATURE_SIZE	openssl-hash.h	25;"	d
SHA1_SIGNATURE_SIZE	sha1.h	13;"	d
SHA1_SIGNATURE_SIZE	sha1.h	15;"	d
SHA1_Transform	sha1.c	/^SHA1_Transform(u_int32_t state[5], const unsigned char buffer[64])$/;"	f	file:
SHA1_Update	sha1.c	/^SHA1_Update(SHA1_CTX *context, const unsigned char *data, unsigned int len)$/;"	f
SHA_DIGESTSIZE	eap.c	76;"	d	file:
SIGNAL	main.c	710;"	d	file:
SIGTYPE	pppd.h	918;"	d
SIGTYPE	pppd.h	920;"	d
SIN_ADDR	sys-linux.c	231;"	d	file:
SIOCGPPPCSTATS	include/net/if_ppp.h	146;"	d
SIOCGPPPSTATS	include/net/if_ppp.h	145;"	d
SIZEOF_UNSIGNED_INT	plugins/rp-pppoe/config.h	33;"	d
SIZEOF_UNSIGNED_LONG	plugins/rp-pppoe/config.h	36;"	d
SIZEOF_UNSIGNED_SHORT	plugins/rp-pppoe/config.h	39;"	d
SKIP	plugins/radius/clientid.c	48;"	d	file:
SKIP	plugins/radius/clientid.c	87;"	d	file:
SLF_TOSS	include/net/slcompress.h	138;"	d
SMALLBUF	plugins/rp-pppoe/pppoe.h	169;"	d
SOL_AAL	plugins/pppoatm/atm.h	39;"	d
SOL_ATM	plugins/pppoatm/atm.h	35;"	d
SPECIALS_MASK	include/net/slcompress.h	91;"	d
SPECIALS_MASK	include/net/vjcompress.h	91;"	d
SPECIAL_D	include/net/slcompress.h	90;"	d
SPECIAL_D	include/net/vjcompress.h	90;"	d
SPECIAL_I	include/net/slcompress.h	89;"	d
SPECIAL_I	include/net/vjcompress.h	89;"	d
SRPVAL_EBIT	eap.h	72;"	d
SRP_PSEUDO_ID	eap.h	74;"	d
SRP_PSEUDO_LEN	eap.h	75;"	d
STARTING	fsm.h	124;"	d
STATE_BUILDING_PACKET	plugins/rp-pppoe/pppoe.h	159;"	d
STATE_DROP_PROTO	plugins/rp-pppoe/pppoe.h	158;"	d
STATE_RECEIVED_PADO	plugins/rp-pppoe/pppoe.h	145;"	d
STATE_SENT_PADI	plugins/rp-pppoe/pppoe.h	144;"	d
STATE_SENT_PADR	plugins/rp-pppoe/pppoe.h	146;"	d
STATE_SESSION	plugins/rp-pppoe/pppoe.h	147;"	d
STATE_TERMINATED	plugins/rp-pppoe/pppoe.h	148;"	d
STATE_WAITFOR_FRAME_ADDR	plugins/rp-pppoe/pppoe.h	157;"	d
STDC_HEADERS	plugins/rp-pppoe/config.h	22;"	d
STOPPED	fsm.h	126;"	d
STOPPING	fsm.h	128;"	d
ST_UNDEF	plugins/radius/options.h	23;"	d
SUCCESS_MSG	session.c	95;"	d	file:
SXE_COMPATIBLE	plugins/pppoatm/atm.h	77;"	d
SXE_NEGOTIATION	plugins/pppoatm/atm.h	78;"	d
SXE_RESULT	plugins/pppoatm/atm.h	81;"	d
SYSDEBUG	pppd.h	869;"	d
SYSDEBUG	pppd.h	871;"	d
SetMasterKeys	chap_ms.c	/^SetMasterKeys(char *secret, int secret_len, u_char NTResponse[24], int IsServer)$/;"	f	file:
Set_Start_Key	chap_ms.c	/^Set_Start_Key(u_char *rchallenge, char *secret, int secret_len)$/;"	f	file:
StdText	chap_ms.c	/^static u_char *StdText = (u_char *)"KGS!@#$%"; \/* key from rasapi32.dll *\/$/;"	v	file:
T2A_LOCAL	plugins/pppoatm/atm.h	53;"	d
T2A_NAME	plugins/pppoatm/atm.h	51;"	d
T2A_NNI	plugins/pppoatm/atm.h	50;"	d
T2A_PVC	plugins/pppoatm/atm.h	46;"	d
T2A_REMOTE	plugins/pppoatm/atm.h	52;"	d
T2A_SVC	plugins/pppoatm/atm.h	47;"	d
T2A_UNSPEC	plugins/pppoatm/atm.h	48;"	d
T2A_WILDCARD	plugins/pppoatm/atm.h	49;"	d
T2Q_DEFAULTS	plugins/pppoatm/atm.h	66;"	d
T2S_LOCAL	plugins/pppoatm/atm.h	70;"	d
T2S_NAME	plugins/pppoatm/atm.h	69;"	d
TAG_AC_COOKIE	plugins/rp-pppoe/pppoe.h	129;"	d
TAG_AC_NAME	plugins/rp-pppoe/pppoe.h	127;"	d
TAG_AC_SYSTEM_ERROR	plugins/rp-pppoe/pppoe.h	134;"	d
TAG_END_OF_LIST	plugins/rp-pppoe/pppoe.h	125;"	d
TAG_GENERIC_ERROR	plugins/rp-pppoe/pppoe.h	135;"	d
TAG_HDR_SIZE	plugins/rp-pppoe/pppoe.h	209;"	d
TAG_HOST_UNIQ	plugins/rp-pppoe/pppoe.h	128;"	d
TAG_HURL	plugins/rp-pppoe/pppoe.h	139;"	d
TAG_IP_ROUTE_ADD	plugins/rp-pppoe/pppoe.h	141;"	d
TAG_MOTM	plugins/rp-pppoe/pppoe.h	140;"	d
TAG_PPP_MAX_PAYLOAD	plugins/rp-pppoe/pppoe.h	132;"	d
TAG_RELAY_SESSION_ID	plugins/rp-pppoe/pppoe.h	131;"	d
TAG_SERVICE_NAME	plugins/rp-pppoe/pppoe.h	126;"	d
TAG_SERVICE_NAME_ERROR	plugins/rp-pppoe/pppoe.h	133;"	d
TAG_VENDOR_SPECIFIC	plugins/rp-pppoe/pppoe.h	130;"	d
TCP_HDRLEN	ipcp.c	2275;"	d	file:
TCP_HDRLEN	ipv6cp.c	1511;"	d	file:
TCP_PUSH_BIT	include/net/slcompress.h	93;"	d
TCP_PUSH_BIT	include/net/vjcompress.h	93;"	d
TERMACK	fsm.h	59;"	d
TERMREQ	fsm.h	58;"	d
TH_FIN	ipcp.c	2276;"	d	file:
TH_FIN	ipv6cp.c	1512;"	d	file:
TIMEOUT	pppd.h	793;"	d
TIMEOUT_PENDING	chap-new.c	111;"	d	file:
TIMEOUT_RC	plugins/radius/radiusclient.h	346;"	d
TIMEREM	lcp.h	80;"	d
TIME_WITH_SYS_TIME	plugins/rp-pppoe/config.h	25;"	d
TOTAL_OVERHEAD	plugins/rp-pppoe/pppoe.h	198;"	d
TRUE	md4.c	34;"	d	file:
TRY_OTHER	plugins/pppoatm/atmres.h	27;"	d
TTCP_HLT_VS_ID	plugins/pppoatm/atmsap.h	37;"	d
TYPE_COMPRESSED_TCP	include/net/slcompress.h	77;"	d
TYPE_COMPRESSED_TCP	include/net/vjcompress.h	77;"	d
TYPE_ERROR	include/net/slcompress.h	78;"	d
TYPE_ERROR	include/net/vjcompress.h	78;"	d
TYPE_IP	include/net/slcompress.h	75;"	d
TYPE_IP	include/net/vjcompress.h	75;"	d
TYPE_UNCOMPRESSED_TCP	include/net/slcompress.h	76;"	d
TYPE_UNCOMPRESSED_TCP	include/net/vjcompress.h	76;"	d
T_ATMA	plugins/pppoatm/atmres.h	16;"	d
T_CURRENT	sys-solaris.c	2634;"	d	file:
TotAccepted	include/pcap-int.h	/^	u_long	TotAccepted;	\/* count accepted by filter *\/$/;"	m	struct:pcap_md
TotDrops	include/pcap-int.h	/^	u_long	TotDrops;	\/* count of dropped packets *\/$/;"	m	struct:pcap_md
TotMissed	include/pcap-int.h	/^	long	TotMissed;	\/* missed by i\/f during this run *\/$/;"	m	struct:pcap_md
TotPkts	include/pcap-int.h	/^	u_long	TotPkts;	\/* can't oflow for 79 hrs on ether *\/$/;"	m	struct:pcap_md
Transform	md5.c	/^static void Transform (buf, in)$/;"	f	file:
UCHAR_MAX	plugins/radius/includes.h	40;"	d
UDP6_DEV_NAME	sys-solaris.c	166;"	d	file:
UDP_DEV_NAME	sys-solaris.c	162;"	d	file:
UINT16_t	plugins/rp-pppoe/pppoe.h	/^typedef unsigned int UINT16_t;$/;"	t
UINT16_t	plugins/rp-pppoe/pppoe.h	/^typedef unsigned short UINT16_t;$/;"	t
UINT32_t	plugins/rp-pppoe/pppoe.h	/^typedef unsigned int UINT32_t;$/;"	t
UINT32_t	plugins/rp-pppoe/pppoe.h	/^typedef unsigned long UINT32_t;$/;"	t
UINT32_t	plugins/rp-pppoe/pppoe.h	/^typedef unsigned short UINT32_t;$/;"	t
UINT4	md5.h	/^typedef unsigned int UINT4;$/;"	t
UINT4	md5.h	/^typedef unsigned long UINT4;$/;"	t
UINT4	plugins/radius/radiusclient.h	/^typedef unsigned int UINT4;$/;"	t
UL	md5.c	97;"	d	file:
UL	md5.c	99;"	d	file:
UNTIMEOUT	pppd.h	794;"	d
UPAPCS_AUTHREQ	upap.h	84;"	d
UPAPCS_BADAUTH	upap.h	86;"	d
UPAPCS_CLOSED	upap.h	82;"	d
UPAPCS_INITIAL	upap.h	81;"	d
UPAPCS_OPEN	upap.h	85;"	d
UPAPCS_PENDING	upap.h	83;"	d
UPAPDEBUG	pppd.h	899;"	d
UPAPDEBUG	pppd.h	901;"	d
UPAPSS_BADAUTH	upap.h	96;"	d
UPAPSS_CLOSED	upap.h	92;"	d
UPAPSS_INITIAL	upap.h	91;"	d
UPAPSS_LISTEN	upap.h	94;"	d
UPAPSS_OPEN	upap.h	95;"	d
UPAPSS_PENDING	upap.h	93;"	d
UPAP_AUTHACK	upap.h	55;"	d
UPAP_AUTHNAK	upap.h	56;"	d
UPAP_AUTHREQ	upap.h	54;"	d
UPAP_DEFREQTIME	upap.h	103;"	d
UPAP_DEFTIMEOUT	upap.h	102;"	d
UPAP_HEADERLEN	upap.h	48;"	d
USE_BPF	plugins/rp-pppoe/pppoe.h	27;"	d
USE_BPF	plugins/rp-pppoe/pppoe.h	34;"	d
USE_DLPI	plugins/rp-pppoe/pppoe.h	32;"	d
USE_LINUX_PACKET	plugins/rp-pppoe/pppoe.h	26;"	d
USE_LINUX_PACKET	plugins/rp-pppoe/pppoe.h	30;"	d
USING_UAPI	include/net/ppp_defs.h	42;"	d
VALIDID	ipv6cp.c	340;"	d	file:
VALUE_PAIR	plugins/radius/radiusclient.h	/^} VALUE_PAIR;$/;"	t	typeref:struct:value_pair
VENDOR_DICT	plugins/radius/radiusclient.h	/^} VENDOR_DICT;$/;"	t	typeref:struct:vendor_dict
VENDOR_MICROSOFT	plugins/radius/radiusclient.h	298;"	d
VENDOR_NONE	plugins/radius/radiusclient.h	297;"	d
VERSION	patchlevel.h	1;"	d
VJF_TOSS	include/net/vjcompress.h	131;"	d
VOD_HLT_VS_ID	plugins/pppoatm/atmsap.h	34;"	d
_ATMRES_H	plugins/pppoatm/atmres.h	7;"	d
_ATMSAP_H	plugins/pppoatm/atmsap.h	7;"	d
_ATM_H	plugins/pppoatm/atm.h	7;"	d
_GNU_SOURCE	plugins/rp-pppoe/common.c	19;"	d	file:
_GNU_SOURCE	plugins/rp-pppoe/discovery.c	14;"	d	file:
_GNU_SOURCE	plugins/rp-pppoe/if.c	19;"	d	file:
_GNU_SOURCE	plugins/rp-pppoe/plugin.c	28;"	d	file:
_IF_PPP_H_	include/net/if_ppp.h	46;"	d
_IN6_LLX_FROM_EUI64	sys-solaris.c	192;"	d	file:
_NET_PPP_COMP_H	include/net/ppp-comp.h	39;"	d
_PATH_AUTHDOWN	pathnames.h	29;"	d
_PATH_AUTHUP	pathnames.h	28;"	d
_PATH_CHAPFILE	pathnames.h	22;"	d
_PATH_CONNERRS	pathnames.h	31;"	d
_PATH_DEVNULL	pathnames.h	14;"	d
_PATH_DEV_URANDOM	plugins/radius/pathnames.h	20;"	d
_PATH_ETC_ISSUE	plugins/radius/pathnames.h	21;"	d
_PATH_ETC_RADIUSCLIENT_CONF	plugins/radius/pathnames.h	25;"	d
_PATH_ETHOPT	plugins/rp-pppoe/plugin.c	58;"	d	file:
_PATH_IPDOWN	pathnames.h	26;"	d
_PATH_IPPREUP	pathnames.h	27;"	d
_PATH_IPUP	pathnames.h	25;"	d
_PATH_IPV6DOWN	pathnames.h	40;"	d
_PATH_IPV6UP	pathnames.h	39;"	d
_PATH_IPXDOWN	pathnames.h	45;"	d
_PATH_IPXUP	pathnames.h	44;"	d
_PATH_PEERFILES	pathnames.h	32;"	d
_PATH_PLUGIN	pathnames.h	60;"	d
_PATH_PLUGIN	pathnames.h	62;"	d
_PATH_PPPDB	pathnames.h	49;"	d
_PATH_PPPDB	pathnames.h	52;"	d
_PATH_PPPDB	pathnames.h	54;"	d
_PATH_PSEUDONYM	pathnames.h	36;"	d
_PATH_RESOLV	pathnames.h	33;"	d
_PATH_SRPFILE	pathnames.h	23;"	d
_PATH_SYSOPTIONS	pathnames.h	24;"	d
_PATH_TTYOPT	pathnames.h	30;"	d
_PATH_UPAPFILE	pathnames.h	21;"	d
_PATH_USEROPT	pathnames.h	35;"	d
_PATH_VARRUN	pathnames.h	12;"	d
_POSIX_SOURCE	plugins/rp-pppoe/pppoe.h	19;"	d
_PPPIO	include/net/pppio.h	38;"	d
_PPP_DEFS_H_	include/net/ppp_defs.h	39;"	d
_ROOT_PATH	pathnames.h	18;"	d
_ROOT_PATH	plugins/rp-pppoe/plugin.c	55;"	d	file:
_SLCOMPRESS_H_	include/net/slcompress.h	26;"	d
_UINT4_T	md5.h	50;"	d
_VJCOMPRESS_H_	include/net/vjcompress.h	26;"	d
__CHAPMS_INCLUDE__	chap_ms.h	108;"	d
__EUI64_H__	eui64.h	39;"	d
__MD5_INCLUDE__	md5.h	64;"	d
__OPENSSL_HASH__	openssl-hash.h	18;"	d
__P	include/net/ppp_defs.h	205;"	d
__P	include/net/ppp_defs.h	207;"	d
__P	md4.h	13;"	d
__P	md4.h	15;"	d
__PPPD_H__	pppd.h	50;"	d
__SESSION_H	session.h	32;"	d
__SHA1_INCLUDE_	sha1.h	29;"	d
__SHA1_INCLUDE_	sha1.h	6;"	d
__V	pppd.h	62;"	d
__V	pppd.h	65;"	d
__atmlib_fetch	plugins/pppoatm/misc.c	/^int __atmlib_fetch(const char **pos,...)$/;"	f
__t2q_get_rate	plugins/pppoatm/text2qos.c	/^int __t2q_get_rate(const char **text,int up)$/;"	f
_option	plugins/radius/options.h	/^typedef struct _option {$/;"	s
acName	plugins/rp-pppoe/plugin.c	/^static char *acName = NULL;$/;"	v	file:
acName	plugins/rp-pppoe/pppoe.h	/^    char *acName;		\/* Desired AC name, if any *\/$/;"	m	struct:PPPoEConnectionStruct
acNameOK	plugins/rp-pppoe/pppoe.h	/^    int acNameOK;$/;"	m	struct:PacketCriteria
accept_local	ipcp.h	/^    bool accept_local;		\/* accept peer's value for ouraddr *\/$/;"	m	struct:ipcp_options
accept_local	ipv6cp.h	/^    int accept_local;		\/* accept peer's value for iface id? *\/$/;"	m	struct:ipv6cp_options
accept_local	ipxcp.h	/^    bool accept_local;		\/* accept peer's value for ournode *\/$/;"	m	struct:ipxcp_options
accept_network	ipxcp.h	/^    bool accept_network;	\/* accept network number *\/$/;"	m	struct:ipxcp_options
accept_remote	ipcp.h	/^    bool accept_remote;		\/* accept peer's value for hisaddr *\/$/;"	m	struct:ipcp_options
accept_remote	ipxcp.h	/^    bool accept_remote;		\/* accept peer's value for hisnode *\/$/;"	m	struct:ipxcp_options
accounting_started	plugins/radius/radius.c	/^    int accounting_started;$/;"	m	struct:radius_state	file:
acct_interim_interval	plugins/radius/radius.c	/^    int acct_interim_interval;$/;"	m	struct:radius_state	file:
acctserver	plugins/radius/options.h	/^static SERVER acctserver = {0};$/;"	v
acctserver	plugins/radius/radius.c	/^    SERVER *acctserver;		\/* Accounting server to use *\/$/;"	m	struct:radius_state	file:
ackci	fsm.h	/^    int  (*ackci)		\/* ACK our Configuration Information *\/$/;"	m	struct:fsm_callbacks
active_filter	options.c	/^struct	bpf_program active_filter; \/* Filter program for link-active pkts *\/$/;"	v	typeref:struct:bpf_program
active_packet	demand.c	/^active_packet(p, len)$/;"	f	file:
active_pkt	pppd.h	/^    int  (*active_pkt) __P((u_char *pkt, int len));$/;"	m	struct:protent
add_avp	plugins/radius/radius.c	/^add_avp(char **argv)$/;"	f	file:
add_db_key	main.c	/^add_db_key(str)$/;"	f	file:
add_fd	sys-linux.c	/^void add_fd(int fd)$/;"	f
add_fd	sys-solaris.c	/^void add_fd(fd)$/;"	f
add_notifier	main.c	/^add_notifier(notif, func, arg)$/;"	f
add_options	options.c	/^add_options(opt)$/;"	f
add_script_env	main.c	/^add_script_env(pos, newstring)$/;"	f	file:
addci	fsm.h	/^    void (*addci) 		\/* Add our Configuration Information *\/$/;"	m	struct:fsm_callbacks
addr	pppd.h	/^	void	*addr;$/;"	m	struct:__anon3
addr2	pppd.h	/^	void	*addr2;$/;"	m	struct:__anon3
addresses	auth.c	/^static struct permitted_ip *addresses[NUM_PPP];$/;"	v	typeref:struct:permitted_ip	file:
all_rejected	ccp.c	/^static int all_rejected[NUM_PPP];	\/* we rejected all peer's options *\/$/;"	v	file:
allow_any_ip	auth.c	/^bool allow_any_ip = 0;		\/* Allow peer to use any IP address *\/$/;"	v
allowed_address_hook	auth.c	/^int (*allowed_address_hook) __P((u_int32_t addr)) = NULL;$/;"	v
ans	plugins/pppoatm/ans.c	/^static int ans(const char *text,int wanted,void *result,int res_len)$/;"	f	file:
ans_byaddr	plugins/pppoatm/ans.c	/^int ans_byaddr(char *buffer,int length,const struct sockaddr_atmsvc *addr,$/;"	f
ans_byname	plugins/pppoatm/ans.c	/^int ans_byname(const char *text,struct sockaddr_atmsvc *addr,int length,$/;"	f
any_compressions	sys-solaris.c	/^any_compressions()$/;"	f	file:
any_ip_addr_ok	plugins/radius/radius.c	/^    int any_ip_addr_ok;$/;"	m	struct:radius_state	file:
ao	ipxcp.c	74;"	d	file:
arg	main.c	/^    void	*arg;$/;"	m	struct:subprocess	file:
arg	pppd.h	/^    void	    *arg;$/;"	m	struct:notifier
ascii2unicode	chap_ms.c	/^ascii2unicode(char ascii[], int ascii_len, u_char unicode[])$/;"	f	file:
ask_for_local	ipcp.c	/^static bool ask_for_local;		\/* request our address from peer *\/$/;"	v	file:
asked_to_quit	main.c	/^int asked_to_quit;$/;"	v
asyncmap	lcp.h	/^    u_int32_t asyncmap;		\/* Value of async map *\/$/;"	m	struct:lcp_options
atm_tcpip_port_mapping	plugins/pppoatm/misc.c	/^void atm_tcpip_port_mapping(char *vs_id,uint8_t protocol,uint16_t port)$/;"	f
attribute	plugins/radius/radiusclient.h	/^	int                attribute;$/;"	m	struct:value_pair
attributes	plugins/radius/radiusclient.h	/^    DICT_ATTR *attributes;$/;"	m	struct:vendor_dict
attrname	plugins/radius/radiusclient.h	/^	char               attrname[NAME_LENGTH +1];$/;"	m	struct:dict_value
auth_check_options	auth.c	/^auth_check_options()$/;"	f
auth_done	auth.c	/^int auth_done[NUM_PPP];$/;"	v
auth_ip_addr	auth.c	/^auth_ip_addr(unit, addr)$/;"	f
auth_number	auth.c	/^auth_number()$/;"	f
auth_options	auth.c	/^option_t auth_options[] = {$/;"	v
auth_peer_fail	auth.c	/^auth_peer_fail(unit, protocol)$/;"	f
auth_peer_success	auth.c	/^auth_peer_success(unit, protocol, prot_flavor, name, namelen)$/;"	f
auth_pending	auth.c	/^static int auth_pending[NUM_PPP];$/;"	v	file:
auth_required	auth.c	/^bool auth_required = 0;		\/* Always require authentication from peer *\/$/;"	v
auth_reset	auth.c	/^auth_reset(unit)$/;"	f
auth_response	chap_ms.c	/^	unsigned char auth_response[MS_AUTH_RESPONSE_LENGTH];$/;"	m	struct:chapms2_response_cache_entry	file:
auth_script	auth.c	/^auth_script(script)$/;"	f	file:
auth_script_done	auth.c	/^auth_script_done(arg)$/;"	f	file:
auth_script_pid	auth.c	/^static pid_t auth_script_pid = 0;$/;"	v	file:
auth_script_state	auth.c	/^static enum script_state auth_script_state = s_down;$/;"	v	typeref:enum:script_state	file:
auth_state	auth.c	/^static enum script_state auth_state = s_down;$/;"	v	typeref:enum:script_state	file:
auth_up_notifier	auth.c	/^struct notifier *auth_up_notifier = NULL;$/;"	v	typeref:struct:notifier
auth_withpeer_fail	auth.c	/^auth_withpeer_fail(unit, protocol)$/;"	f
auth_withpeer_success	auth.c	/^auth_withpeer_success(unit, protocol, prot_flavor)$/;"	f
authserver	plugins/radius/options.h	/^static SERVER authserver = {0};$/;"	v
authserver	plugins/radius/radius.c	/^    SERVER *authserver;		\/* Authentication server to use *\/$/;"	m	struct:radius_state	file:
avp	plugins/radius/radius.c	/^    VALUE_PAIR *avp;	\/* Additional (user supplied) vp's to send to server *\/$/;"	m	struct:radius_state	file:
avpopt	plugins/radius/radius.c	/^static struct avpopt {$/;"	s	file:
avpopt	plugins/radius/radius.c	/^} *avpopt = NULL;$/;"	v	typeref:struct:avpopt	file:
b	include/net/ppp_defs.h	/^   struct ifreq b;$/;"	m	struct:ifpppstatsreq	typeref:struct:ifpppstatsreq::ifreq
b64	plugins/winbind.c	/^static const char *b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";$/;"	v	file:
b64dec	eap.c	/^b64dec(bs, inp, inlen, outp)$/;"	f	file:
b64enc	eap.c	/^b64enc(bs, inp, inlen, outp)$/;"	f	file:
b64flush	eap.c	/^b64flush(bs, outp)$/;"	f	file:
b64state	eap.c	/^struct b64state {$/;"	s	file:
bad_ip_adrs	auth.c	/^bad_ip_adrs(addr)$/;"	f
bad_signal	main.c	/^bad_signal(sig)$/;"	f	file:
base	include/pcap-int.h	/^	u_char *base;$/;"	m	struct:pcap_sf
base	pppd.h	/^    u_int32_t	base;		\/* match if (addr & mask) == base *\/$/;"	m	struct:permitted_ip
base64	eap.c	/^static char base64[] =$/;"	v	file:
base64_encode	plugins/winbind.c	/^char * base64_encode(const char *data)$/;"	f
baud_rate	tty.c	/^int baud_rate;			\/* Actual bits\/second for serial device *\/$/;"	v
baud_rate_of	sys-linux.c	/^static int baud_rate_of (int speed)$/;"	f	file:
baud_rate_of	sys-solaris.c	/^baud_rate_of(speed)$/;"	f	file:
blk	sha1.c	32;"	d	file:
blk0	sha1.c	31;"	d	file:
bool	pppd.h	/^typedef unsigned char	bool;$/;"	t
bp	include/pcap-int.h	/^	u_char *bp;$/;"	m	struct:pcap
bs_bits	eap.c	/^	u_int32_t bs_bits;$/;"	m	struct:b64state	file:
bs_offs	eap.c	/^	int bs_offs;$/;"	m	struct:b64state	file:
bsd_bits	ccp.h	/^    u_short bsd_bits;		\/* # bits\/code for BSD Compress *\/$/;"	m	struct:ccp_options
bsd_compress	ccp.h	/^    bool bsd_compress;		\/* do BSD Compress? *\/$/;"	m	struct:ccp_options
bsd_value	ccp.c	/^static char bsd_value[8];$/;"	v	file:
buf	md5.h	/^  UINT4 buf[4];                                    \/* scratch buffer *\/$/;"	m	struct:__anon7
buffer	include/pcap-int.h	/^	u_char *buffer;$/;"	m	struct:pcap
buffer	md4.h	/^	unsigned int buffer[4]; \/* Holds 4-word result of MD computation *\/$/;"	m	struct:__anon6
buffer	sha1.h	/^    unsigned char buffer[64];$/;"	m	struct:__anon8
buffer_info	utils.c	/^struct buffer_info {$/;"	s	file:
bufsize	include/pcap-int.h	/^	int bufsize;$/;"	m	struct:pcap
bundle_attach	sys-linux.c	/^int bundle_attach(int ifnum)$/;"	f
bundle_eof	main.c	/^bool bundle_eof;$/;"	v
bundle_name	options.c	/^char	*bundle_name = NULL;	\/* bundle name for multilink *\/$/;"	v
bundle_terminating	main.c	/^bool bundle_terminating;$/;"	v
bytes_in	pppd.h	/^    unsigned int	bytes_in;$/;"	m	struct:pppd_stats
bytes_out	pppd.h	/^    unsigned int	bytes_out;$/;"	m	struct:pppd_stats
c	include/net/ppp_defs.h	/^    struct compstat c;		\/* packet compression statistics *\/$/;"	m	struct:ppp_comp_stats	typeref:struct:ppp_comp_stats::compstat
c_arg	main.c	/^    void		*c_arg;		\/* argument to routine *\/$/;"	m	struct:callout	file:
c_func	main.c	/^    void		(*c_func) __P((void *)); \/* routine *\/$/;"	m	struct:callout	file:
c_next	main.c	/^    struct		callout *c_next;$/;"	m	struct:callout	typeref:struct:callout::callout	file:
c_time	main.c	/^    struct timeval	c_time;		\/* time at which to call routine *\/$/;"	m	struct:callout	typeref:struct:callout::timeval	file:
callback_script	tty.c	/^char *callback_script;		\/* script for doing callback *\/$/;"	v
callbacks	fsm.h	/^    struct fsm_callbacks *callbacks;	\/* Callback routines *\/$/;"	m	struct:fsm	typeref:struct:fsm::fsm_callbacks
callfile	options.c	/^callfile(argv)$/;"	f	file:
callout	main.c	/^static struct callout *callout = NULL;	\/* Callout list *\/$/;"	v	typeref:struct:callout	file:
callout	main.c	/^struct	callout {$/;"	s	file:
calltimeout	main.c	/^calltimeout()$/;"	f	file:
cbcp	cbcp.c	/^cbcp_state cbcp[NUM_PPP];	$/;"	v
cbcp_codenames	cbcp.c	/^char *cbcp_codenames[] = {$/;"	v
cbcp_init	cbcp.c	/^cbcp_init(iface)$/;"	f	file:
cbcp_input	cbcp.c	/^cbcp_input(unit, inpacket, pktlen)$/;"	f	file:
cbcp_lowerup	cbcp.c	/^cbcp_lowerup(iface)$/;"	f	file:
cbcp_open	cbcp.c	/^cbcp_open(unit)$/;"	f	file:
cbcp_option_list	cbcp.c	/^static option_t cbcp_option_list[] = {$/;"	v	file:
cbcp_optionnames	cbcp.c	/^char *cbcp_optionnames[] = {$/;"	v
cbcp_printpkt	cbcp.c	/^cbcp_printpkt(p, plen, printer, arg)$/;"	f	file:
cbcp_protent	cbcp.c	/^struct protent cbcp_protent = {$/;"	v	typeref:struct:protent
cbcp_protrej	cbcp.c	/^void cbcp_protrej(int iface)$/;"	f
cbcp_recvack	cbcp.c	/^cbcp_recvack(us, pckt, len)$/;"	f	file:
cbcp_recvreq	cbcp.c	/^cbcp_recvreq(us, pckt, pcktlen)$/;"	f	file:
cbcp_resp	cbcp.c	/^cbcp_resp(us)$/;"	f	file:
cbcp_send	cbcp.c	/^cbcp_send(us, code, buf, len)$/;"	f	file:
cbcp_state	cbcp.h	/^typedef struct cbcp_state {$/;"	s
cbcp_state	cbcp.h	/^} cbcp_state;$/;"	t	typeref:struct:cbcp_state
cbcp_up	cbcp.c	/^cbcp_up(us)$/;"	f	file:
cc	include/pcap-int.h	/^	int cc;$/;"	m	struct:pcap
cc_len	plugins/pppoatm/ans.c	/^static int cc_len(int p0,int p1)$/;"	f	file:
ccp_ackci	ccp.c	/^ccp_ackci(f, p, len)$/;"	f	file:
ccp_addci	ccp.c	/^ccp_addci(f, p, lenp)$/;"	f	file:
ccp_allowoptions	ccp.c	/^ccp_options ccp_allowoptions[NUM_PPP];	\/* what we'll agree to do *\/$/;"	v
ccp_callbacks	ccp.c	/^static fsm_callbacks ccp_callbacks = {$/;"	v	file:
ccp_cilen	ccp.c	/^ccp_cilen(f)$/;"	f	file:
ccp_close	ccp.c	/^ccp_close(unit, reason)$/;"	f	file:
ccp_codenames	ccp.c	/^static char *ccp_codenames[] = {$/;"	v	file:
ccp_datainput	ccp.c	/^ccp_datainput(unit, pkt, len)$/;"	f	file:
ccp_down	ccp.c	/^ccp_down(f)$/;"	f	file:
ccp_extcode	ccp.c	/^ccp_extcode(f, code, id, p, len)$/;"	f	file:
ccp_fatal_error	sys-linux.c	/^int ccp_fatal_error (int unit)$/;"	f
ccp_fatal_error	sys-solaris.c	/^ccp_fatal_error(unit)$/;"	f
ccp_flags_set	sys-linux.c	/^void ccp_flags_set (int unit, int isopen, int isup)$/;"	f
ccp_flags_set	sys-solaris.c	/^ccp_flags_set(unit, isopen, isup)$/;"	f
ccp_fsm	ccp.c	/^fsm ccp_fsm[NUM_PPP];$/;"	v
ccp_gotoptions	ccp.c	/^ccp_options ccp_gotoptions[NUM_PPP];	\/* what the peer agreed to do *\/$/;"	v
ccp_hisoptions	ccp.c	/^ccp_options ccp_hisoptions[NUM_PPP];	\/* what we agreed to do *\/$/;"	v
ccp_init	ccp.c	/^ccp_init(unit)$/;"	f	file:
ccp_input	ccp.c	/^ccp_input(unit, p, len)$/;"	f	file:
ccp_localstate	ccp.c	/^static int ccp_localstate[NUM_PPP];$/;"	v	file:
ccp_lowerdown	ccp.c	/^ccp_lowerdown(unit)$/;"	f	file:
ccp_lowerup	ccp.c	/^ccp_lowerup(unit)$/;"	f	file:
ccp_nakci	ccp.c	/^ccp_nakci(f, p, len, treat_as_reject)$/;"	f	file:
ccp_open	ccp.c	/^ccp_open(unit)$/;"	f	file:
ccp_option_list	ccp.c	/^static option_t ccp_option_list[] = {$/;"	v	file:
ccp_options	ccp.h	/^typedef struct ccp_options {$/;"	s
ccp_options	ccp.h	/^} ccp_options;$/;"	t	typeref:struct:ccp_options
ccp_printpkt	ccp.c	/^ccp_printpkt(p, plen, printer, arg)$/;"	f	file:
ccp_protent	ccp.c	/^struct protent ccp_protent = {$/;"	v	typeref:struct:protent
ccp_protrej	ccp.c	/^ccp_protrej(unit)$/;"	f	file:
ccp_rack_timeout	ccp.c	/^ccp_rack_timeout(arg)$/;"	f	file:
ccp_rejci	ccp.c	/^ccp_rejci(f, p, len)$/;"	f	file:
ccp_reqci	ccp.c	/^ccp_reqci(f, p, lenp, dont_nak)$/;"	f	file:
ccp_resetci	ccp.c	/^ccp_resetci(f)$/;"	f	file:
ccp_test	sys-linux.c	/^ccp_test(int unit, u_char *opt_ptr, int opt_len, int for_transmit)$/;"	f
ccp_test	sys-solaris.c	/^ccp_test(unit, opt_ptr, opt_len, for_transmit)$/;"	f
ccp_up	ccp.c	/^ccp_up(f)$/;"	f	file:
ccp_wantoptions	ccp.c	/^ccp_options ccp_wantoptions[NUM_PPP];	\/* what to request the peer to use *\/$/;"	v
cfg_bundle	sys-linux.c	/^void cfg_bundle(int mrru, int mtru, int rssn, int tssn)$/;"	f
cflag	ipcp.h	/^    bool cflag;$/;"	m	struct:ipcp_options
challenge	chap-new.c	/^	unsigned char challenge[CHAL_MAX_PKTLEN];$/;"	m	struct:chap_server_state	file:
challenge	chap_ms.c	/^	unsigned char challenge[16];$/;"	m	struct:chapms2_response_cache_entry	file:
challenge_pktlen	chap-new.c	/^	int challenge_pktlen;$/;"	m	struct:chap_server_state	file:
challenge_xmits	chap-new.c	/^	int challenge_xmits;$/;"	m	struct:chap_server_state	file:
channel	pppd.h	/^struct channel {$/;"	s
chap_auth_peer	chap-new.c	/^chap_auth_peer(int unit, char *our_name, int digest_code)$/;"	f
chap_auth_with_peer	chap-new.c	/^chap_auth_with_peer(int unit, char *our_name, int digest_code)$/;"	f
chap_check_hook	auth.c	/^int (*chap_check_hook) __P((void)) = NULL;$/;"	v
chap_client_state	chap-new.c	/^static struct chap_client_state {$/;"	s	file:
chap_code_names	chap-new.c	/^static char *chap_code_names[] = {$/;"	v	file:
chap_digest_type	chap-new.h	/^struct chap_digest_type {$/;"	s
chap_digests	chap-new.c	/^static struct chap_digest_type *chap_digests;$/;"	v	typeref:struct:chap_digest_type	file:
chap_generate_challenge	chap-new.c	/^chap_generate_challenge(struct chap_server_state *ss)$/;"	f	file:
chap_handle_response	chap-new.c	/^chap_handle_response(struct chap_server_state *ss, int id,$/;"	f	file:
chap_handle_status	chap-new.c	/^chap_handle_status(struct chap_client_state *cs, int code, int id,$/;"	f	file:
chap_init	chap-new.c	/^chap_init(int unit)$/;"	f	file:
chap_input	chap-new.c	/^chap_input(int unit, unsigned char *pkt, int pktlen)$/;"	f	file:
chap_lowerdown	chap-new.c	/^chap_lowerdown(int unit)$/;"	f	file:
chap_lowerup	chap-new.c	/^chap_lowerup(int unit)$/;"	f	file:
chap_max_transmits	chap-new.c	/^int chap_max_transmits = 10;$/;"	v
chap_md5_generate_challenge	chap-md5.c	/^chap_md5_generate_challenge(unsigned char *cp)$/;"	f	file:
chap_md5_init	chap-md5.c	/^chap_md5_init(void)$/;"	f
chap_md5_make_response	chap-md5.c	/^chap_md5_make_response(unsigned char *response, int id, char *our_name,$/;"	f	file:
chap_md5_verify_response	chap-md5.c	/^chap_md5_verify_response(int id, char *name,$/;"	f	file:
chap_mdtype	lcp.h	/^    u_char chap_mdtype;		\/* which MD types (hashing algorithm) *\/$/;"	m	struct:lcp_options
chap_mdtype_all	chap-new.c	/^int chap_mdtype_all = MDTYPE_ALL;$/;"	v
chap_option_list	chap-new.c	/^static option_t chap_option_list[] = {$/;"	v	file:
chap_passwd_hook	auth.c	/^int (*chap_passwd_hook) __P((char *user, char *passwd)) = NULL;$/;"	v
chap_print_pkt	chap-new.c	/^chap_print_pkt(unsigned char *p, int plen,$/;"	f	file:
chap_protent	chap-new.c	/^struct protent chap_protent = {$/;"	v	typeref:struct:protent
chap_protrej	chap-new.c	/^chap_protrej(int unit)$/;"	f	file:
chap_rechallenge_time	chap-new.c	/^int chap_rechallenge_time = 0;$/;"	v
chap_register_digest	chap-new.c	/^chap_register_digest(struct chap_digest_type *dp)$/;"	f
chap_respond	chap-new.c	/^chap_respond(struct chap_client_state *cs, int id,$/;"	f	file:
chap_server_state	chap-new.c	/^static struct chap_server_state {$/;"	s	file:
chap_timeout	chap-new.c	/^chap_timeout(void *arg)$/;"	f	file:
chap_timeout_time	chap-new.c	/^int chap_timeout_time = 3;$/;"	v
chap_verify_hook	chap-new.c	/^int (*chap_verify_hook)(char *name, char *ourname, int id,$/;"	v
chap_verify_response	chap-new.c	/^chap_verify_response(char *name, char *ourname, int id,$/;"	f	file:
chapms2_add_to_response_cache	chap_ms.c	/^chapms2_add_to_response_cache(int id, unsigned char *challenge,$/;"	f	file:
chapms2_check_success	chap_ms.c	/^chapms2_check_success(int id, unsigned char *msg, int len)$/;"	f	file:
chapms2_digest	chap_ms.c	/^static struct chap_digest_type chapms2_digest = {$/;"	v	typeref:struct:chap_digest_type	file:
chapms2_find_in_response_cache	chap_ms.c	/^chapms2_find_in_response_cache(int id, unsigned char *challenge,$/;"	f	file:
chapms2_generate_challenge	chap_ms.c	/^chapms2_generate_challenge(unsigned char *challenge)$/;"	f	file:
chapms2_make_response	chap_ms.c	/^chapms2_make_response(unsigned char *response, int id, char *our_name,$/;"	f	file:
chapms2_response_cache	chap_ms.c	/^    chapms2_response_cache[CHAPMS2_MAX_RESPONSE_CACHE_SIZE];$/;"	v	typeref:struct:chapms2_response_cache_entry	file:
chapms2_response_cache_entry	chap_ms.c	/^struct chapms2_response_cache_entry {$/;"	s	file:
chapms2_response_cache_next_index	chap_ms.c	/^static int chapms2_response_cache_next_index = 0;$/;"	v	file:
chapms2_response_cache_size	chap_ms.c	/^static int chapms2_response_cache_size = 0;$/;"	v	file:
chapms2_verify_response	chap_ms.c	/^chapms2_verify_response(int id, char *name,$/;"	f	file:
chapms_digest	chap_ms.c	/^static struct chap_digest_type chapms_digest = {$/;"	v	typeref:struct:chap_digest_type	file:
chapms_generate_challenge	chap_ms.c	/^chapms_generate_challenge(unsigned char *challenge)$/;"	f	file:
chapms_handle_failure	chap_ms.c	/^chapms_handle_failure(unsigned char *inp, int len)$/;"	f	file:
chapms_init	chap_ms.c	/^chapms_init(void)$/;"	f
chapms_make_response	chap_ms.c	/^chapms_make_response(unsigned char *response, int id, char *our_name,$/;"	f	file:
chapms_option_list	chap_ms.c	/^static option_t chapms_option_list[] = {$/;"	v	file:
chapms_verify_response	chap_ms.c	/^chapms_verify_response(int id, char *name,$/;"	f	file:
charshunt	tty.c	/^charshunt(ifd, ofd, record_file)$/;"	f	file:
charshunt_done	tty.c	/^charshunt_done(arg)$/;"	f	file:
charshunt_pid	tty.c	/^int charshunt_pid;		\/* Process ID for charshunt *\/$/;"	v
check_access	auth.c	/^check_access(f, filename)$/;"	f	file:
check_idle	auth.c	/^check_idle(arg)$/;"	f	file:
check_maxoctets	auth.c	/^check_maxoctets(arg)$/;"	f	file:
check_options	options.c	/^check_options()$/;"	f
check_options	pppd.h	/^	void (*check_options) __P((void));$/;"	m	struct:channel
check_options	pppd.h	/^    void (*check_options) __P((void));$/;"	m	struct:protent
check_passwd	auth.c	/^check_passwd(unit, auser, userlen, apasswd, passwdlen, msg)$/;"	f
check_success	chap-new.h	/^	int (*check_success)(int id, unsigned char *pkt, int len);$/;"	m	struct:chap_digest_type
child_wait	options.c	/^int	child_wait = 5;		\/* # seconds to wait for children at exit *\/$/;"	v
children	main.c	/^static struct subprocess *children;$/;"	v	typeref:struct:subprocess	file:
childwait_done	main.c	/^int childwait_done;		\/* have timed out waiting for children *\/$/;"	v
childwait_end	main.c	/^childwait_end(arg)$/;"	f	file:
chindex	sys-linux.c	/^static int chindex;		\/* channel index (new style driver) *\/$/;"	v	file:
chld	main.c	/^chld(sig)$/;"	f	file:
choose_ip	plugins/radius/radius.c	/^    int choose_ip;$/;"	m	struct:radius_state	file:
cif6addr	sys-linux.c	/^int cif6addr (int unit, eui64_t our_eui64, eui64_t his_eui64)$/;"	f
cif6addr	sys-solaris.c	/^cif6addr(u, o, h)$/;"	f
cifaddr	sys-linux.c	/^int cifaddr (int unit, u_int32_t our_adr, u_int32_t his_adr)$/;"	f
cifaddr	sys-solaris.c	/^cifaddr(u, o, h)$/;"	f
cifdefaultroute	sys-linux.c	/^int cifdefaultroute (int unit, u_int32_t ouraddr, u_int32_t gateway)$/;"	f
cifdefaultroute	sys-solaris.c	/^cifdefaultroute(u, l, g)$/;"	f
cifproxyarp	sys-linux.c	/^int cifproxyarp (int unit, u_int32_t his_adr)$/;"	f
cifproxyarp	sys-solaris.c	/^cifproxyarp(unit, hisaddr)$/;"	f
cifroute	sys-solaris.c	/^cifroute(u, our, his)$/;"	f
cilen	fsm.h	/^    int  (*cilen)		\/* Length of our Configuration Information *\/$/;"	m	struct:fsm_callbacks
cipxfaddr	sys-linux.c	/^int cipxfaddr (int unit)$/;"	f
class	plugins/radius/radius.c	/^    char class[MAXCLASSLEN];$/;"	m	struct:radius_state	file:
class_len	plugins/radius/radius.c	/^    int class_len;$/;"	m	struct:radius_state	file:
clean_check	sys-linux.c	/^void clean_check(void)$/;"	f
clean_check	sys-solaris.c	/^clean_check()$/;"	f
cleanup	main.c	/^cleanup()$/;"	f	file:
cleanup	plugins/radius/radattr.c	/^cleanup(void *opaque, int arg)$/;"	f	file:
cleanup	pppd.h	/^	void (*cleanup) __P((void));$/;"	m	struct:channel
cleanup_db	main.c	/^cleanup_db()$/;"	f	file:
cleanup_tty	tty.c	/^void cleanup_tty()$/;"	f
client	chap-new.c	/^} client;$/;"	v	typeref:struct:chap_client_state	file:
client_port	plugins/radius/radius.c	/^    int client_port;$/;"	m	struct:radius_state	file:
close	pppd.h	/^	void (*close) __P((void));$/;"	m	struct:channel
close	pppd.h	/^    void (*close) __P((int unit, char *reason));$/;"	m	struct:protent
close_route_table	sys-linux.c	/^static void close_route_table (void)$/;"	f	file:
code	chap-new.h	/^	int code;$/;"	m	struct:chap_digest_type
code	plugins/radius/radiusclient.h	/^	u_char          code;		\/* RADIUS packet code *\/$/;"	m	struct:send_data
code	plugins/radius/radiusclient.h	/^	u_char          code;$/;"	m	struct:pw_auth_hdr
code	plugins/rp-pppoe/pppoe.h	/^    unsigned int code:8;	\/* PPPoE code *\/$/;"	m	struct:PPPoEPacketStruct
comp_alloc	include/net/ppp-comp.h	/^	void	*(*comp_alloc) __P((u_char *options, int opt_len));$/;"	m	struct:compressor
comp_bytes	include/net/ppp_defs.h	/^    unsigned int comp_bytes;	\/* compressed bytes *\/$/;"	m	struct:compstat
comp_free	include/net/ppp-comp.h	/^	void	(*comp_free) __P((void *state));$/;"	m	struct:compressor
comp_init	include/net/ppp-comp.h	/^	int	(*comp_init) __P((void *state, u_char *options, int opt_len,$/;"	m	struct:compressor
comp_packets	include/net/ppp_defs.h	/^    unsigned int comp_packets;	\/* compressed packets *\/$/;"	m	struct:compstat
comp_reset	include/net/ppp-comp.h	/^	void	(*comp_reset) __P((void *state));$/;"	m	struct:compressor
comp_stat	include/net/ppp-comp.h	/^	void	(*comp_stat) __P((void *state, struct compstat *stats));$/;"	m	struct:compressor
compare_node	ipxcp.c	/^compare_node (src, dst)$/;"	f	file:
complete_read	utils.c	/^complete_read(int fd, void *buf, size_t count)$/;"	f
compress	include/net/ppp-comp.h	/^	int	(*compress) __P((void *state, PACKETPTR *mret,$/;"	m	struct:compressor
compress_proto	include/net/ppp-comp.h	/^	int	compress_proto;	\/* CCP compression protocol number *\/$/;"	m	struct:compressor
compressor	include/net/ppp-comp.h	/^struct compressor {$/;"	s
compstat	include/net/ppp_defs.h	/^struct compstat {$/;"	s
config_file	plugins/radius/radius.c	/^    char config_file[MAXPATHLEN];$/;"	m	struct:radius_state	file:
config_file	plugins/radius/radius.c	/^static char *config_file = NULL;$/;"	v	file:
config_options	plugins/radius/options.h	/^static OPTION config_options[] = {$/;"	v
conn	plugins/rp-pppoe/plugin.c	/^static PPPoEConnection *conn = NULL;$/;"	v	file:
conn	plugins/rp-pppoe/pppoe.h	/^    PPPoEConnection *conn;$/;"	m	struct:PacketCriteria
conn_running	main.c	/^static int conn_running;	\/* we have a [dis]connector running *\/$/;"	v	file:
connect	pppd.h	/^	int  (*connect) __P((void));$/;"	m	struct:channel
connect_delay	options.c	/^int	connect_delay = 1000;	\/* wait this many ms after connect script *\/$/;"	v
connect_pppoatm	plugins/pppoatm/pppoatm.c	/^static int connect_pppoatm(void)$/;"	f	file:
connect_script	tty.c	/^char	*connect_script = NULL;	\/* Script to establish physical link *\/$/;"	v
connect_time_expired	auth.c	/^connect_time_expired(arg)$/;"	f	file:
connect_tty	tty.c	/^int connect_tty()$/;"	f
const	pppd.h	66;"	d
continue_networks	auth.c	/^continue_networks(unit)$/;"	f
conversation	session.c	/^static int conversation (int num_msg,$/;"	f	file:
cookie	plugins/rp-pppoe/pppoe.h	/^    PPPoETag cookie;		\/* We have to send this if we get it *\/$/;"	m	struct:PPPoEConnectionStruct
copy_node	ipxcp.c	/^copy_node (src, dst)$/;"	f	file:
count	md4.h	/^	unsigned char count[8]; \/* Number of bits processed so far *\/$/;"	m	struct:__anon6
count	sha1.h	/^    u_int32_t count[2];$/;"	m	struct:__anon8
create_linkpidfile	main.c	/^create_linkpidfile(pid)$/;"	f
create_pidfile	main.c	/^create_pidfile(pid)$/;"	f	file:
create_resolv	ipcp.c	/^create_resolv(peerdns1, peerdns2)$/;"	f	file:
crtscts	tty.c	/^int	crtscts = 0;		\/* Use hardware flow control *\/$/;"	v
cryptpap	auth.c	/^bool cryptpap = 0;		\/* Passwords in pap-secrets are encrypted *\/$/;"	v
cs_filler	include/net/slcompress.h	/^	u_char cs_filler;$/;"	m	struct:cstate
cs_filler	include/net/vjcompress.h	/^    u_char cs_filler;$/;"	m	struct:cstate
cs_hdr	include/net/slcompress.h	113;"	d
cs_hdr	include/net/vjcompress.h	113;"	d
cs_hlen	include/net/slcompress.h	/^	u_short cs_hlen;	\/* size of hdr (receive only) *\/$/;"	m	struct:cstate
cs_hlen	include/net/vjcompress.h	/^    u_short cs_hlen;		\/* size of hdr (receive only) *\/$/;"	m	struct:cstate
cs_id	include/net/slcompress.h	/^	u_char cs_id;		\/* connection # associated with this state *\/$/;"	m	struct:cstate
cs_id	include/net/vjcompress.h	/^    u_char cs_id;		\/* connection # associated with this state *\/$/;"	m	struct:cstate
cs_ip	include/net/slcompress.h	112;"	d
cs_ip	include/net/vjcompress.h	112;"	d
cs_next	include/net/slcompress.h	/^	struct cstate *cs_next;	\/* next most recently used cstate (xmit only) *\/$/;"	m	struct:cstate	typeref:struct:cstate::cstate
cs_next	include/net/vjcompress.h	/^    struct cstate *cs_next;	\/* next most recently used state (xmit only) *\/$/;"	m	struct:cstate	typeref:struct:cstate::cstate
cstate	include/net/slcompress.h	/^struct cstate {$/;"	s
cstate	include/net/vjcompress.h	/^struct cstate {$/;"	s
csu_hdr	include/net/slcompress.h	/^		char csu_hdr[MAX_HDR];$/;"	m	union:cstate::__anon2
csu_hdr	include/net/vjcompress.h	/^	char csu_hdr[MAX_HDR];$/;"	m	union:cstate::__anon1
csu_ip	include/net/slcompress.h	/^		struct ip csu_ip;	\/* ip\/tcp hdr from most recent packet *\/$/;"	m	union:cstate::__anon2	typeref:struct:cstate::__anon2::ip
csu_ip	include/net/vjcompress.h	/^	struct ip csu_ip;	\/* ip\/tcp hdr from most recent packet *\/$/;"	m	union:cstate::__anon1	typeref:struct:cstate::__anon1::ip
curopt	options.c	/^static option_t *curopt;	\/* pointer to option being processed *\/$/;"	v	file:
current_option	options.c	/^char *current_option;		\/* the name of the option being parsed *\/$/;"	v
d	include/net/ppp_defs.h	/^    struct compstat d;		\/* packet decompression statistics *\/$/;"	m	struct:ppp_comp_stats	typeref:struct:ppp_comp_stats::compstat
data	demand.c	/^    unsigned char data[1];$/;"	m	struct:packet	file:
data	plugins/radius/radiusclient.h	/^	u_char          data[2];$/;"	m	struct:pw_auth_hdr
data_name	pppd.h	/^    char *data_name;		\/* Text name of corresponding data protocol *\/$/;"	m	struct:protent
datainput	pppd.h	/^    void (*datainput) __P((int unit, u_char *pkt, int len));$/;"	m	struct:protent
db_key	main.c	/^char db_key[32];$/;"	v
dbglog	utils.c	/^dbglog __V((char *fmt, ...))$/;"	f
debug	options.c	/^int	debug = 0;		\/* Debug flag *\/$/;"	v
debug	plugins/rp-pppoe/pppoe.h	/^    int debug;			\/* Set to log packets sent and received *\/$/;"	m	struct:PPPoEConnectionStruct
debugFile	plugins/rp-pppoe/pppoe.h	/^    FILE *debugFile;		\/* Debug file for dumping packets *\/$/;"	m	struct:PPPoEConnectionStruct
decode_version	sys-linux.c	/^static void decode_version (char *buf, int *version,$/;"	f	file:
decomp_alloc	include/net/ppp-comp.h	/^	void	*(*decomp_alloc) __P((u_char *options, int opt_len));$/;"	m	struct:compressor
decomp_free	include/net/ppp-comp.h	/^	void	(*decomp_free) __P((void *state));$/;"	m	struct:compressor
decomp_init	include/net/ppp-comp.h	/^	int	(*decomp_init) __P((void *state, u_char *options, int opt_len,$/;"	m	struct:compressor
decomp_reset	include/net/ppp-comp.h	/^	void	(*decomp_reset) __P((void *state));$/;"	m	struct:compressor
decomp_stat	include/net/ppp-comp.h	/^	void	(*decomp_stat) __P((void *state, struct compstat *stats));$/;"	m	struct:compressor
decompress	include/net/ppp-comp.h	/^	int	(*decompress) __P((void *state, PACKETPTR mp,$/;"	m	struct:compressor
default_auth	auth.c	/^static bool default_auth;$/;"	v	file:
default_device	options.c	/^int	default_device = 1;	\/* Using \/dev\/tty or equivalent *\/$/;"	v
default_route	ipcp.h	/^    bool default_route;		\/* Assign default route through interface? *\/$/;"	m	struct:ipcp_options
default_route_gateway	sys-solaris.c	/^static u_int32_t default_route_gateway;	\/* Gateway for default route added *\/$/;"	v	file:
default_route_set	ipcp.c	/^static int default_route_set[NUM_PPP];	\/* Have set up a default route *\/$/;"	v	file:
default_timeout	plugins/radius/options.h	/^int default_timeout = 60;$/;"	v
default_tries	plugins/radius/options.h	/^int default_tries = 4;$/;"	v
defaultroute_exists	sys-linux.c	/^static int defaultroute_exists (struct rtentry *rt)$/;"	f	file:
deflate	ccp.h	/^    bool deflate;		\/* do Deflate? *\/$/;"	m	struct:ccp_options
deflate_correct	ccp.h	/^    bool deflate_correct;	\/* use correct code for deflate? *\/$/;"	m	struct:ccp_options
deflate_draft	ccp.h	/^    bool deflate_draft;		\/* use draft RFC code for deflate? *\/$/;"	m	struct:ccp_options
deflate_size	ccp.h	/^    u_short deflate_size;	\/* lg(window size) for Deflate *\/$/;"	m	struct:ccp_options
deflate_value	ccp.c	/^static char deflate_value[8];$/;"	v	file:
delete_db_key	main.c	/^delete_db_key(str)$/;"	f	file:
demand	options.c	/^bool	demand = 0;		\/* do dial-on-demand *\/$/;"	v
demand_block	demand.c	/^demand_block()$/;"	f
demand_conf	demand.c	/^demand_conf()$/;"	f
demand_conf	pppd.h	/^    int  (*demand_conf) __P((int unit));$/;"	m	struct:protent
demand_discard	demand.c	/^demand_discard()$/;"	f
demand_rexmit	demand.c	/^demand_rexmit(proto)$/;"	f
demand_unblock	demand.c	/^demand_unblock()$/;"	f
description	pppd.h	/^	char	*description;$/;"	m	struct:__anon3
destroy_bundle	sys-linux.c	/^void destroy_bundle(void)$/;"	f
detach	main.c	/^detach()$/;"	f
detached	main.c	/^int detached;			\/* have detached from terminal *\/$/;"	v
devfd	main.c	/^int devfd = -1;			\/* fd of underlying device *\/$/;"	v
device	include/pcap-int.h	/^	char *device;$/;"	m	struct:pcap_md
device_got_set	plugins/pppoatm/pppoatm.c	/^static int device_got_set = 0;$/;"	v	file:
device_script	main.c	/^device_script(program, in, out, dont_wait)$/;"	f
devnam	options.c	/^char	devnam[MAXPATHLEN];	\/* Device name *\/$/;"	v
devnam_fixed	options.c	/^bool devnam_fixed;		\/* can no longer change device name *\/$/;"	v
devstat	tty.c	/^struct stat devstat;		\/* result of stat() on devnam *\/$/;"	v	typeref:struct:stat
dict_attr	plugins/radius/radiusclient.h	/^typedef struct dict_attr$/;"	s
dict_value	plugins/radius/radiusclient.h	/^typedef struct dict_value$/;"	s
dictionary_attributes	plugins/radius/dict.c	/^static DICT_ATTR *dictionary_attributes = NULL;$/;"	v	file:
dictionary_values	plugins/radius/dict.c	/^static DICT_VALUE *dictionary_values = NULL;$/;"	v	file:
die	main.c	/^die(status)$/;"	f
die	plugins/rp-pppoe/pppoe-discovery.c	/^void die(int status)$/;"	f
digest	chap-new.c	/^	struct chap_digest_type *digest;$/;"	m	struct:chap_client_state	typeref:struct:chap_client_state::chap_digest_type	file:
digest	chap-new.c	/^	struct chap_digest_type *digest;$/;"	m	struct:chap_server_state	typeref:struct:chap_server_state::chap_digest_type	file:
digest	md5.h	/^  unsigned char digest[16];     \/* actual digest after MD5Final call *\/$/;"	m	struct:__anon7
disable_defaultip	ipcp.c	/^bool	disable_defaultip = 0;	\/* Don't use hostname for default IP adrs *\/$/;"	v
disconnect	pppd.h	/^	void (*disconnect) __P((void));$/;"	m	struct:channel
disconnect_pppoatm	plugins/pppoatm/pppoatm.c	/^static void disconnect_pppoatm(void)$/;"	f	file:
disconnect_script	tty.c	/^char	*disconnect_script = NULL; \/* Script to disestablish physical link *\/$/;"	v
disconnect_tty	tty.c	/^void disconnect_tty()$/;"	f
discovery	plugins/rp-pppoe/discovery.c	/^discovery(PPPoEConnection *conn)$/;"	f
discovery	plugins/rp-pppoe/pppoe-discovery.c	/^discovery(PPPoEConnection *conn)$/;"	f
discoverySocket	plugins/rp-pppoe/pppoe.h	/^    int discoverySocket;	\/* Raw socket for discovery frames *\/$/;"	m	struct:PPPoEConnectionStruct
discoveryState	plugins/rp-pppoe/pppoe.h	/^    int discoveryState;		\/* Where we are in discovery *\/$/;"	m	struct:PPPoEConnectionStruct
discoveryTimeout	plugins/rp-pppoe/pppoe.h	/^    int discoveryTimeout;       \/* Timeout for discovery packets *\/$/;"	m	struct:PPPoEConnectionStruct
disestablish_ppp	pppd.h	/^	void (*disestablish_ppp) __P((int));$/;"	m	struct:channel
dlpi_attach	sys-solaris.c	/^dlpi_attach(fd, ppa)$/;"	f	file:
dlpi_get_reply	sys-solaris.c	/^dlpi_get_reply(fd, reply, expected_prim, maxlen)$/;"	f	file:
dlpi_info_req	sys-solaris.c	/^dlpi_info_req(fd)$/;"	f	file:
dnsaddr	ipcp.h	/^    u_int32_t dnsaddr[2];	\/* Primary and secondary MS DNS entries *\/$/;"	m	struct:ipcp_options
do_callback	main.c	/^int do_callback;		\/* != 0 if we should do callback next *\/$/;"	v
do_lock_exclusive	plugins/radius/lock.c	/^int do_lock_exclusive(int fd)$/;"	f
do_try_nsap	plugins/pppoatm/text2atm.c	/^static int do_try_nsap(const char *text,struct sockaddr_atmsvc *addr,int flags)$/;"	f	file:
do_unlock	plugins/radius/lock.c	/^int do_unlock(int fd)$/;"	f
doing_callback	main.c	/^int doing_callback;		\/* != 0 if we are doing callback *\/$/;"	v
doing_multilink	pppd.h	603;"	d
domain	options.c	/^char	*domain;		\/* domain name set by domain option *\/$/;"	v
done	main.c	/^    void	(*done) __P((void *));$/;"	m	struct:subprocess	file:
done	md4.h	/^	unsigned int done;      \/* Nonzero means MD computation finished *\/$/;"	m	struct:__anon6
done_chap_once	plugins/radius/radius.c	/^    int done_chap_once;$/;"	m	struct:radius_state	file:
down	fsm.h	/^    void (*down)		\/* Called when fsm leaves OPENED state *\/$/;"	m	struct:fsm_callbacks
drand48	magic.c	/^drand48()$/;"	f
driver_is_old	sys-linux.c	/^static int driver_is_old       = 0;$/;"	v	file:
driver_modification	sys-linux.c	/^static int driver_modification = 0;$/;"	v	file:
driver_patch	sys-linux.c	/^static int driver_patch        = 0;$/;"	v	file:
driver_version	sys-linux.c	/^static int driver_version      = 0;$/;"	v	file:
dryrun	options.c	/^bool	dryrun;			\/* print out option values and exit *\/$/;"	v
dumpHex	plugins/rp-pppoe/debug.c	/^dumpHex(FILE *fp, unsigned char const *buf, int len)$/;"	f
dumpPacket	plugins/rp-pppoe/debug.c	/^dumpPacket(FILE *fp, PPPoEPacket *packet, char const *dir)$/;"	f
dump_options	options.c	/^bool	dump_options;		\/* print out option values *\/$/;"	v
dump_packet	utils.c	/^dump_packet(const char *tag, unsigned char *p, int len)$/;"	f
dynaddr_set	sys-linux.c	/^static int	dynaddr_set;		\/* 1 if ip_dynaddr set *\/$/;"	v	file:
e16	eui64.h	/^    u_int16_t e16[4];$/;"	m	union:__anon5
e32	eui64.h	/^    u_int32_t e32[2];$/;"	m	union:__anon5
e32	eui64.h	/^    uint32_t	e32[2];		\/* lower 64-bit IPv6 address *\/$/;"	m	union:__anon4
e8	eui64.h	/^    u_int8_t e8[8];$/;"	m	union:__anon5
e8	eui64.h	/^    uint8_t	e8[8];		\/* lower 64-bit IPv6 address *\/$/;"	m	union:__anon4
ea_id	eap.h	/^	u_char ea_id;		\/* Current id *\/$/;"	m	struct:eap_auth
ea_keyflags	eap.h	/^	u_int32_t ea_keyflags;	\/* SRP shared key usage flags *\/$/;"	m	struct:eap_auth
ea_maxrequests	eap.h	/^	int ea_maxrequests;	\/* Max Requests allowed *\/$/;"	m	struct:eap_auth
ea_name	eap.h	/^	char *ea_name;		\/* Our name *\/$/;"	m	struct:eap_auth
ea_namelen	eap.h	/^	u_short ea_namelen;	\/* Length of our name *\/$/;"	m	struct:eap_auth
ea_peer	eap.h	/^	char *ea_peer;		\/* Peer's name *\/$/;"	m	struct:eap_auth
ea_peerlen	eap.h	/^	u_short ea_peerlen;	\/* Length of peer's name *\/$/;"	m	struct:eap_auth
ea_requests	eap.h	/^	u_char ea_requests;	\/* Number of Requests sent\/received *\/$/;"	m	struct:eap_auth
ea_responses	eap.h	/^	u_char ea_responses;	\/* Number of Responses *\/$/;"	m	struct:eap_auth
ea_session	eap.h	/^	void *ea_session;	\/* Authentication library linkage *\/$/;"	m	struct:eap_auth
ea_skey	eap.h	/^	u_char *ea_skey;	\/* Shared encryption key *\/$/;"	m	struct:eap_auth
ea_state	eap.h	/^	enum eap_state_code ea_state;$/;"	m	struct:eap_auth	typeref:enum:eap_auth::eap_state_code
ea_timeout	eap.h	/^	int ea_timeout;		\/* Time to wait (for retransmit\/fail) *\/$/;"	m	struct:eap_auth
ea_type	eap.h	/^	u_char ea_type;		\/* One of EAPT_* *\/$/;"	m	struct:eap_auth
eapBadAuth	eap.h	/^	eapBadAuth	\/* Failed authentication *\/$/;"	e	enum:eap_state_code
eapClosed	eap.h	/^	eapClosed,	\/* Authentication not in use *\/$/;"	e	enum:eap_state_code
eapIdentify	eap.h	/^	eapIdentify,	\/* EAP Identify sent *\/$/;"	e	enum:eap_state_code
eapInitial	eap.h	/^	eapInitial = 0,	\/* No EAP authentication yet requested *\/$/;"	e	enum:eap_state_code
eapListen	eap.h	/^	eapListen,	\/* Client ready (and timer running) *\/$/;"	e	enum:eap_state_code
eapMD5Chall	eap.h	/^	eapMD5Chall,	\/* Sent MD5-Challenge *\/$/;"	e	enum:eap_state_code
eapOpen	eap.h	/^	eapOpen,	\/* Completed authentication *\/$/;"	e	enum:eap_state_code
eapPending	eap.h	/^	eapPending,	\/* Waiting for LCP (no timer) *\/$/;"	e	enum:eap_state_code
eapSRP1	eap.h	/^	eapSRP1,	\/* Sent EAP SRP-SHA1 Subtype 1 *\/$/;"	e	enum:eap_state_code
eapSRP2	eap.h	/^	eapSRP2,	\/* Sent EAP SRP-SHA1 Subtype 2 *\/$/;"	e	enum:eap_state_code
eapSRP3	eap.h	/^	eapSRP3,	\/* Sent EAP SRP-SHA1 Subtype 3 *\/$/;"	e	enum:eap_state_code
eapSRP4	eap.h	/^	eapSRP4,	\/* Sent EAP SRP-SHA1 Subtype 4 *\/$/;"	e	enum:eap_state_code
eap_auth	eap.h	/^struct eap_auth {$/;"	s
eap_authpeer	eap.c	/^eap_authpeer(unit, localname)$/;"	f
eap_authwithpeer	eap.c	/^eap_authwithpeer(unit, localname)$/;"	f
eap_chap_response	eap.c	/^eap_chap_response(esp, id, hash, name, namelen)$/;"	f	file:
eap_client_active	eap.h	100;"	d
eap_client_timeout	eap.c	/^eap_client_timeout(arg)$/;"	f	file:
eap_codenames	eap.c	/^static char *eap_codenames[] = {$/;"	v	file:
eap_failure	eap.c	/^eap_failure(esp, inp, id, len)$/;"	f	file:
eap_figure_next_state	eap.c	/^eap_figure_next_state(esp, status)$/;"	f	file:
eap_init	eap.c	/^eap_init(unit)$/;"	f	file:
eap_input	eap.c	/^eap_input(unit, inp, inlen)$/;"	f	file:
eap_lowerdown	eap.c	/^eap_lowerdown(unit)$/;"	f	file:
eap_lowerup	eap.c	/^eap_lowerup(unit)$/;"	f	file:
eap_option_list	eap.c	/^static option_t eap_option_list[] = {$/;"	v	file:
eap_printpkt	eap.c	/^eap_printpkt(inp, inlen, printer, arg)$/;"	f	file:
eap_protent	eap.c	/^struct protent eap_protent = {$/;"	v	typeref:struct:protent
eap_protrej	eap.c	/^eap_protrej(unit)$/;"	f	file:
eap_rechallenge	eap.c	/^eap_rechallenge(arg)$/;"	f	file:
eap_request	eap.c	/^eap_request(esp, inp, id, len)$/;"	f	file:
eap_response	eap.c	/^eap_response(esp, inp, id, len)$/;"	f	file:
eap_send_failure	eap.c	/^eap_send_failure(esp)$/;"	f	file:
eap_send_nak	eap.c	/^eap_send_nak(esp, id, type)$/;"	f	file:
eap_send_request	eap.c	/^eap_send_request(esp)$/;"	f	file:
eap_send_response	eap.c	/^eap_send_response(esp, id, typenum, str, lenstr)$/;"	f	file:
eap_send_success	eap.c	/^eap_send_success(esp)$/;"	f	file:
eap_server_active	eap.h	101;"	d
eap_server_timeout	eap.c	/^eap_server_timeout(arg)$/;"	f	file:
eap_srp_response	eap.c	/^eap_srp_response(esp, id, subtypenum, str, lenstr)$/;"	f	file:
eap_srpval_response	eap.c	/^eap_srpval_response(esp, id, flags, str)$/;"	f	file:
eap_state	eap.h	/^typedef struct eap_state {$/;"	s
eap_state	eap.h	/^} eap_state;$/;"	t	typeref:struct:eap_state
eap_state_code	eap.h	/^enum eap_state_code {$/;"	g
eap_state_name	eap.c	/^eap_state_name(esc)$/;"	f	file:
eap_states	eap.c	/^eap_state eap_states[NUM_PPP];		\/* EAP state; one for each unit *\/$/;"	v
eap_success	eap.c	/^eap_success(esp, inp, id, len)$/;"	f	file:
eap_typenames	eap.c	/^static char *eap_typenames[] = {$/;"	v	file:
ecp_allowoptions	ecp.c	/^ecp_options ecp_allowoptions[NUM_PPP];	\/* what we'll agree to do *\/$/;"	v
ecp_callbacks	ecp.c	/^static fsm_callbacks ecp_callbacks = {$/;"	v	file:
ecp_fsm	ecp.c	/^fsm ecp_fsm[NUM_PPP];$/;"	v
ecp_gotoptions	ecp.c	/^ecp_options ecp_gotoptions[NUM_PPP];	\/* what the peer agreed to do *\/$/;"	v
ecp_hisoptions	ecp.c	/^ecp_options ecp_hisoptions[NUM_PPP];	\/* what we agreed to do *\/$/;"	v
ecp_init	ecp.c	/^ecp_init(unit)$/;"	f	file:
ecp_option_list	ecp.c	/^static option_t ecp_option_list[] = {$/;"	v	file:
ecp_options	ecp.h	/^typedef struct ecp_options {$/;"	s
ecp_options	ecp.h	/^} ecp_options;$/;"	t	typeref:struct:ecp_options
ecp_printpkt	ecp.c	/^ecp_printpkt(p, plen, printer, arg)$/;"	f	file:
ecp_protent	ecp.c	/^struct protent ecp_protent = {$/;"	v	typeref:struct:protent
ecp_wantoptions	ecp.c	/^ecp_options ecp_wantoptions[NUM_PPP];	\/* what to request the peer to use *\/$/;"	v
enabled_flag	pppd.h	/^    bool enabled_flag;		\/* 0 iff protocol is disabled *\/$/;"	m	struct:protent
encode_e164	plugins/pppoatm/ans.c	/^static int encode_e164(char *buf,const char *addr)$/;"	f	file:
encode_nsap	plugins/pppoatm/ans.c	/^static int encode_nsap(char *buf,const unsigned char *addr)$/;"	f	file:
encode_nsap_new	plugins/pppoatm/ans.c	/^static int encode_nsap_new(char *buf,const unsigned char *addr)$/;"	f	file:
enctype	ecp.h	/^    unsigned enctype;		\/* Encryption type *\/$/;"	m	struct:ecp_options
end_pr_log	utils.c	/^end_pr_log()$/;"	f
endpoint	lcp.h	/^    struct epdisc endpoint;	\/* endpoint discriminator *\/$/;"	m	struct:lcp_options	typeref:struct:lcp_options::epdisc
env	plugins/radius/radiusclient.h	/^	char **env;$/;"	m	struct:env
env	plugins/radius/radiusclient.h	/^typedef struct env$/;"	s
epdisc	pppd.h	/^struct epdisc {$/;"	s
errbuf	include/pcap-int.h	/^	char errbuf[PCAP_ERRBUF_SIZE];$/;"	m	struct:pcap
error	plugins/rp-pppoe/pppoe.h	/^    int error;			\/* Error packet received *\/$/;"	m	struct:PPPoEConnectionStruct
error	utils.c	/^error __V((char *fmt, ...))$/;"	f
error_count	main.c	/^int error_count;$/;"	v
es_challen	eap.h	/^	int es_challen;			\/* Length of challenge string *\/$/;"	m	struct:eap_state
es_challenge	eap.h	/^	u_char es_challenge[MAX_CHALLENGE_LENGTH];$/;"	m	struct:eap_state
es_client	eap.h	/^	struct eap_auth es_client;	\/* Client (authenticatee) data *\/$/;"	m	struct:eap_state	typeref:struct:eap_state::eap_auth
es_lwrechallenge	eap.h	/^	int es_lwrechallenge;		\/* SRP lightweight rechallenge inter *\/$/;"	m	struct:eap_state
es_rechallenge	eap.h	/^	int es_rechallenge;		\/* EAP rechallenge interval *\/$/;"	m	struct:eap_state
es_savedtime	eap.h	/^	int es_savedtime;		\/* Saved timeout *\/$/;"	m	struct:eap_state
es_server	eap.h	/^	struct eap_auth es_server;	\/* Server (authenticator) data *\/$/;"	m	struct:eap_state	typeref:struct:eap_state::eap_auth
es_unit	eap.h	/^	int es_unit;			\/* Interface unit number *\/$/;"	m	struct:eap_state
es_usedpseudo	eap.h	/^	int es_usedpseudo;		\/* Set if we already sent PN *\/$/;"	m	struct:eap_state
es_usepseudo	eap.h	/^	bool es_usepseudo;		\/* Use SRP Pseudonym if offered one *\/$/;"	m	struct:eap_state
escape_flag	demand.c	/^int escape_flag;$/;"	v
establish_ppp	pppd.h	/^	int  (*establish_ppp) __P((int));$/;"	m	struct:channel
ethHdr	plugins/rp-pppoe/pppoe.h	/^    struct ethhdr ethHdr;	\/* Ethernet header *\/$/;"	m	struct:PPPoEPacketStruct	typeref:struct:PPPoEPacketStruct::ethhdr
etherType	plugins/rp-pppoe/if.c	/^etherType(PPPoEPacket *packet)$/;"	f
etherType	plugins/rp-pppoe/pppoe-discovery.c	/^etherType(PPPoEPacket *packet)$/;"	f
ether_to_eui64	sys-linux.c	/^ether_to_eui64(eui64_t *p_eui64)$/;"	f
ether_to_eui64	sys-solaris.c	/^ether_to_eui64(eui64_t *p_eui64)$/;"	f
eui64_copy	eui64.h	81;"	d
eui64_equals	eui64.h	77;"	d
eui64_get	eui64.h	95;"	d
eui64_iszero	eui64.h	76;"	d
eui64_magic	eui64.h	83;"	d
eui64_magic_ne	eui64.h	91;"	d
eui64_magic_nz	eui64.h	88;"	d
eui64_ntoa	eui64.c	/^eui64_ntoa(e)$/;"	f
eui64_put	eui64.h	100;"	d
eui64_set32	eui64.h	105;"	d
eui64_setlo32	eui64.h	109;"	d
eui64_t	eui64.h	/^} eui64_t;$/;"	t	typeref:union:__anon4
eui64_t	eui64.h	/^} eui64_t;$/;"	t	typeref:union:__anon5
eui64_zero	eui64.h	79;"	d
existingSession	plugins/rp-pppoe/plugin.c	/^static char *existingSession = NULL;$/;"	v	file:
exitnotify	main.c	/^struct notifier *exitnotify = NULL;$/;"	v	typeref:struct:notifier
explicit_passwd	auth.c	/^bool explicit_passwd = 0;	\/* Set if "password" option supplied *\/$/;"	v
explicit_remote	auth.c	/^bool explicit_remote = 0;	\/* User specified explicit remote name *\/$/;"	v
explicit_user	auth.c	/^bool explicit_user = 0;		\/* Set if "user" option supplied *\/$/;"	v
ext_accm	include/net/ppp_defs.h	/^typedef u_int32_t	ext_accm[8];$/;"	t
extcode	fsm.h	/^    int  (*extcode)		\/* Called when unknown code received *\/$/;"	m	struct:fsm_callbacks
extra_options	auth.c	/^static struct wordlist *extra_options;$/;"	v	typeref:struct:wordlist	file:
extra_options	options.c	/^static struct option_list *extra_options = NULL;$/;"	v	typeref:struct:option_list	file:
f	md4.c	74;"	d	file:
fatal	utils.c	/^fatal __V((char *fmt, ...))$/;"	f
fatalSys	plugins/rp-pppoe/pppoe-discovery.c	/^void fatalSys(char const *str)$/;"	f
fcode	include/pcap-int.h	/^	struct bpf_program fcode;$/;"	m	struct:pcap	typeref:struct:pcap::bpf_program
fcs	demand.c	/^int fcs;$/;"	v
fcstab	demand.c	/^static u_short fcstab[256] = {$/;"	v	file:
fd	include/pcap-int.h	/^	int fd;$/;"	m	struct:pcap
fd_devnull	main.c	/^int fd_devnull;			\/* fd for \/dev\/null *\/$/;"	v
fd_loop	main.c	/^static int fd_loop;		\/* fd for getting demand-dial packets *\/$/;"	v	file:
fd_ppp	main.c	/^int fd_ppp = -1;		\/* fd for talking PPP *\/$/;"	v
fdmuxid	sys-solaris.c	/^static int	fdmuxid = -1;$/;"	v	file:
fetch	plugins/pppoatm/text2qos.c	19;"	d	file:
ff	md4.c	78;"	d	file:
find_match	plugins/radius/config.c	/^static int find_match (UINT4 *ip_addr, char *hostname)$/;"	f	file:
find_option	options.c	/^find_option(name)$/;"	f	file:
find_option	plugins/radius/config.c	/^static OPTION *find_option(char *optname, unsigned int type)$/;"	f	file:
finish_tty	tty.c	/^finish_tty()$/;"	f	file:
finished	fsm.h	/^    void (*finished)		\/* Called when we don't want the lower layer *\/$/;"	m	struct:fsm_callbacks
first_ether_name	sys-solaris.c	/^static char	first_ether_name[IFNAMSIZ];	\/* Before Solaris 8 *\/$/;"	v	file:
first_ether_name	sys-solaris.c	/^static char	first_ether_name[LIFNAMSIZ];	\/* Solaris 8 and above *\/$/;"	v	file:
flags	chap-new.c	/^	int flags;$/;"	m	struct:chap_client_state	file:
flags	chap-new.c	/^	int flags;$/;"	m	struct:chap_server_state	file:
flags	fsm.h	/^    int flags;			\/* Contains option bits *\/$/;"	m	struct:fsm
flags	include/net/slcompress.h	/^	u_short flags;$/;"	m	struct:slcompress
flags	include/net/vjcompress.h	/^    u_short flags;$/;"	m	struct:vjcompress
flags	pppd.h	/^	unsigned int flags;$/;"	m	struct:__anon3
flush_flag	demand.c	/^int flush_flag;$/;"	v
forget_child	main.c	/^forget_child(pid, status)$/;"	f	file:
fork_notifier	main.c	/^struct notifier *fork_notifier = NULL;$/;"	v	typeref:struct:notifier
format_packet	utils.c	/^format_packet(p, len, printer, arg)$/;"	f	file:
frame	demand.c	/^char *frame;$/;"	v
framelen	demand.c	/^int framelen;$/;"	v
framemax	demand.c	/^int framemax;$/;"	v
free_wordlist	auth.c	/^free_wordlist(wp)$/;"	f	file:
fs1	md4.c	56;"	d	file:
fs2	md4.c	57;"	d	file:
fs3	md4.c	58;"	d	file:
fs4	md4.c	59;"	d	file:
fsm	fsm.h	/^typedef struct fsm {$/;"	s
fsm	fsm.h	/^} fsm;$/;"	t	typeref:struct:fsm
fsm_callbacks	fsm.h	/^typedef struct fsm_callbacks {$/;"	s
fsm_callbacks	fsm.h	/^} fsm_callbacks;$/;"	t	typeref:struct:fsm_callbacks
fsm_close	fsm.c	/^fsm_close(f, reason)$/;"	f
fsm_init	fsm.c	/^fsm_init(f)$/;"	f
fsm_input	fsm.c	/^fsm_input(f, inpacket, l)$/;"	f
fsm_lowerdown	fsm.c	/^fsm_lowerdown(f)$/;"	f
fsm_lowerup	fsm.c	/^fsm_lowerup(f)$/;"	f
fsm_open	fsm.c	/^fsm_open(f)$/;"	f
fsm_protreject	fsm.c	/^fsm_protreject(f)$/;"	f
fsm_rcoderej	fsm.c	/^fsm_rcoderej(f, inp, len)$/;"	f	file:
fsm_rconfack	fsm.c	/^fsm_rconfack(f, id, inp, len)$/;"	f	file:
fsm_rconfnakrej	fsm.c	/^fsm_rconfnakrej(f, code, id, inp, len)$/;"	f	file:
fsm_rconfreq	fsm.c	/^fsm_rconfreq(f, id, inp, len)$/;"	f	file:
fsm_rtermack	fsm.c	/^fsm_rtermack(f)$/;"	f	file:
fsm_rtermreq	fsm.c	/^fsm_rtermreq(f, id, p, len)$/;"	f	file:
fsm_sconfreq	fsm.c	/^fsm_sconfreq(f, retransmit)$/;"	f	file:
fsm_sdata	fsm.c	/^fsm_sdata(f, code, id, data, datalen)$/;"	f
fsm_timeout	fsm.c	/^fsm_timeout(arg)$/;"	f	file:
func	pppd.h	/^    notify_func	    func;$/;"	m	struct:notifier
g	md4.c	75;"	d	file:
general_options	options.c	/^option_t general_options[] = {$/;"	v
generate_challenge	chap-new.h	/^	void (*generate_challenge)(unsigned char *challenge);$/;"	m	struct:chap_digest_type
generic_disestablish_ppp	sys-linux.c	/^void generic_disestablish_ppp(int dev_fd)$/;"	f
generic_establish_ppp	sys-linux.c	/^int generic_establish_ppp (int fd)$/;"	f
get_client_port	plugins/radius/radius.c	/^get_client_port(char *ifname)$/;"	f	file:
get_ether_addr	sys-linux.c	/^static int get_ether_addr (u_int32_t ipaddr,$/;"	f	file:
get_ether_addr	sys-solaris.c	/^get_ether_addr(ipaddr, hwaddr)$/;"	f	file:
get_first_ethernet	sys-linux.c	/^get_first_ethernet()$/;"	f
get_first_ethernet	sys-solaris.c	/^get_first_ethernet()$/;"	f
get_host_seed	sys-linux.c	/^get_host_seed()$/;"	f
get_host_seed	sys-solaris.c	/^get_host_seed()$/;"	f
get_hw_addr	sys-solaris.c	/^get_hw_addr(name, ina, hwaddr)$/;"	f	file:
get_hw_addr_dlpi	sys-solaris.c	/^get_hw_addr_dlpi(name, hwaddr)$/;"	f	file:
get_idle_time	sys-linux.c	/^get_idle_time(u, ip)$/;"	f
get_idle_time	sys-solaris.c	/^get_idle_time(u, ip)$/;"	f
get_if_hwaddr	sys-linux.c	/^get_if_hwaddr(u_char *addr, char *name)$/;"	f
get_if_hwaddr	sys-solaris.c	/^get_if_hwaddr(u_char *addr, char *if_name)$/;"	f
get_input	main.c	/^get_input()$/;"	f	file:
get_ip6nh	ipv6cp.c	1519;"	d	file:
get_iphl	ipcp.c	2284;"	d	file:
get_ipoff	ipcp.c	2285;"	d	file:
get_ipproto	ipcp.c	2286;"	d	file:
get_loop_output	sys-linux.c	/^get_loop_output(void)$/;"	f
get_loop_output	sys-solaris.c	/^get_loop_output()$/;"	f
get_pap_passwd	auth.c	/^get_pap_passwd(passwd)$/;"	f	file:
get_ppp_stats	sys-linux.c	/^get_ppp_stats(u, stats)$/;"	f
get_ppp_stats	sys-solaris.c	/^get_ppp_stats(u, stats)$/;"	f
get_pty	sys-linux.c	/^get_pty(master_fdp, slave_fdp, slave_name, uid)$/;"	f
get_pty	sys-solaris.c	/^get_pty(master_fdp, slave_fdp, slave_name, uid)$/;"	f
get_secret	auth.c	/^get_secret(unit, client, server, secret, secret_len, am_server)$/;"	f
get_srp_secret	auth.c	/^get_srp_secret(unit, client, server, secret, am_server)$/;"	f
get_tcpflags	ipcp.c	2288;"	d	file:
get_tcpflags	ipv6cp.c	1521;"	d	file:
get_tcpoff	ipcp.c	2287;"	d	file:
get_tcpoff	ipv6cp.c	1520;"	d	file:
getpassphrase	srp-entry.c	40;"	d	file:
getword	options.c	/^getword(f, word, newlinep, filename)$/;"	f
gg	md4.c	79;"	d	file:
go	ipxcp.c	75;"	d	file:
got_sigchld	main.c	/^static int got_sigchld;		\/* set if we have received a SIGCHLD *\/$/;"	v	file:
got_sighup	main.c	/^int got_sighup;$/;"	v
got_sigterm	main.c	/^int got_sigterm;$/;"	v
got_sigusr2	main.c	/^int got_sigusr2;$/;"	v
groups	main.c	/^GIDSET_TYPE groups[NGROUPS_MAX];\/* groups the user is in *\/$/;"	v
gs1	md4.c	60;"	d	file:
gs2	md4.c	61;"	d	file:
gs3	md4.c	62;"	d	file:
gs4	md4.c	63;"	d	file:
h	md4.c	76;"	d	file:
handle_events	main.c	/^handle_events()$/;"	f	file:
handle_failure	chap-new.h	/^	void (*handle_failure)(unsigned char *pkt, int len);$/;"	m	struct:chap_digest_type
has_proxy_arp	sys-linux.c	/^static int has_proxy_arp       = 0;$/;"	v	file:
have_chap_secret	auth.c	/^have_chap_secret(client, server, need_ip, lacks_ipp)$/;"	f	file:
have_default_route	sys-linux.c	/^static int	have_default_route;	\/* Gateway for default route added *\/$/;"	v	file:
have_pap_secret	auth.c	/^have_pap_secret(lacks_ipp)$/;"	f	file:
have_route_to	sys-linux.c	/^int have_route_to(u_int32_t addr)$/;"	f
have_route_to	sys-solaris.c	/^have_route_to(addr)$/;"	f
have_srp_secret	auth.c	/^have_srp_secret(client, server, need_ip, lacks_ipp)$/;"	f	file:
hh	md4.c	80;"	d	file:
hide_password	upap.c	/^static bool hide_password = 1;$/;"	v	file:
his_network	ipxcp.h	/^    u_int32_t his_network;	\/* base network number *\/$/;"	m	struct:ipxcp_options
his_node	ipxcp.h	/^    u_char his_node[6];		\/* peer's node number *\/$/;"	m	struct:ipxcp_options
hisaddr	ipcp.h	/^    u_int32_t ouraddr, hisaddr;	\/* Addresses in NETWORK BYTE ORDER *\/$/;"	m	struct:ipcp_options
hisid	ipv6cp.h	/^    eui64_t ourid, hisid;	\/* Interface identifiers *\/$/;"	m	struct:ipv6cp_options
ho	ipxcp.c	76;"	d	file:
holdoff	options.c	/^int	holdoff = 30;		\/* # seconds to pause before reconnecting *\/$/;"	v
holdoff_end	main.c	/^holdoff_end(arg)$/;"	f	file:
holdoff_hook	main.c	/^int (*holdoff_hook) __P((void)) = NULL;$/;"	v
holdoff_specified	options.c	/^bool	holdoff_specified;	\/* true if a holdoff value has been given *\/$/;"	v
hostname	main.c	/^char hostname[MAXNAMELEN];	\/* Our hostname *\/$/;"	v
hs1	md4.c	64;"	d	file:
hs2	md4.c	65;"	d	file:
hs3	md4.c	66;"	d	file:
hs4	md4.c	67;"	d	file:
hungup	main.c	/^int hungup;			\/* terminal has been hung up *\/$/;"	v
hup	main.c	/^hup(sig)$/;"	f	file:
i	md5.h	/^  UINT4 i[2];                   \/* number of _bits_ handled mod 2^64 *\/$/;"	m	struct:__anon7
id	chap-new.c	/^	int id;$/;"	m	struct:chap_server_state	file:
id	chap_ms.c	/^	int id;$/;"	m	struct:chapms2_response_cache_entry	file:
id	fsm.h	/^    u_char id;			\/* Current id *\/$/;"	m	struct:fsm
id	plugins/radius/clientid.c	/^	UINT4 id;$/;"	m	struct:map2id_s	file:
id	plugins/radius/radiusclient.h	/^	u_char          id;$/;"	m	struct:pw_auth_hdr
idle_time_hook	auth.c	/^int (*idle_time_hook) __P((struct ppp_idle *)) = NULL;$/;"	v
idle_time_limit	options.c	/^int	idle_time_limit = 0;	\/* Disconnect if idle for this many seconds *\/$/;"	v
if6_is_up	sys-linux.c	/^static int	if6_is_up;	\/* Interface has been marked up for IPv6, to help differentiate *\/$/;"	v	file:
if6_is_up	sys-solaris.c	/^static int	if6_is_up = 0;	\/* IPv6 interface has been marked up *\/$/;"	v	file:
ifName	plugins/rp-pppoe/pppoe.h	/^    char *ifName;		\/* Interface name *\/$/;"	m	struct:PPPoEConnectionStruct
if_is_up	sys-linux.c	/^static int	if_is_up;	\/* Interface has been marked up *\/$/;"	v	file:
if_is_up	sys-solaris.c	/^static int	if_is_up;	\/* Interface has been marked up *\/$/;"	v	file:
ifname	main.c	/^char ifname[32];		\/* Interface name *\/$/;"	v
ifpppcstatsreq	include/net/if_ppp.h	/^struct ifpppcstatsreq {$/;"	s
ifpppstatsreq	include/net/if_ppp.h	/^struct ifpppstatsreq {$/;"	s
ifpppstatsreq	include/net/ppp_defs.h	/^struct ifpppstatsreq {$/;"	s
ifr6_addr	sys-linux.c	/^    struct in6_addr ifr6_addr;$/;"	m	struct:in6_ifreq	typeref:struct:in6_ifreq::in6_addr	file:
ifr6_ifindex	sys-linux.c	/^    unsigned int ifr6_ifindex;$/;"	m	struct:in6_ifreq	file:
ifr6_prefixlen	sys-linux.c	/^    __u32 ifr6_prefixlen;$/;"	m	struct:in6_ifreq	file:
ifr__name	include/net/ppp_defs.h	135;"	d
ifr_mtu	include/net/if_ppp.h	149;"	d
ifr_name	include/net/if_ppp.h	/^    char ifr_name[IFNAMSIZ];$/;"	m	struct:ifpppcstatsreq
ifr_name	include/net/if_ppp.h	/^    char ifr_name[IFNAMSIZ];$/;"	m	struct:ifpppstatsreq
ifunit	main.c	/^int ifunit;			\/* Interface unit number *\/$/;"	v
in	md5.h	/^  unsigned char in[64];                              \/* input buffer *\/$/;"	m	struct:__anon7
in6_ifreq	sys-linux.c	/^struct in6_ifreq {$/;"	s	file:
in_fds	sys-linux.c	/^static fd_set in_fds;		\/* set of fds that wait_input waits for *\/$/;"	v	file:
inbuf	sys-linux.c	/^static unsigned char inbuf[512]; \/* buffer for chars read from loopback *\/$/;"	v	file:
inc_bytes	include/net/ppp_defs.h	/^    unsigned int inc_bytes;	\/* incompressible bytes *\/$/;"	m	struct:compstat
inc_node	ipxcp.c	/^inc_node (node)$/;"	f	file:
inc_packets	include/net/ppp_defs.h	/^    unsigned int inc_packets;	\/* incompressible packets *\/$/;"	m	struct:compstat
incomp	include/net/ppp-comp.h	/^	void	(*incomp) __P((void *state, PACKETPTR mp));$/;"	m	struct:compressor
info	utils.c	/^info __V((char *fmt, ...))$/;"	f
init	pppd.h	/^    void (*init) __P((int unit));$/;"	m	struct:protent
init_pr_log	utils.c	/^init_pr_log(prefix, level)$/;"	f
initfdflags	sys-linux.c	/^static int initfdflags = -1;	\/* Initial file descriptor flags for fd *\/$/;"	v	file:
initialized	plugins/radius/radius.c	/^    int initialized;$/;"	m	struct:radius_state	file:
initializer	tty.c	/^char	*initializer = NULL;	\/* Script to initialize physical link *\/$/;"	v
inittermios	sys-linux.c	/^static struct termios inittermios;	\/* Initial TTY termios *\/$/;"	v	typeref:struct:termios	file:
inittermios	sys-solaris.c	/^static struct termios inittermios;$/;"	v	typeref:struct:termios	file:
inittermiox	sys-solaris.c	/^static struct termiox inittermiox;$/;"	v	typeref:struct:termiox	file:
inpacket_buf	main.c	/^u_char inpacket_buf[PPP_MRU+PPP_HDRLEN]; \/* buffer for incoming packet *\/$/;"	v
input	pppd.h	/^    void (*input) __P((int unit, u_char *pkt, int len));$/;"	m	struct:protent
inspeed	tty.c	/^int	inspeed = 0;		\/* Input\/Output speed requested *\/$/;"	v
int_option	options.c	/^int_option(str, valp)$/;"	f
ip6fd	sys-solaris.c	/^static int	ip6fd;		\/* IP file descriptor *\/$/;"	v	file:
ip6muxid	sys-solaris.c	/^static int	ip6muxid = -1;	\/* Multiplexer file descriptor *\/$/;"	v	file:
ip_active_pkt	ipcp.c	/^ip_active_pkt(pkt, len)$/;"	f	file:
ip_addr	plugins/radius/radius.c	/^    u_int32_t ip_addr;$/;"	m	struct:radius_state	file:
ip_addr_check	auth.c	/^ip_addr_check(addr, addrs)$/;"	f	file:
ip_check_options	ipcp.c	/^ip_check_options()$/;"	f	file:
ip_choose_hook	ipcp.c	/^void (*ip_choose_hook) __P((u_int32_t *)) = NULL;$/;"	v
ip_demand_conf	ipcp.c	/^ip_demand_conf(u)$/;"	f	file:
ip_down_hook	ipcp.c	/^void (*ip_down_hook) __P((void)) = NULL;$/;"	v
ip_down_notifier	ipcp.c	/^struct notifier *ip_down_notifier = NULL;$/;"	v	typeref:struct:notifier
ip_ntoa	ipcp.c	/^ip_ntoa(ipaddr)$/;"	f
ip_up_hook	ipcp.c	/^void (*ip_up_hook) __P((void)) = NULL;$/;"	v
ip_up_notifier	ipcp.c	/^struct notifier *ip_up_notifier = NULL;$/;"	v	typeref:struct:notifier
ipcp_ackci	ipcp.c	/^ipcp_ackci(f, p, len)$/;"	f	file:
ipcp_addci	ipcp.c	/^ipcp_addci(f, ucp, lenp)$/;"	f	file:
ipcp_allowoptions	ipcp.c	/^ipcp_options ipcp_allowoptions[NUM_PPP]; \/* Options we allow peer to request *\/$/;"	v
ipcp_callbacks	ipcp.c	/^static fsm_callbacks ipcp_callbacks = { \/* IPCP callback routines *\/$/;"	v	file:
ipcp_cilen	ipcp.c	/^ipcp_cilen(f)$/;"	f	file:
ipcp_clear_addrs	ipcp.c	/^ipcp_clear_addrs(unit, ouraddr, hisaddr)$/;"	f	file:
ipcp_close	ipcp.c	/^ipcp_close(unit, reason)$/;"	f	file:
ipcp_codenames	ipcp.c	/^static char *ipcp_codenames[] = {$/;"	v	file:
ipcp_down	ipcp.c	/^ipcp_down(f)$/;"	f	file:
ipcp_finished	ipcp.c	/^ipcp_finished(f)$/;"	f	file:
ipcp_fsm	ipcp.c	/^fsm ipcp_fsm[NUM_PPP];		\/* IPCP fsm structure *\/$/;"	v
ipcp_gotoptions	ipcp.c	/^ipcp_options ipcp_gotoptions[NUM_PPP];	\/* Options that peer ack'd *\/$/;"	v
ipcp_hisoptions	ipcp.c	/^ipcp_options ipcp_hisoptions[NUM_PPP];	\/* Options that we ack'd *\/$/;"	v
ipcp_init	ipcp.c	/^ipcp_init(unit)$/;"	f	file:
ipcp_input	ipcp.c	/^ipcp_input(unit, p, len)$/;"	f	file:
ipcp_is_open	ipcp.c	/^static int ipcp_is_open;		\/* haven't called np_finished() *\/$/;"	v	file:
ipcp_is_up	ipcp.c	/^static int ipcp_is_up;			\/* have called np_up() *\/$/;"	v	file:
ipcp_lowerdown	ipcp.c	/^ipcp_lowerdown(unit)$/;"	f	file:
ipcp_lowerup	ipcp.c	/^ipcp_lowerup(unit)$/;"	f	file:
ipcp_nakci	ipcp.c	/^ipcp_nakci(f, p, len, treat_as_reject)$/;"	f	file:
ipcp_open	ipcp.c	/^ipcp_open(unit)$/;"	f	file:
ipcp_option_list	ipcp.c	/^static option_t ipcp_option_list[] = {$/;"	v	file:
ipcp_options	ipcp.h	/^typedef struct ipcp_options {$/;"	s
ipcp_options	ipcp.h	/^} ipcp_options;$/;"	t	typeref:struct:ipcp_options
ipcp_printpkt	ipcp.c	/^ipcp_printpkt(p, plen, printer, arg)$/;"	f	file:
ipcp_protent	ipcp.c	/^struct protent ipcp_protent = {$/;"	v	typeref:struct:protent
ipcp_protrej	ipcp.c	/^ipcp_protrej(unit)$/;"	f	file:
ipcp_rejci	ipcp.c	/^ipcp_rejci(f, p, len)$/;"	f	file:
ipcp_reqci	ipcp.c	/^ipcp_reqci(f, inp, len, reject_if_disagree)$/;"	f	file:
ipcp_resetci	ipcp.c	/^ipcp_resetci(f)$/;"	f	file:
ipcp_script	ipcp.c	/^ipcp_script(script, wait)$/;"	f	file:
ipcp_script_done	ipcp.c	/^ipcp_script_done(arg)$/;"	f	file:
ipcp_script_pid	ipcp.c	/^static pid_t ipcp_script_pid;$/;"	v	file:
ipcp_script_state	ipcp.c	/^} ipcp_script_state;$/;"	v	typeref:enum:script_state	file:
ipcp_up	ipcp.c	/^ipcp_up(f)$/;"	f	file:
ipcp_wantoptions	ipcp.c	/^ipcp_options ipcp_wantoptions[NUM_PPP];	\/* Options that we want to request *\/$/;"	v
ipfd	sys-solaris.c	/^static int	ipfd;$/;"	v	file:
ipmuxid	sys-solaris.c	/^static int	ipmuxid = -1;$/;"	v	file:
ipparam	options.c	/^char	*ipparam = NULL;	\/* Extra parameter for ip up\/down scripts *\/$/;"	v
ipv6_active_pkt	ipv6cp.c	/^ipv6_active_pkt(pkt, len)$/;"	f	file:
ipv6_check_options	ipv6cp.c	/^ipv6_check_options()$/;"	f	file:
ipv6_demand_conf	ipv6cp.c	/^ipv6_demand_conf(u)$/;"	f	file:
ipv6_down_hook	ipv6cp.c	/^void (*ipv6_down_hook) __P((void)) = NULL;$/;"	v
ipv6_down_notifier	ipv6cp.c	/^struct notifier *ipv6_down_notifier = NULL;$/;"	v	typeref:struct:notifier
ipv6_up_hook	ipv6cp.c	/^void (*ipv6_up_hook) __P((void)) = NULL;$/;"	v
ipv6_up_notifier	ipv6cp.c	/^struct notifier *ipv6_up_notifier = NULL;$/;"	v	typeref:struct:notifier
ipv6cp_ackci	ipv6cp.c	/^ipv6cp_ackci(f, p, len)$/;"	f	file:
ipv6cp_addci	ipv6cp.c	/^ipv6cp_addci(f, ucp, lenp)$/;"	f	file:
ipv6cp_allowoptions	ipv6cp.c	/^ipv6cp_options ipv6cp_allowoptions[NUM_PPP];	\/* Options we allow peer to request *\/$/;"	v
ipv6cp_callbacks	ipv6cp.c	/^static fsm_callbacks ipv6cp_callbacks = { \/* IPV6CP callback routines *\/$/;"	v	file:
ipv6cp_cilen	ipv6cp.c	/^ipv6cp_cilen(f)$/;"	f	file:
ipv6cp_clear_addrs	ipv6cp.c	/^ipv6cp_clear_addrs(unit, ourid, hisid)$/;"	f	file:
ipv6cp_close	ipv6cp.c	/^ipv6cp_close(unit, reason)$/;"	f	file:
ipv6cp_codenames	ipv6cp.c	/^static char *ipv6cp_codenames[] = {$/;"	v	file:
ipv6cp_down	ipv6cp.c	/^ipv6cp_down(f)$/;"	f	file:
ipv6cp_finished	ipv6cp.c	/^ipv6cp_finished(f)$/;"	f	file:
ipv6cp_fsm	ipv6cp.c	/^fsm ipv6cp_fsm[NUM_PPP];		\/* IPV6CP fsm structure *\/$/;"	v
ipv6cp_gotoptions	ipv6cp.c	/^ipv6cp_options ipv6cp_gotoptions[NUM_PPP];	\/* Options that peer ack'd *\/$/;"	v
ipv6cp_hisoptions	ipv6cp.c	/^ipv6cp_options ipv6cp_hisoptions[NUM_PPP];	\/* Options that we ack'd *\/$/;"	v
ipv6cp_init	ipv6cp.c	/^ipv6cp_init(unit)$/;"	f	file:
ipv6cp_input	ipv6cp.c	/^ipv6cp_input(unit, p, len)$/;"	f	file:
ipv6cp_is_up	ipv6cp.c	/^static int ipv6cp_is_up;$/;"	v	file:
ipv6cp_lowerdown	ipv6cp.c	/^ipv6cp_lowerdown(unit)$/;"	f	file:
ipv6cp_lowerup	ipv6cp.c	/^ipv6cp_lowerup(unit)$/;"	f	file:
ipv6cp_nakci	ipv6cp.c	/^ipv6cp_nakci(f, p, len, treat_as_reject)$/;"	f	file:
ipv6cp_open	ipv6cp.c	/^ipv6cp_open(unit)$/;"	f	file:
ipv6cp_option_list	ipv6cp.c	/^static option_t ipv6cp_option_list[] = {$/;"	v	file:
ipv6cp_options	ipv6cp.h	/^typedef struct ipv6cp_options {$/;"	s
ipv6cp_options	ipv6cp.h	/^} ipv6cp_options;$/;"	t	typeref:struct:ipv6cp_options
ipv6cp_printpkt	ipv6cp.c	/^ipv6cp_printpkt(p, plen, printer, arg)$/;"	f	file:
ipv6cp_protent	ipv6cp.c	/^struct protent ipv6cp_protent = {$/;"	v	typeref:struct:protent
ipv6cp_protrej	ipv6cp.c	/^ipv6cp_protrej(unit)$/;"	f	file:
ipv6cp_rejci	ipv6cp.c	/^ipv6cp_rejci(f, p, len)$/;"	f	file:
ipv6cp_reqci	ipv6cp.c	/^ipv6cp_reqci(f, inp, len, reject_if_disagree)$/;"	f	file:
ipv6cp_resetci	ipv6cp.c	/^ipv6cp_resetci(f)$/;"	f	file:
ipv6cp_script	ipv6cp.c	/^ipv6cp_script(script)$/;"	f	file:
ipv6cp_script_done	ipv6cp.c	/^ipv6cp_script_done(arg)$/;"	f	file:
ipv6cp_script_pid	ipv6cp.c	/^static pid_t ipv6cp_script_pid;$/;"	v	file:
ipv6cp_script_state	ipv6cp.c	/^} ipv6cp_script_state;$/;"	v	typeref:enum:script_state	file:
ipv6cp_up	ipv6cp.c	/^ipv6cp_up(f)$/;"	f	file:
ipv6cp_wantoptions	ipv6cp.c	/^ipv6cp_options ipv6cp_wantoptions[NUM_PPP];     \/* Options that we want to request *\/$/;"	v
ipx_ntoa	ipxcp.c	/^ipx_ntoa(ipxaddr)$/;"	f	file:
ipx_prio_his	ipxcp.c	/^static int ipx_prio_our, ipx_prio_his;$/;"	v	file:
ipx_prio_our	ipxcp.c	/^static int ipx_prio_our, ipx_prio_his;$/;"	v	file:
ipxcp_ackci	ipxcp.c	/^ipxcp_ackci(f, p, len)$/;"	f	file:
ipxcp_addci	ipxcp.c	/^ipxcp_addci(f, ucp, lenp)$/;"	f	file:
ipxcp_allowoptions	ipxcp.c	/^ipxcp_options ipxcp_allowoptions[NUM_PPP];	\/* Options we allow peer to request *\/$/;"	v
ipxcp_callbacks	ipxcp.c	/^static fsm_callbacks ipxcp_callbacks = { \/* IPXCP callback routines *\/$/;"	v	file:
ipxcp_cilen	ipxcp.c	/^ipxcp_cilen(f)$/;"	f	file:
ipxcp_close	ipxcp.c	/^ipxcp_close(unit, reason)$/;"	f	file:
ipxcp_codenames	ipxcp.c	/^static char *ipxcp_codenames[] = {$/;"	v	file:
ipxcp_down	ipxcp.c	/^ipxcp_down(f)$/;"	f	file:
ipxcp_finished	ipxcp.c	/^ipxcp_finished(f)$/;"	f	file:
ipxcp_fsm	ipxcp.c	/^fsm ipxcp_fsm[NUM_PPP];		\/* IPXCP fsm structure *\/$/;"	v
ipxcp_gotoptions	ipxcp.c	/^ipxcp_options ipxcp_gotoptions[NUM_PPP];	\/* Options that peer ack'd *\/$/;"	v
ipxcp_hisoptions	ipxcp.c	/^ipxcp_options ipxcp_hisoptions[NUM_PPP];	\/* Options that we ack'd *\/$/;"	v
ipxcp_init	ipxcp.c	/^ipxcp_init(unit)$/;"	f	file:
ipxcp_input	ipxcp.c	/^ipxcp_input(unit, p, len)$/;"	f	file:
ipxcp_is_up	ipxcp.c	/^static int ipxcp_is_up;$/;"	v	file:
ipxcp_lowerdown	ipxcp.c	/^ipxcp_lowerdown(unit)$/;"	f	file:
ipxcp_lowerup	ipxcp.c	/^ipxcp_lowerup(unit)$/;"	f	file:
ipxcp_nakci	ipxcp.c	/^ipxcp_nakci(f, p, len, treat_as_reject)$/;"	f	file:
ipxcp_open	ipxcp.c	/^ipxcp_open(unit)$/;"	f	file:
ipxcp_option_list	ipxcp.c	/^static option_t ipxcp_option_list[] = {$/;"	v	file:
ipxcp_options	ipxcp.h	/^typedef struct ipxcp_options {$/;"	s
ipxcp_options	ipxcp.h	/^} ipxcp_options;$/;"	t	typeref:struct:ipxcp_options
ipxcp_printpkt	ipxcp.c	/^ipxcp_printpkt(p, plen, printer, arg)$/;"	f	file:
ipxcp_protent	ipxcp.c	/^struct protent ipxcp_protent = {$/;"	v	typeref:struct:protent
ipxcp_protrej	ipxcp.c	/^ipxcp_protrej(unit)$/;"	f	file:
ipxcp_rejci	ipxcp.c	/^ipxcp_rejci(f, p, len)$/;"	f	file:
ipxcp_reqci	ipxcp.c	/^ipxcp_reqci(f, inp, len, reject_if_disagree)$/;"	f	file:
ipxcp_resetci	ipxcp.c	/^ipxcp_resetci(f)$/;"	f	file:
ipxcp_script	ipxcp.c	/^ipxcp_script(f, script)$/;"	f	file:
ipxcp_up	ipxcp.c	/^ipxcp_up(f)$/;"	f	file:
ipxcp_wantoptions	ipxcp.c	/^ipxcp_options ipxcp_wantoptions[NUM_PPP];	\/* Options that we want to request *\/$/;"	v
isoctal	options.c	1150;"	d	file:
isoctal	options.c	1377;"	d	file:
kdebugflag	options.c	/^int	kdebugflag = 0;		\/* Tell kernel to print debug messages *\/$/;"	v
kernel_version	sys-linux.c	/^static int kernel_version;$/;"	v	file:
key_schedule	pppcrypt.c	/^static DES_key_schedule key_schedule;$/;"	v	file:
key_schedule	pppcrypt.c	/^static des_key_schedule	key_schedule;$/;"	v	file:
kill_link	main.c	/^int kill_link;$/;"	v
kill_my_pg	main.c	/^kill_my_pg(sig)$/;"	f	file:
killable	main.c	/^    int		killable;$/;"	m	struct:subprocess	file:
last_cs	include/net/slcompress.h	/^	struct cstate *last_cs;	\/* most recently used tstate *\/$/;"	m	struct:slcompress	typeref:struct:slcompress::cstate
last_cs	include/net/vjcompress.h	/^    struct cstate *last_cs;	\/* most recently used tstate *\/$/;"	m	struct:vjcompress	typeref:struct:vjcompress::cstate
last_recv	include/net/slcompress.h	/^	u_char last_recv;	\/* last rcvd conn. id *\/$/;"	m	struct:slcompress
last_recv	include/net/vjcompress.h	/^    u_char last_recv;		\/* last rcvd conn. id *\/$/;"	m	struct:vjcompress
last_xmit	include/net/slcompress.h	/^	u_char last_xmit;	\/* last sent conn. id *\/$/;"	m	struct:slcompress
last_xmit	include/net/vjcompress.h	/^    u_char last_xmit;		\/* last sent conn. id *\/$/;"	m	struct:vjcompress
lax_recv	lcp.c	/^bool	lax_recv = 0;		\/* accept control chars in asyncmap *\/$/;"	v
lcp_ackci	lcp.c	/^lcp_ackci(f, p, len)$/;"	f	file:
lcp_addci	lcp.c	/^lcp_addci(f, ucp, lenp)$/;"	f	file:
lcp_allowoptions	lcp.c	/^lcp_options lcp_allowoptions[NUM_PPP];	\/* Options we allow peer to request *\/$/;"	v
lcp_callbacks	lcp.c	/^static fsm_callbacks lcp_callbacks = {	\/* LCP callback routines *\/$/;"	v	file:
lcp_cilen	lcp.c	/^lcp_cilen(f)$/;"	f	file:
lcp_close	lcp.c	/^lcp_close(unit, reason)$/;"	f
lcp_codenames	lcp.c	/^static char *lcp_codenames[] = {$/;"	v	file:
lcp_delayed_up	lcp.c	/^lcp_delayed_up(arg)$/;"	f	file:
lcp_down	lcp.c	/^lcp_down(f)$/;"	f	file:
lcp_echo_fails	lcp.c	/^int	lcp_echo_fails = 0;	\/* Tolerance to unanswered echo-requests *\/$/;"	v
lcp_echo_interval	lcp.c	/^int	lcp_echo_interval = 0; 	\/* Interval between LCP echo-requests *\/$/;"	v
lcp_echo_lowerdown	lcp.c	/^lcp_echo_lowerdown (unit)$/;"	f	file:
lcp_echo_lowerup	lcp.c	/^lcp_echo_lowerup (unit)$/;"	f	file:
lcp_echo_number	lcp.c	/^static int lcp_echo_number   = 0;	\/* ID number of next echo frame *\/$/;"	v	file:
lcp_echo_timer_running	lcp.c	/^static int lcp_echo_timer_running = 0;  \/* set if a timer is running *\/$/;"	v	file:
lcp_echos_pending	lcp.c	/^static int lcp_echos_pending = 0;	\/* Number of outstanding echo msgs *\/$/;"	v	file:
lcp_extcode	lcp.c	/^lcp_extcode(f, code, id, inp, len)$/;"	f	file:
lcp_finished	lcp.c	/^lcp_finished(f)$/;"	f	file:
lcp_fsm	lcp.c	/^fsm lcp_fsm[NUM_PPP];			\/* LCP fsm structure (global)*\/$/;"	v
lcp_gotoptions	lcp.c	/^lcp_options lcp_gotoptions[NUM_PPP];	\/* Options that peer ack'd *\/$/;"	v
lcp_hisoptions	lcp.c	/^lcp_options lcp_hisoptions[NUM_PPP];	\/* Options that we ack'd *\/$/;"	v
lcp_init	lcp.c	/^lcp_init(unit)$/;"	f	file:
lcp_input	lcp.c	/^lcp_input(unit, p, len)$/;"	f	file:
lcp_loopbackfail	lcp.c	/^int lcp_loopbackfail = DEFLOOPBACKFAIL;$/;"	v
lcp_lowerdown	lcp.c	/^lcp_lowerdown(unit)$/;"	f
lcp_lowerup	lcp.c	/^lcp_lowerup(unit)$/;"	f
lcp_nakci	lcp.c	/^lcp_nakci(f, p, len, treat_as_reject)$/;"	f	file:
lcp_open	lcp.c	/^lcp_open(unit)$/;"	f
lcp_option_list	lcp.c	/^static option_t lcp_option_list[] = {$/;"	v	file:
lcp_options	lcp.h	/^typedef struct lcp_options {$/;"	s
lcp_options	lcp.h	/^} lcp_options;$/;"	t	typeref:struct:lcp_options
lcp_printpkt	lcp.c	/^lcp_printpkt(p, plen, printer, arg)$/;"	f	file:
lcp_protent	lcp.c	/^struct protent lcp_protent = {$/;"	v	typeref:struct:protent
lcp_protrej	lcp.c	/^lcp_protrej(unit)$/;"	f	file:
lcp_received_echo_reply	lcp.c	/^lcp_received_echo_reply (f, id, inp, len)$/;"	f	file:
lcp_rejci	lcp.c	/^lcp_rejci(f, p, len)$/;"	f	file:
lcp_reqci	lcp.c	/^lcp_reqci(f, inp, lenp, reject_if_disagree)$/;"	f	file:
lcp_resetci	lcp.c	/^lcp_resetci(f)$/;"	f	file:
lcp_rprotrej	lcp.c	/^lcp_rprotrej(f, inp, len)$/;"	f	file:
lcp_sprotrej	lcp.c	/^lcp_sprotrej(unit, p, len)$/;"	f
lcp_starting	lcp.c	/^lcp_starting(f)$/;"	f	file:
lcp_up	lcp.c	/^lcp_up(f)$/;"	f	file:
lcp_wantoptions	lcp.c	/^lcp_options lcp_wantoptions[NUM_PPP];	\/* Options that we want to request *\/$/;"	v
len	utils.c	/^    int len;$/;"	m	struct:buffer_info	file:
length	demand.c	/^    int length;$/;"	m	struct:packet	file:
length	include/net/if_ppp.h	/^	u_int	length;$/;"	m	struct:ppp_option_data
length	plugins/radius/radiusclient.h	/^	u_short         length;$/;"	m	struct:pw_auth_hdr
length	plugins/rp-pppoe/pppoe.h	/^    unsigned int length:16;	\/* Length of payload *\/$/;"	m	struct:PPPoETagStruct
length	plugins/rp-pppoe/pppoe.h	/^    unsigned int length:16;	\/* Payload length *\/$/;"	m	struct:PPPoEPacketStruct
length	pppd.h	/^    unsigned char	length;$/;"	m	struct:epdisc
line	utils.c	/^static char line[256];		\/* line to be logged accumulated here *\/$/;"	v	file:
linep	utils.c	/^static char *linep;		\/* current pointer within line *\/$/;"	v	file:
link_connect_time	main.c	/^unsigned link_connect_time;$/;"	v
link_down	auth.c	/^link_down(unit)$/;"	f
link_down_notifier	auth.c	/^struct notifier *link_down_notifier = NULL;$/;"	v	typeref:struct:notifier
link_established	auth.c	/^link_established(unit)$/;"	f
link_mru	sys-solaris.c	/^static int	link_mtu, link_mru;$/;"	v	file:
link_mtu	sys-linux.c	/^static int	link_mtu;		\/* mtu for the link (not bundle) *\/$/;"	v	file:
link_mtu	sys-solaris.c	/^static int	link_mtu, link_mru;$/;"	v	file:
link_required	auth.c	/^link_required(unit)$/;"	f
link_stats	main.c	/^struct pppd_stats link_stats;$/;"	v	typeref:struct:pppd_stats
link_stats_valid	main.c	/^int link_stats_valid;$/;"	v
link_terminated	auth.c	/^link_terminated(unit)$/;"	f
linkname	options.c	/^char	linkname[MAXPATHLEN];	\/* logical name for link *\/$/;"	v
linkpidfile	main.c	/^static char linkpidfile[MAXPATHLEN];	\/* name of linkname pid file *\/$/;"	v	file:
linktype	include/pcap-int.h	/^	int linktype;$/;"	m	struct:pcap
listen_time	main.c	/^int listen_time;$/;"	v
llc_encaps	plugins/pppoatm/pppoatm.c	/^static bool llc_encaps = 0;$/;"	v	file:
llevel	utils.c	/^static int llevel;		\/* level for logging *\/$/;"	v	file:
llv6_ntoa	ipv6cp.c	/^llv6_ntoa(ifaceid)$/;"	f
loadplugin	options.c	/^loadplugin(argv)$/;"	f	file:
lock	utils.c	/^lock(dev)$/;"	f
lock_db	main.c	/^void lock_db()$/;"	f
lock_file	utils.c	/^static char lock_file[MAXPATHLEN];$/;"	v	file:
locked	tty.c	/^int locked;			\/* lock() has succeeded *\/$/;"	v
lockflag	tty.c	/^bool	lockflag = 0;		\/* Create lock file to lock the serial dev *\/$/;"	v
log_default	options.c	/^bool	log_default = 1;	\/* log_to_fd is default (stdout) *\/$/;"	v
log_packet	utils.c	/^log_packet(p, len, prefix, level)$/;"	f
log_to_fd	options.c	/^int	log_to_fd = 1;		\/* send log messages to this fd too *\/$/;"	v
log_write	utils.c	/^log_write(level, buf)$/;"	f	file:
logfile_fd	options.c	/^static int logfile_fd = -1;	\/* fd opened for log file *\/$/;"	v	file:
logfile_name	options.c	/^static char logfile_name[MAXPATHLEN];	\/* name of log file *\/$/;"	v	file:
logged_in	session.c	/^static bool logged_in = 0;$/;"	v	file:
logit	utils.c	/^logit(level, fmt, args)$/;"	f	file:
logwtmp	sys-linux.c	/^void logwtmp (const char *line, const char *name, const char *host) {}$/;"	f
logwtmp	sys-linux.c	/^void logwtmp (const char *line, const char *name, const char *host)$/;"	f
logwtmp	sys-solaris.c	/^logwtmp(line, name, host)$/;"	f
lookup_realm	plugins/radius/radrealms.c	/^lookup_realm(char const *user,$/;"	f	file:
loop_chars	demand.c	/^loop_chars(p, n)$/;"	f
loop_frame	demand.c	/^loop_frame(frame, len)$/;"	f
loop_name	sys-linux.c	/^static char loop_name[20];$/;"	v	file:
looped	sys-linux.c	/^static int	looped;			\/* 1 if using loop *\/$/;"	v	file:
lower_limit	pppd.h	/^	int	lower_limit;$/;"	m	struct:__anon3
lowerdown	pppd.h	/^    void (*lowerdown) __P((int unit));$/;"	m	struct:protent
lowerup	pppd.h	/^    void (*lowerup) __P((int unit));$/;"	m	struct:protent
lqr_period	lcp.h	/^    u_int32_t lqr_period;	\/* Reporting period for LQR 1\/100ths second *\/$/;"	m	struct:lcp_options
lvalue	plugins/radius/radiusclient.h	/^	UINT4              lvalue;$/;"	m	struct:value_pair
magic	magic.c	/^magic()$/;"	f
magic_init	magic.c	/^magic_init()$/;"	f
magicnumber	lcp.h	/^    u_int32_t magicnumber;$/;"	m	struct:lcp_options
main	main.c	/^main(argc, argv)$/;"	f
main	plugins/rp-pppoe/pppoe-discovery.c	/^int main(int argc, char *argv[])$/;"	f
main	srp-entry.c	/^main(int argc, char **argv)$/;"	f
make_new_bundle	sys-linux.c	/^void make_new_bundle(int mrru, int mtru, int rssn, int tssn)$/;"	f
make_ppp_unit	sys-linux.c	/^static int make_ppp_unit()$/;"	f	file:
make_response	chap-new.h	/^	void (*make_response)(unsigned char *response, int id, char *our_name,$/;"	m	struct:chap_digest_type
make_username_realm	plugins/radius/radius.c	/^make_username_realm(char *user)$/;"	f	file:
map2id_list	plugins/radius/clientid.c	/^static struct map2id_s *map2id_list = NULL;$/;"	v	typeref:struct:map2id_s	file:
map2id_s	plugins/radius/clientid.c	/^struct map2id_s {$/;"	s	file:
mask	pppd.h	/^    u_int32_t	mask;		\/* base and mask are in network byte order *\/$/;"	m	struct:permitted_ip
master_detach	options.c	/^bool	master_detach;		\/* Detach when we're (only) multilink master *\/$/;"	v
master_fd	sys-linux.c	/^static int master_fd = -1;	\/* pty for old-style demand mode, master *\/$/;"	v	file:
match_option	options.c	/^match_option(name, opt, dowild)$/;"	f	file:
max	plugins/radius/radiusclient.h	/^	int max;$/;"	m	struct:server
max_data_rate	tty.c	/^int	max_data_rate;		\/* max bytes\/sec through charshunt *\/$/;"	v
max_in_fd	sys-linux.c	/^static int max_in_fd;		\/* highest fd set in in_fds *\/$/;"	v	file:
maxconfreqtransmits	fsm.h	/^    int maxconfreqtransmits;	\/* Maximum Configure-Request transmissions *\/$/;"	m	struct:fsm
maxconnect	options.c	/^int	maxconnect = 0;		\/* Maximum connect time *\/$/;"	v
maxfail	options.c	/^int	maxfail = 10;		\/* max # of unsuccessful connection attempts *\/$/;"	v
maxnakloops	fsm.h	/^    int maxnakloops;		\/* Maximum number of nak loops tolerated *\/$/;"	m	struct:fsm
maxoctets	options.c	/^unsigned int  maxoctets = 0;    \/* default - no limit *\/$/;"	v
maxoctets_dir	options.c	/^int maxoctets_dir = 0;       \/* default - sum of traffic *\/$/;"	v
maxoctets_timeout	options.c	/^int maxoctets_timeout = 1;   \/* default 1 second *\/ $/;"	v
maxsize	plugins/radius/radiusclient.h	/^	int maxsize, size;$/;"	m	struct:env
maxslotindex	ipcp.h	/^    int  maxslotindex;		\/* values for RFC1332 VJ compression neg. *\/$/;"	m	struct:ipcp_options
maxtermtransmits	fsm.h	/^    int maxtermtransmits;	\/* Maximum Terminate-Request transmissions *\/$/;"	m	struct:fsm
maybe_relock	tty.c	/^maybe_relock(arg, pid)$/;"	f	file:
md	include/pcap-int.h	/^	struct pcap_md md;$/;"	m	struct:pcap	typeref:struct:pcap::pcap_md
md5_digest	chap-md5.c	/^static struct chap_digest_type md5_digest = {$/;"	v	typeref:struct:chap_digest_type	file:
message	chap-new.c	/^	char message[256];$/;"	m	struct:chap_server_state	file:
method	ccp.h	/^    short method;		\/* code for chosen compression method *\/$/;"	m	struct:ccp_options
method_name	ccp.c	/^method_name(opt, opt2)$/;"	f	file:
min	include/pcap-int.h	103;"	d
minconnect	plugins/minconn.c	/^static int minconnect = 0;$/;"	v	file:
mode	include/net/if_ppp.h	/^    enum NPmode	mode;$/;"	m	struct:npioctl	typeref:enum:npioctl::NPmode
modem	tty.c	/^bool	modem = 1;		\/* Use modem control lines *\/$/;"	v
modify_flags	sys-linux.c	/^static int modify_flags(int fd, int clear_bits, int set_bits)$/;"	f	file:
months	plugins/radius/util.c	/^static const char * months[] =$/;"	v	file:
mp_bundle_terminated	pppd.h	601;"	d
mp_exit_bundle	pppd.h	602;"	d
mppe	ccp.h	/^    bool mppe;			\/* do MPPE? *\/$/;"	m	struct:ccp_options
mppe_keys_set	chap_ms.c	/^int mppe_keys_set = 0;		\/* Have the MPPE keys been set? *\/$/;"	v
mppe_recv_key	chap_ms.c	/^u_char mppe_recv_key[MPPE_MAX_KEY_LEN];$/;"	v
mppe_send_key	chap_ms.c	/^u_char mppe_send_key[MPPE_MAX_KEY_LEN];$/;"	v
mppe_set_keys	chap_ms.c	/^mppe_set_keys(u_char *rchallenge, u_char PasswordHashHash[MD4_SIGNATURE_SIZE])$/;"	f
mppe_set_keys2	chap_ms.c	/^mppe_set_keys2(u_char PasswordHashHash[MD4_SIGNATURE_SIZE],$/;"	f
mrand48	magic.c	/^mrand48()$/;"	f
mrru	lcp.h	/^    int	 mrru;			\/* Value of MRRU, and multilink enable *\/$/;"	m	struct:lcp_options
mru	lcp.h	/^    int  mru;			\/* Value of MRU *\/$/;"	m	struct:lcp_options
mru	plugins/rp-pppoe/pppoe.h	/^    int mru;			\/* Stored MRU *\/$/;"	m	struct:PPPoEConnectionStruct
ms_lanman	chap_ms.c	/^bool	ms_lanman = 0;    	\/* Use LanMan password instead of NT *\/$/;"	v
mschap2_peer_challenge	chap_ms.c	/^static char *mschap2_peer_challenge = NULL;$/;"	v	file:
mschap_challenge	chap_ms.c	/^static char *mschap_challenge = NULL;$/;"	v	file:
mtu	plugins/rp-pppoe/pppoe.h	/^    int mtu;			\/* Stored MTU *\/$/;"	m	struct:PPPoEConnectionStruct
multilink	options.c	/^bool	multilink = 0;		\/* Enable multilink operation *\/$/;"	v
multilink_join_hook	auth.c	/^void (*multilink_join_hook) __P((void)) = NULL;$/;"	v
multilink_master	pppd.h	604;"	d
mux_dev_name	sys-solaris.c	/^static char *mux_dev_name = IP_DEV_NAME;$/;"	v	file:
mux_dev_name	sys-solaris.c	/^static char *mux_dev_name = UDP_DEV_NAME;$/;"	v	file:
myEth	plugins/rp-pppoe/pppoe.h	/^    unsigned char myEth[ETH_ALEN]; \/* My MAC address *\/$/;"	m	struct:PPPoEConnectionStruct
my_get_idle	plugins/minconn.c	/^static int my_get_idle(struct ppp_idle *idle)$/;"	f	file:
my_options	plugins/minconn.c	/^static option_t my_options[] = {$/;"	v	file:
myname	srp-entry.c	/^static const char *myname;$/;"	v	file:
n_arguments	options.c	/^n_arguments(opt)$/;"	f	file:
n_children	main.c	/^static int n_children;		\/* # child processes still running *\/$/;"	v	file:
n_pollfds	sys-solaris.c	/^static int n_pollfds;$/;"	v	file:
nak_buffer	lcp.c	/^static u_char nak_buffer[PPP_MRU];	\/* where we construct a nak packet *\/$/;"	v	file:
nakci	fsm.h	/^    int  (*nakci)		\/* NAK our Configuration Information *\/$/;"	m	struct:fsm_callbacks
nakloops	fsm.h	/^    int nakloops;		\/* Number of nak loops since last ack *\/$/;"	m	struct:fsm
name	chap-new.c	/^	char *name;$/;"	m	struct:chap_client_state	file:
name	chap-new.c	/^	char *name;$/;"	m	struct:chap_server_state	file:
name	ipxcp.h	/^    u_char name [48];		\/* name of the router *\/$/;"	m	struct:ipxcp_options
name	main.c	/^    const char	*name;$/;"	m	struct:protocol_list	file:
name	plugins/radius/clientid.c	/^	char *name;$/;"	m	struct:map2id_s	file:
name	plugins/radius/options.h	/^	char name[OPTION_LEN];	  \/* name of the option *\/$/;"	m	struct:_option
name	plugins/radius/radiusclient.h	/^	char               name[NAME_LENGTH + 1];$/;"	m	struct:dict_value
name	plugins/radius/radiusclient.h	/^	char               name[NAME_LENGTH + 1];$/;"	m	struct:value_pair
name	plugins/radius/radiusclient.h	/^	char              name[NAME_LENGTH + 1];	\/* attribute name *\/$/;"	m	struct:dict_attr
name	plugins/radius/radiusclient.h	/^	char *name[SERVER_MAX];$/;"	m	struct:server
name	pppd.h	/^	char	*name;		\/* name of the option *\/$/;"	m	struct:__anon3
name	pppd.h	/^    char *name;			\/* Text name of protocol *\/$/;"	m	struct:protent
name_of_pn_file	eap.c	/^name_of_pn_file()$/;"	f	file:
need_holdoff	main.c	/^int need_holdoff;		\/* need holdoff period before restarting *\/$/;"	v
neg_accompression	lcp.h	/^    bool neg_accompression;	\/* HDLC Address\/Control Field Compression? *\/$/;"	m	struct:lcp_options
neg_addr	ipcp.h	/^    bool neg_addr;		\/* Negotiate IP Address? *\/$/;"	m	struct:ipcp_options
neg_asyncmap	lcp.h	/^    bool neg_asyncmap;		\/* Negotiate the async map? *\/$/;"	m	struct:lcp_options
neg_cbcp	lcp.h	/^    bool neg_cbcp;		\/* Negotiate use of CBCP *\/$/;"	m	struct:lcp_options
neg_chap	lcp.h	/^    bool neg_chap;		\/* Ask for CHAP authentication? *\/$/;"	m	struct:lcp_options
neg_complete	ipxcp.h	/^    bool neg_complete;		\/* Negotiate completion *\/$/;"	m	struct:ipxcp_options
neg_eap	lcp.h	/^    bool neg_eap;		\/* Ask for EAP authentication? *\/$/;"	m	struct:lcp_options
neg_endpoint	lcp.h	/^    bool neg_endpoint;		\/* negotiate endpoint discriminator *\/$/;"	m	struct:lcp_options
neg_ifaceid	ipv6cp.h	/^    int neg_ifaceid;		\/* Negotiate interface identifier? *\/$/;"	m	struct:ipv6cp_options
neg_lqr	lcp.h	/^    bool neg_lqr;		\/* Negotiate use of Link Quality Reports *\/$/;"	m	struct:lcp_options
neg_magicnumber	lcp.h	/^    bool neg_magicnumber;	\/* Ask for magic number? *\/$/;"	m	struct:lcp_options
neg_mrru	lcp.h	/^    bool neg_mrru;		\/* negotiate multilink MRRU *\/$/;"	m	struct:lcp_options
neg_mru	lcp.h	/^    bool neg_mru;		\/* Negotiate the MRU? *\/$/;"	m	struct:lcp_options
neg_name	ipxcp.h	/^    bool neg_name;		\/* Negotiate IPX router name *\/$/;"	m	struct:ipxcp_options
neg_nn	ipxcp.h	/^    bool neg_nn;		\/* Negotiate IPX network number? *\/$/;"	m	struct:ipxcp_options
neg_node	ipxcp.h	/^    bool neg_node;		\/* Negotiate IPX node number? *\/$/;"	m	struct:ipxcp_options
neg_pcompression	lcp.h	/^    bool neg_pcompression;	\/* HDLC Protocol Field Compression? *\/$/;"	m	struct:lcp_options
neg_router	ipxcp.h	/^    bool neg_router;		\/* Negotiate IPX router number *\/$/;"	m	struct:ipxcp_options
neg_ssnhf	lcp.h	/^    bool neg_ssnhf;		\/* negotiate short sequence numbers *\/$/;"	m	struct:lcp_options
neg_upap	lcp.h	/^    bool neg_upap;		\/* Ask for UPAP authentication? *\/$/;"	m	struct:lcp_options
neg_vj	ipcp.h	/^    bool neg_vj;		\/* Van Jacobson Compression? *\/$/;"	m	struct:ipcp_options
neg_vj	ipv6cp.h	/^    int neg_vj;			\/* Van Jacobson Compression? *\/$/;"	m	struct:ipv6cp_options
net_short	ipcp.c	2283;"	d	file:
netif_get_mtu	sys-linux.c	/^netif_get_mtu(int unit)$/;"	f
netif_set_mtu	sys-linux.c	/^netif_set_mtu(int unit, int mtu)$/;"	f
netif_set_mtu	sys-solaris.c	/^netif_set_mtu(unit, mtu)$/;"	f
netmask	ipcp.c	/^u_int32_t netmask = 0;		\/* IP netmask to set on interface *\/$/;"	v
netmask_str	ipcp.c	/^static char netmask_str[20];		\/* string form of netmask value *\/$/;"	v	file:
network	ipxcp.h	/^    u_int32_t network;		\/* the final network number *\/$/;"	m	struct:ipxcp_options
network_phase	auth.c	/^network_phase(unit)$/;"	f	file:
new_phase	main.c	/^new_phase(p)$/;"	f
new_phase_hook	main.c	/^int (*new_phase_hook) __P((int)) = NULL;$/;"	v
new_style_driver	sys-linux.c	/^int new_style_driver = 0;$/;"	v
next	chap-new.h	/^	struct chap_digest_type *next;$/;"	m	struct:chap_digest_type	typeref:struct:chap_digest_type::chap_digest_type
next	demand.c	/^    struct packet *next;$/;"	m	struct:packet	typeref:struct:packet::packet	file:
next	main.c	/^    struct subprocess *next;$/;"	m	struct:subprocess	typeref:struct:subprocess::subprocess	file:
next	options.c	/^    struct option_list *next;$/;"	m	struct:option_list	typeref:struct:option_list::option_list	file:
next	options.c	/^    struct option_value *next;$/;"	m	struct:option_value	typeref:struct:option_value::option_value	file:
next	plugins/radius/clientid.c	/^	struct map2id_s *next;$/;"	m	struct:map2id_s	typeref:struct:map2id_s::map2id_s	file:
next	plugins/radius/radius.c	/^    struct avpopt *next;$/;"	m	struct:avpopt	typeref:struct:avpopt::avpopt	file:
next	plugins/radius/radiusclient.h	/^	struct dict_attr *next;$/;"	m	struct:dict_attr	typeref:struct:dict_attr::dict_attr
next	plugins/radius/radiusclient.h	/^	struct dict_value *next;$/;"	m	struct:dict_value	typeref:struct:dict_value::dict_value
next	plugins/radius/radiusclient.h	/^	struct value_pair *next;$/;"	m	struct:value_pair	typeref:struct:value_pair::value_pair
next	plugins/radius/radiusclient.h	/^    struct vendor_dict *next;$/;"	m	struct:vendor_dict	typeref:struct:vendor_dict::vendor_dict
next	pppd.h	/^    struct notifier *next;$/;"	m	struct:notifier	typeref:struct:notifier::notifier
next	pppd.h	/^    struct wordlist	*next;$/;"	m	struct:wordlist	typeref:struct:wordlist::wordlist
ngroups	main.c	/^int ngroups;			\/* How many groups valid in groups *\/$/;"	v
no_device_given_pppoatm	plugins/pppoatm/pppoatm.c	/^static void no_device_given_pppoatm(void)$/;"	f	file:
no_ifaceid_neg	ipv6cp.c	/^int no_ifaceid_neg = 0;$/;"	v
no_ppp_msg	main.c	/^char *no_ppp_msg = "Sorry - this system lacks PPP kernel support\\n";$/;"	v
noauth_addrs	auth.c	/^static struct wordlist *noauth_addrs;$/;"	v	typeref:struct:wordlist	file:
nodetach	options.c	/^bool	nodetach = 0;		\/* Don't detach from controlling tty *\/$/;"	v
noendpoint	lcp.c	/^bool	noendpoint = 0;		\/* don't send\/accept endpoint discriminator *\/$/;"	v
noopt	lcp.c	/^noopt(argv)$/;"	f	file:
noremoteip	ipcp.c	/^bool	noremoteip = 0;		\/* Let him have no IP address *\/$/;"	v
notice	utils.c	/^notice __V((char *fmt, ...))$/;"	f
notifier	pppd.h	/^struct notifier {$/;"	s
notify	main.c	/^notify(notif, val)$/;"	f
notify_func	pppd.h	/^typedef void (*notify_func) __P((void *, int));$/;"	t
notty	tty.c	/^bool	notty = 0;		\/* Stdin\/out is not a tty *\/$/;"	v
novm	main.c	/^novm(msg)$/;"	f
np_down	auth.c	/^np_down(unit, proto)$/;"	f
np_finished	auth.c	/^np_finished(unit, proto)$/;"	f
np_up	auth.c	/^np_up(unit, proto)$/;"	f
npioctl	include/net/if_ppp.h	/^struct npioctl {$/;"	s
ntlm_auth	plugins/winbind.c	/^static char *ntlm_auth = NULL;$/;"	v	file:
null_auth_hook	auth.c	/^int (*null_auth_hook) __P((struct wordlist **paddrs,$/;"	v
null_login	auth.c	/^null_login(unit)$/;"	f	file:
numPADOs	plugins/rp-pppoe/pppoe.h	/^    int numPADOs;		\/* Number of PADO packets received *\/$/;"	m	struct:PPPoEConnectionStruct
num_np_open	auth.c	/^static int num_np_open;$/;"	v	file:
num_np_up	auth.c	/^static int num_np_up;$/;"	v	file:
num_options	plugins/radius/options.h	/^static int num_options = ((sizeof(config_options))\/(sizeof(config_options[0])));$/;"	v
number_option	options.c	/^number_option(str, valp, base)$/;"	f	file:
numloops	lcp.h	/^    int  numloops;		\/* Number of loops during magic number neg. *\/$/;"	m	struct:lcp_options
o_bool	pppd.h	/^	o_bool,$/;"	e	enum:opt_type
o_int	pppd.h	/^	o_int,$/;"	e	enum:opt_type
o_special	pppd.h	/^	o_special = 1,$/;"	e	enum:opt_type
o_special_noarg	pppd.h	/^	o_special_noarg = 0,$/;"	e	enum:opt_type
o_string	pppd.h	/^	o_string,$/;"	e	enum:opt_type
o_uint32	pppd.h	/^	o_uint32,$/;"	e	enum:opt_type
o_wild	pppd.h	/^	o_wild$/;"	e	enum:opt_type
offset	include/pcap-int.h	/^	int offset;		\/* offset for proper alignment *\/$/;"	m	struct:pcap
offsetof	pppd.h	932;"	d
ok_error	sys-linux.c	173;"	d	file:
old_addrs	ipcp.h	/^    bool old_addrs;		\/* Use old (IP-Addresses) option? *\/$/;"	m	struct:ipcp_options
old_link_stats	main.c	/^static struct pppd_stats old_link_stats;$/;"	v	typeref:struct:pppd_stats	file:
old_setdevname_hook	plugins/pppoatm/pppoatm.c	/^int (*old_setdevname_hook)(const char* cp) = NULL;$/;"	v
old_vj	ipcp.h	/^    bool old_vj;		\/* use old (short) form of VJ option? *\/$/;"	m	struct:ipcp_options
open	pppd.h	/^    void (*open) __P((int unit));$/;"	m	struct:protent
openInterface	plugins/rp-pppoe/if.c	/^openInterface(char const *ifname, UINT16_t type, unsigned char *hwaddr)$/;"	f
openInterface	plugins/rp-pppoe/pppoe-discovery.c	/^openInterface(char const *ifname, UINT16_t type, unsigned char *hwaddr)$/;"	f
open_ccp	main.c	/^open_ccp(sig)$/;"	f	file:
open_ccp_flag	main.c	/^int open_ccp_flag;$/;"	v
open_pn_file	eap.c	/^open_pn_file(modebits)$/;"	f	file:
open_ppp_loopback	sys-linux.c	/^open_ppp_loopback(void)$/;"	f
open_ppp_loopback	sys-solaris.c	/^open_ppp_loopback()$/;"	f
open_route_table	sys-linux.c	/^static int open_route_table (void)$/;"	f	file:
open_socket	tty.c	/^open_socket(dest)$/;"	f	file:
opt_local	ipv6cp.h	/^    int opt_local;		\/* ourtoken set by option *\/$/;"	m	struct:ipv6cp_options
opt_remote	ipv6cp.h	/^    int opt_remote;		\/* histoken set by option *\/$/;"	m	struct:ipv6cp_options
opt_type	pppd.h	/^enum opt_type {$/;"	g
option_error	options.c	/^option_error __V((char *fmt, ...))$/;"	f
option_list	options.c	/^struct option_list {$/;"	s	file:
option_priority	options.c	/^int  option_priority = OPRIO_CFGFILE; \/* priority of the current options *\/$/;"	v
option_source	options.c	/^char *option_source;		\/* string saying where the option came from *\/$/;"	v
option_t	pppd.h	/^} option_t;$/;"	t	typeref:struct:__anon3
option_value	options.c	/^struct option_value {$/;"	s	file:
options	options.c	/^    option_t *options;$/;"	m	struct:option_list	file:
options	plugins/passprompt.c	/^static option_t options[] = {$/;"	v	file:
options	plugins/passwordfd.c	/^static option_t options[] = {$/;"	v	file:
options	pppd.h	/^	option_t *options;$/;"	m	struct:channel
options	pppd.h	/^    option_t *options;		\/* List of command-line options *\/$/;"	m	struct:protent
options_for_tty	options.c	/^options_for_tty()$/;"	f
options_from_file	options.c	/^options_from_file(filename, must_exist, check_prot, priv)$/;"	f
options_from_list	options.c	/^options_from_list(w, priv)$/;"	f
options_from_user	options.c	/^options_from_user()$/;"	f
our_name	options.c	/^char	our_name[MAXNAMELEN];	\/* Our name for authentication purposes *\/$/;"	v
our_network	ipxcp.h	/^    u_int32_t our_network;	\/* our value for network number *\/$/;"	m	struct:ipxcp_options
our_node	ipxcp.h	/^    u_char our_node[6];		\/* our node number *\/$/;"	m	struct:ipxcp_options
our_old_addr	sys-linux.c	/^static u_int32_t our_old_addr;		\/* for detecting address changes *\/$/;"	v	file:
ouraddr	ipcp.h	/^    u_int32_t ouraddr, hisaddr;	\/* Addresses in NETWORK BYTE ORDER *\/$/;"	m	struct:ipcp_options
ourid	ipv6cp.h	/^    eui64_t ourid, hisid;	\/* Interface identifiers *\/$/;"	m	struct:ipv6cp_options
outpacket_buf	main.c	/^u_char outpacket_buf[PPP_MRU+PPP_HDRLEN]; \/* buffer for outgoing packet *\/$/;"	v
output	sys-linux.c	/^void output (int unit, unsigned char *p, int len)$/;"	f
output	sys-solaris.c	/^output(unit, p, len)$/;"	f
override_value	options.c	/^override_value(option, priority, source)$/;"	f
p	include/net/ppp_defs.h	/^    struct pppstat p;		\/* basic PPP statistics *\/$/;"	m	struct:ppp_stats	typeref:struct:ppp_stats::pppstat
packet	demand.c	/^struct packet {$/;"	s	file:
packetIsForMe	plugins/rp-pppoe/discovery.c	/^packetIsForMe(PPPoEConnection *conn, PPPoEPacket *packet)$/;"	f	file:
packetIsForMe	plugins/rp-pppoe/pppoe-discovery.c	/^packetIsForMe(PPPoEConnection *conn, PPPoEPacket *packet)$/;"	f
pad	include/pcap-int.h	/^	int pad;$/;"	m	struct:pcap_md
pam_conv_data	session.c	/^static struct pam_conv pam_conv_data = {$/;"	v	typeref:struct:pam_conv	file:
pamh	session.c	/^static pam_handle_t *pamh = NULL;$/;"	v	file:
pap_auth_hook	auth.c	/^int (*pap_auth_hook) __P((char *user, char *passwd, char **msgp,$/;"	v
pap_check_hook	auth.c	/^int (*pap_check_hook) __P((void)) = NULL;$/;"	v
pap_logout_hook	auth.c	/^void (*pap_logout_hook) __P((void)) = NULL;$/;"	v
pap_option_list	upap.c	/^static option_t pap_option_list[] = {$/;"	v	file:
pap_passwd_hook	auth.c	/^int (*pap_passwd_hook) __P((char *user, char *passwd)) = NULL;$/;"	v
pap_protent	upap.c	/^struct protent pap_protent = {$/;"	v	typeref:struct:protent
params	plugins/pppoatm/text2qos.c	/^static int params(const char **text,struct atm_trafprm *a,$/;"	f	file:
parseForHostUniq	plugins/rp-pppoe/discovery.c	/^parseForHostUniq(UINT16_t type, UINT16_t len, unsigned char *data,$/;"	f	file:
parseForHostUniq	plugins/rp-pppoe/pppoe-discovery.c	/^parseForHostUniq(UINT16_t type, UINT16_t len, unsigned char *data,$/;"	f
parsePADOTags	plugins/rp-pppoe/discovery.c	/^parsePADOTags(UINT16_t type, UINT16_t len, unsigned char *data,$/;"	f	file:
parsePADOTags	plugins/rp-pppoe/pppoe-discovery.c	/^parsePADOTags(UINT16_t type, UINT16_t len, unsigned char *data,$/;"	f
parsePADSTags	plugins/rp-pppoe/discovery.c	/^parsePADSTags(UINT16_t type, UINT16_t len, unsigned char *data,$/;"	f	file:
parsePacket	plugins/rp-pppoe/common.c	/^parsePacket(PPPoEPacket *packet, ParseFunc *func, void *extra)$/;"	f
parsePacket	plugins/rp-pppoe/pppoe-discovery.c	/^parsePacket(PPPoEPacket *packet, ParseFunc *func, void *extra)$/;"	f
parse_args	options.c	/^parse_args(argc, argv)$/;"	f
parse_dotted_ip	ipcp.c	/^parse_dotted_ip(p, vp)$/;"	f
pass_filter	options.c	/^struct	bpf_program pass_filter;\/* Filter program for packets to pass *\/$/;"	v	typeref:struct:bpf_program
passive	lcp.h	/^    bool passive;		\/* Don't die if we don't get a response *\/$/;"	m	struct:lcp_options
passwd	options.c	/^char	passwd[MAXSECRETLEN];	\/* Password for PAP *\/$/;"	v
passwd_from_file	auth.c	/^static int passwd_from_file;$/;"	v	file:
passwdfd	plugins/passwordfd.c	/^static int passwdfd = -1;$/;"	v	file:
path_to_procfs	sys-linux.c	/^static char *path_to_procfs(const char *tail)$/;"	f	file:
payload	plugins/rp-pppoe/pppoe.h	/^    unsigned char payload[ETH_JUMBO_LEN]; \/* A LOT of room to spare *\/$/;"	m	struct:PPPoETagStruct
payload	plugins/rp-pppoe/pppoe.h	/^    unsigned char payload[ETH_JUMBO_LEN]; \/* A bit of room to spare *\/$/;"	m	struct:PPPoEPacketStruct
pcap	include/pcap-int.h	/^struct pcap {$/;"	s
pcap_int_h	include/pcap-int.h	37;"	d
pcap_md	include/pcap-int.h	/^struct pcap_md {$/;"	s
pcap_sf	include/pcap-int.h	/^struct pcap_sf {$/;"	s
peerEth	plugins/rp-pppoe/pppoe.h	/^    unsigned char peerEth[ETH_ALEN]; \/* Peer's MAC address *\/$/;"	m	struct:PPPoEConnectionStruct
peer_authname	auth.c	/^char peer_authname[MAXNAMELEN];$/;"	v
peer_mru	fsm.c	/^int peer_mru[NUM_PPP];$/;"	v
pend_q	demand.c	/^struct packet *pend_q;$/;"	v	typeref:struct:packet
pend_qtail	demand.c	/^struct packet *pend_qtail;$/;"	v	typeref:struct:packet
permit	pppd.h	/^    int		permit;		\/* 1 = permit, 0 = forbid *\/$/;"	m	struct:permitted_ip
permitted_ip	pppd.h	/^struct permitted_ip {$/;"	s
permitted_numbers	auth.c	/^static struct wordlist *permitted_numbers;$/;"	v	typeref:struct:wordlist	file:
persist	options.c	/^bool	persist = 0;		\/* Reopen link after it goes down *\/$/;"	v
phase	main.c	/^int phase;			\/* where the link is at *\/$/;"	v
phasechange	main.c	/^struct notifier *phasechange = NULL;$/;"	v	typeref:struct:notifier
pid	main.c	/^    pid_t	pid;$/;"	m	struct:subprocess	file:
pidchange	main.c	/^struct notifier *pidchange = NULL;$/;"	v	typeref:struct:notifier
pidfilename	main.c	/^static char pidfilename[MAXPATHLEN];	\/* name of pid file *\/$/;"	v	file:
pkt	include/pcap-int.h	/^	u_char *pkt;$/;"	m	struct:pcap
pkts_in	pppd.h	/^    unsigned int	pkts_in;$/;"	m	struct:pppd_stats
pkts_out	pppd.h	/^    unsigned int	pkts_out;$/;"	m	struct:pppd_stats
plugin_init	plugins/minconn.c	/^void plugin_init(void)$/;"	f
plugin_init	plugins/passprompt.c	/^void plugin_init(void)$/;"	f
plugin_init	plugins/passwordfd.c	/^void plugin_init (void)$/;"	f
plugin_init	plugins/pppoatm/pppoatm.c	/^void plugin_init(void)$/;"	f
plugin_init	plugins/radius/radattr.c	/^plugin_init(void)$/;"	f
plugin_init	plugins/radius/radius.c	/^plugin_init(void)$/;"	f
plugin_init	plugins/radius/radrealms.c	/^plugin_init(void)$/;"	f
plugin_init	plugins/rp-pppoe/plugin.c	/^plugin_init(void)$/;"	f
plugin_init	plugins/winbind.c	/^plugin_init(void)$/;"	f
pn_secret	eap.c	/^static char *pn_secret = NULL;		\/* Pseudonym generating secret *\/$/;"	v	file:
pncrypt_setkey	eap.c	/^pncrypt_setkey(int timeoffs)$/;"	f	file:
pollfds	sys-solaris.c	/^static struct pollfd pollfds[MAX_POLLFDS];$/;"	v	typeref:struct:pollfd	file:
port	plugins/radius/radiusclient.h	/^	unsigned short port[SERVER_MAX];$/;"	m	struct:server
portnummap	plugins/radius/radius.c	/^static bool portnummap = 0;$/;"	v	file:
ppp_available	sys-linux.c	/^int ppp_available(void)$/;"	f
ppp_available	sys-solaris.c	/^ppp_available()$/;"	f
ppp_comp_stats	include/net/ppp_defs.h	/^struct ppp_comp_stats {$/;"	s
ppp_dev_fd	sys-linux.c	/^int ppp_dev_fd = -1;		\/* fd for \/dev\/ppp (new style driver) *\/$/;"	v
ppp_devnam	main.c	/^char ppp_devnam[MAXPATHLEN];	\/* name of PPP tty (maybe ttypx) *\/$/;"	v
ppp_disc	sys-linux.c	/^static int ppp_disc = N_PPP;	\/* The PPP discpline *\/$/;"	v	file:
ppp_fd	sys-linux.c	/^static int ppp_fd = -1;		\/* fd which is set to PPP discipline *\/$/;"	v	file:
ppp_ibytes	include/net/ppp_defs.h	/^    unsigned int ppp_ibytes;	\/* bytes received *\/$/;"	m	struct:pppstat
ppp_idle	include/net/ppp_defs.h	/^struct ppp_idle {$/;"	s
ppp_ierrors	include/net/ppp_defs.h	/^    unsigned int ppp_ierrors;	\/* receive errors *\/$/;"	m	struct:pppstat
ppp_ipackets	include/net/ppp_defs.h	/^    unsigned int ppp_ipackets;	\/* packets received *\/$/;"	m	struct:pppstat
ppp_obytes	include/net/ppp_defs.h	/^    unsigned int ppp_obytes;	\/* bytes sent *\/$/;"	m	struct:pppstat
ppp_oerrors	include/net/ppp_defs.h	/^    unsigned int ppp_oerrors;	\/* transmit errors *\/$/;"	m	struct:pppstat
ppp_opackets	include/net/ppp_defs.h	/^    unsigned int ppp_opackets;	\/* packets sent *\/$/;"	m	struct:pppstat
ppp_option_data	include/net/if_ppp.h	/^struct ppp_option_data {$/;"	s
ppp_recv_config	main.c	/^ppp_recv_config(unit, mru, accm, pcomp, accomp)$/;"	f
ppp_registered	sys-linux.c	/^ppp_registered(void)$/;"	f	file:
ppp_send_config	main.c	/^ppp_send_config(unit, mtu, accm, pcomp, accomp)$/;"	f
ppp_session_number	main.c	/^int ppp_session_number;		\/* Session number, for channels with such a$/;"	v
ppp_stats	include/net/ppp_defs.h	/^struct ppp_stats {$/;"	s
pppd_pppoe_service	plugins/rp-pppoe/plugin.c	/^char *pppd_pppoe_service = NULL;$/;"	v
pppd_stats	pppd.h	/^struct pppd_stats {$/;"	s
pppd_version	plugins/minconn.c	/^char pppd_version[] = VERSION;$/;"	v
pppd_version	plugins/passprompt.c	/^char pppd_version[] = VERSION;$/;"	v
pppd_version	plugins/passwordfd.c	/^char pppd_version[] = VERSION;$/;"	v
pppd_version	plugins/pppoatm/pppoatm.c	/^const char pppd_version[] = VERSION;$/;"	v
pppd_version	plugins/radius/radattr.c	/^char pppd_version[] = VERSION;$/;"	v
pppd_version	plugins/radius/radius.c	/^char pppd_version[] = VERSION;$/;"	v
pppd_version	plugins/radius/radrealms.c	/^char pppd_version[] = VERSION;$/;"	v
pppd_version	plugins/rp-pppoe/plugin.c	/^char pppd_version[] = VERSION;$/;"	v
pppd_version	plugins/winbind.c	/^char pppd_version[] = VERSION;$/;"	v
pppdb	main.c	/^TDB_CONTEXT *pppdb;		\/* database for storing status etc. *\/$/;"	v
pppfd	sys-solaris.c	/^static int	pppfd;$/;"	v	file:
pppoa_channel	plugins/pppoatm/pppoatm.c	/^struct channel pppoa_channel = {$/;"	v	typeref:struct:channel
pppoa_channel	plugins/pppoatm/pppoatm.c	/^struct channel pppoa_channel;$/;"	v	typeref:struct:channel
pppoa_fd	plugins/pppoatm/pppoatm.c	/^static int pppoa_fd = -1;$/;"	v	file:
pppoa_options	plugins/pppoatm/pppoatm.c	/^static option_t pppoa_options[] = {$/;"	v	file:
pppoatm_max_mru	plugins/pppoatm/pppoatm.c	/^static int pppoatm_max_mtu, pppoatm_max_mru;$/;"	v	file:
pppoatm_max_mtu	plugins/pppoatm/pppoatm.c	/^static int pppoatm_max_mtu, pppoatm_max_mru;$/;"	v	file:
pppoatm_overhead	plugins/pppoatm/pppoatm.c	101;"	d	file:
pppoe_channel	plugins/rp-pppoe/plugin.c	/^struct channel pppoe_channel = {$/;"	v	typeref:struct:channel
pppoe_channel	plugins/rp-pppoe/plugin.c	/^struct channel pppoe_channel;$/;"	v	typeref:struct:channel
pppoe_check_options	plugins/rp-pppoe/plugin.c	/^void pppoe_check_options(void)$/;"	f
pppoe_log_packet	plugins/rp-pppoe/common.c	/^void pppoe_log_packet(const char *prefix, PPPoEPacket *packet)$/;"	f
pppoe_printpkt	plugins/rp-pppoe/common.c	/^void pppoe_printpkt(PPPoEPacket *packet,$/;"	f
pppoe_reqd_mac	plugins/rp-pppoe/plugin.c	/^static char *pppoe_reqd_mac = NULL;$/;"	v	file:
pppoe_reqd_mac_addr	plugins/rp-pppoe/plugin.c	/^unsigned char pppoe_reqd_mac_addr[6];$/;"	v
pppox	pppox.c	/^static int pppox = -1;$/;"	v	file:
pppox_channel	pppox.c	/^static struct channel pppox_channel = {$/;"	v	typeref:struct:channel	file:
pppox_connect	pppox.c	/^static int pppox_connect() {$/;"	f	file:
pppox_disconnect	pppox.c	/^static void pppox_disconnect() {$/;"	f	file:
pppox_init	pppox.c	/^void pppox_init() {$/;"	f
pppox_options	pppox.c	/^static option_t pppox_options[] = {$/;"	v	file:
pppox_set	pppox.c	/^static int pppox_set(char **argv) {$/;"	f	file:
pppstat	include/net/ppp_defs.h	/^struct pppstat	{$/;"	s
pr_log	utils.c	/^pr_log __V((void *arg, char *fmt, ...))$/;"	f
predictor_1	ccp.h	/^    bool predictor_1;		\/* do Predictor-1? *\/$/;"	m	struct:ccp_options
predictor_2	ccp.h	/^    bool predictor_2;		\/* do Predictor-2? *\/$/;"	m	struct:ccp_options
printACNames	plugins/rp-pppoe/plugin.c	/^static int printACNames = 0;$/;"	v	file:
printACNames	plugins/rp-pppoe/pppoe.h	/^    int printACNames;		\/* Just print AC names *\/$/;"	m	struct:PPPoEConnectionStruct
print_attributes	plugins/radius/radattr.c	/^print_attributes(VALUE_PAIR *vp)$/;"	f	file:
print_link_stats	main.c	/^print_link_stats()$/;"	f
print_option	options.c	/^print_option(opt, mainopt, printer, arg)$/;"	f	file:
print_option_list	options.c	/^print_option_list(opt, printer, arg)$/;"	f	file:
print_options	options.c	/^print_options(printer, arg)$/;"	f
print_string	utils.c	/^print_string(p, len, printer, arg)$/;"	f
printendpoint	lcp.c	/^printendpoint(opt, printer, arg)$/;"	f	file:
printer_func	pppd.h	/^typedef void (*printer_func) __P((void *, char *, ...));$/;"	t
printescape	tty.c	/^printescape(opt, printer, arg)$/;"	f	file:
printifaceid	ipv6cp.c	/^printifaceid(opt, printer, arg)$/;"	f	file:
printipaddr	ipcp.c	/^printipaddr(opt, printer, arg)$/;"	f	file:
printipxnode	ipxcp.c	/^printipxnode(opt, printer, arg)$/;"	f	file:
printpkt	pppd.h	/^    int  (*printpkt) __P((u_char *pkt, int len, printer_func printer,$/;"	m	struct:protent
priority	pppd.h	/^	short int priority;$/;"	m	struct:__anon3
priv	chap-new.c	/^	unsigned char priv[64];		\/* private area for digest's use *\/$/;"	m	struct:chap_client_state	file:
privgroup	auth.c	/^privgroup(argv)$/;"	f	file:
privileged	main.c	/^int privileged;			\/* we're running as real uid root *\/$/;"	v
privileged_option	options.c	/^int  privileged_option;		\/* set iff the current option came from root *\/$/;"	v
privopen	main.c	/^int privopen;			\/* don't lock, open device as root *\/$/;"	v
proc_path	sys-linux.c	/^static char proc_path[MAXPATHLEN];$/;"	v	file:
proc_path_len	sys-linux.c	/^static int proc_path_len;$/;"	v	file:
process_extra_options	pppd.h	/^	void (*process_extra_options) __P((void));$/;"	m	struct:channel
process_option	options.c	/^process_option(opt, cmd, argv)$/;"	f	file:
prog	main.c	/^    char	*prog;$/;"	m	struct:subprocess	file:
progname	main.c	/^char *progname;			\/* Name of this program *\/$/;"	v
promptpass	plugins/passprompt.c	/^static int promptpass(char *user, char *passwd)$/;"	f	file:
promptprog	plugins/passprompt.c	/^static char promptprog[PATH_MAX+1];$/;"	v	file:
protent	pppd.h	/^struct protent {$/;"	s
proto	main.c	/^    u_short	proto;$/;"	m	struct:protocol_list	file:
proto_name	fsm.h	/^    char *proto_name;		\/* String name for protocol (for messages) *\/$/;"	m	struct:fsm_callbacks
protocol	fsm.h	/^    int protocol;		\/* Data Link Layer Protocol field value *\/$/;"	m	struct:fsm
protocol	include/net/if_ppp.h	/^    int		protocol;	\/* PPP procotol, e.g. PPP_IP *\/$/;"	m	struct:npioctl
protocol	pppd.h	/^    u_short protocol;		\/* PPP protocol number *\/$/;"	m	struct:protent
protocol_list	main.c	/^struct protocol_list {$/;"	s	file:
protocol_list	main.c	/^} protocol_list[] = {$/;"	v	typeref:struct:protocol_list
protocol_name	main.c	/^protocol_name(proto)$/;"	f
protocols	main.c	/^struct protent *protocols[] = {$/;"	v	typeref:struct:protent
protrej	pppd.h	/^    void (*protrej) __P((int unit));$/;"	m	struct:protent
protreject	fsm.h	/^    void (*protreject)		\/* Called when Protocol-Reject received *\/$/;"	m	struct:fsm_callbacks
proxy_arp	ipcp.h	/^    bool proxy_arp;		\/* Make proxy ARP entry for peer? *\/$/;"	m	struct:ipcp_options
proxy_arp_addr	sys-linux.c	/^static u_int32_t proxy_arp_addr;	\/* Addr for proxy arp entry added *\/$/;"	v	file:
proxy_arp_addr	sys-solaris.c	/^static u_int32_t proxy_arp_addr;	\/* Addr for proxy arp entry added *\/$/;"	v	file:
proxy_arp_dev	sys-linux.c	/^static char proxy_arp_dev[16];		\/* Device for proxy arp entry *\/$/;"	v	file:
proxy_arp_set	ipcp.c	/^static int proxy_arp_set[NUM_PPP];	\/* Have created proxy arp entry *\/$/;"	v	file:
ptr	include/net/if_ppp.h	/^	u_char	*ptr;$/;"	m	struct:ppp_option_data
ptr	utils.c	/^    char *ptr;$/;"	m	struct:buffer_info	file:
pty_master	tty.c	/^static int pty_master;		\/* fd for master side of pty *\/$/;"	v	file:
pty_slave	tty.c	/^static int pty_slave;		\/* fd for slave side of pty *\/$/;"	v	file:
pty_socket	tty.c	/^char	*pty_socket = NULL;	\/* Socket to connect to pty *\/$/;"	v
ptycommand	tty.c	/^char	*ptycommand = NULL;	\/* Command to run on other side of pty *\/$/;"	v
pvcaddr	plugins/pppoatm/pppoatm.c	/^static struct sockaddr_atmpvc pvcaddr;$/;"	v	typeref:struct:sockaddr_atmpvc	file:
pw_auth_hdr	plugins/radius/radiusclient.h	/^typedef struct pw_auth_hdr$/;"	s
pwfd_check	plugins/passwordfd.c	/^static int pwfd_check (void)$/;"	f	file:
pwfd_passwd	plugins/passwordfd.c	/^static int pwfd_passwd (char *user, char *passwd)$/;"	f	file:
qosstr	plugins/pppoatm/pppoatm.c	/^static char *qosstr = NULL;$/;"	v	file:
radius_acct_interim	plugins/radius/radius.c	/^radius_acct_interim(void *ignored)$/;"	f	file:
radius_acct_start	plugins/radius/radius.c	/^radius_acct_start(void)$/;"	f	file:
radius_acct_stop	plugins/radius/radius.c	/^radius_acct_stop(void)$/;"	f	file:
radius_allowed_address	plugins/radius/radius.c	/^radius_allowed_address(u_int32_t addr)$/;"	f	file:
radius_attributes_hook	plugins/radius/radius.c	/^void (*radius_attributes_hook)(VALUE_PAIR *) = NULL;$/;"	v
radius_chap_verify	plugins/radius/radius.c	/^radius_chap_verify(char *user, char *ourname, int id,$/;"	f	file:
radius_choose_ip	plugins/radius/radius.c	/^radius_choose_ip(u_int32_t *addrp)$/;"	f	file:
radius_init	plugins/radius/radius.c	/^radius_init(char *msg)$/;"	f	file:
radius_ip_down	plugins/radius/radius.c	/^radius_ip_down(void *opaque, int arg)$/;"	f	file:
radius_ip_up	plugins/radius/radius.c	/^radius_ip_up(void *opaque, int arg)$/;"	f	file:
radius_logged_in_user	plugins/radius/radius.c	/^char *radius_logged_in_user(void)$/;"	f
radius_pap_auth	plugins/radius/radius.c	/^radius_pap_auth(char *user,$/;"	f	file:
radius_pre_auth_hook	plugins/radius/radius.c	/^void (*radius_pre_auth_hook)(char const *user,$/;"	v
radius_secret_check	plugins/radius/radius.c	/^radius_secret_check(void)$/;"	f	file:
radius_setmppekeys	plugins/radius/radius.c	/^radius_setmppekeys(VALUE_PAIR *vp, REQUEST_INFO *req_info,$/;"	f	file:
radius_setmppekeys2	plugins/radius/radius.c	/^radius_setmppekeys2(VALUE_PAIR *vp, REQUEST_INFO *req_info)$/;"	f	file:
radius_setparams	plugins/radius/radius.c	/^radius_setparams(VALUE_PAIR *vp, char *msg, REQUEST_INFO *req_info,$/;"	f	file:
radius_state	plugins/radius/radius.c	/^struct radius_state {$/;"	s	file:
radrealms_config	plugins/radius/radrealms.c	/^char radrealms_config[MAXPATHLEN] = "\/etc\/radiusclient\/realms";$/;"	v
random_bytes	magic.c	/^random_bytes(unsigned char *buf, int len)$/;"	f
ratio	include/net/ppp_defs.h	/^    unsigned int ratio;		\/* recent compression ratio << 8 *\/$/;"	m	struct:compstat
rc_acct	plugins/radius/buildreq.c	/^int rc_acct(UINT4 client_port, VALUE_PAIR *send)$/;"	f
rc_acct_proxy	plugins/radius/buildreq.c	/^int rc_acct_proxy(VALUE_PAIR *send)$/;"	f
rc_acct_using_server	plugins/radius/buildreq.c	/^int rc_acct_using_server(SERVER *acctserver,$/;"	f
rc_auth	plugins/radius/buildreq.c	/^int rc_auth(UINT4 client_port, VALUE_PAIR *send, VALUE_PAIR **received,$/;"	f
rc_auth_proxy	plugins/radius/buildreq.c	/^int rc_auth_proxy(VALUE_PAIR *send, VALUE_PAIR **received, char *msg)$/;"	f
rc_auth_using_server	plugins/radius/buildreq.c	/^int rc_auth_using_server(SERVER *authserver,$/;"	f
rc_avpair_add	plugins/radius/avpair.c	/^VALUE_PAIR *rc_avpair_add (VALUE_PAIR **list, int attrid, void *pval, int len,$/;"	f
rc_avpair_assign	plugins/radius/avpair.c	/^int rc_avpair_assign (VALUE_PAIR *vp, void *pval, int len)$/;"	f
rc_avpair_copy	plugins/radius/avpair.c	/^VALUE_PAIR *rc_avpair_copy(VALUE_PAIR *p)$/;"	f
rc_avpair_free	plugins/radius/avpair.c	/^void rc_avpair_free (VALUE_PAIR *pair)$/;"	f
rc_avpair_gen	plugins/radius/avpair.c	/^VALUE_PAIR *rc_avpair_gen (AUTH_HDR *auth)$/;"	f
rc_avpair_get	plugins/radius/avpair.c	/^VALUE_PAIR *rc_avpair_get (VALUE_PAIR *vp, UINT4 attr)$/;"	f
rc_avpair_insert	plugins/radius/avpair.c	/^void rc_avpair_insert (VALUE_PAIR **a, VALUE_PAIR *p, VALUE_PAIR *b)$/;"	f
rc_avpair_new	plugins/radius/avpair.c	/^VALUE_PAIR *rc_avpair_new (int attrid, void *pval, int len, int vendorcode)$/;"	f
rc_avpair_parse	plugins/radius/avpair.c	/^int rc_avpair_parse (char *buffer, VALUE_PAIR **first_pair)$/;"	f
rc_avpair_readin	plugins/radius/avpair.c	/^VALUE_PAIR *rc_avpair_readin(FILE *input)$/;"	f
rc_avpair_tostr	plugins/radius/avpair.c	/^int rc_avpair_tostr (VALUE_PAIR *pair, char *name, int ln, char *value, int lv)$/;"	f
rc_buildreq	plugins/radius/buildreq.c	/^void rc_buildreq(SEND_DATA *data, int code, char *server, unsigned short port,$/;"	f
rc_check	plugins/radius/buildreq.c	/^int rc_check(char *host, unsigned short port, char *msg)$/;"	f
rc_check_reply	plugins/radius/sendserver.c	/^static int rc_check_reply (AUTH_HDR *auth, int bufferlen, char *secret,$/;"	f	file:
rc_conf_int	plugins/radius/config.c	/^int rc_conf_int(char *optname)$/;"	f
rc_conf_srv	plugins/radius/config.c	/^SERVER *rc_conf_srv(char *optname)$/;"	f
rc_conf_str	plugins/radius/config.c	/^char *rc_conf_str(char *optname)$/;"	f
rc_dict_findattr	plugins/radius/dict.c	/^DICT_ATTR *rc_dict_findattr (char *attrname)$/;"	f
rc_dict_findval	plugins/radius/dict.c	/^DICT_VALUE *rc_dict_findval (char *valname)$/;"	f
rc_dict_findvendor	plugins/radius/dict.c	/^VENDOR_DICT * rc_dict_findvendor (char *vendorname)$/;"	f
rc_dict_getattr	plugins/radius/dict.c	/^DICT_ATTR *rc_dict_getattr (int attribute, int vendor)$/;"	f
rc_dict_getval	plugins/radius/dict.c	/^DICT_VALUE * rc_dict_getval (UINT4 value, char *attrname)$/;"	f
rc_dict_getvendor	plugins/radius/dict.c	/^VENDOR_DICT * rc_dict_getvendor (int id)$/;"	f
rc_extract_vendor_specific_attributes	plugins/radius/avpair.c	/^static void rc_extract_vendor_specific_attributes(int attrlen,$/;"	f	file:
rc_fieldcpy	plugins/radius/avpair.c	/^static void rc_fieldcpy (char *string, char **uptr)$/;"	f	file:
rc_find_server	plugins/radius/config.c	/^int rc_find_server (char *server_name, UINT4 *ip_addr, char *secret)$/;"	f
rc_get_ipaddr	plugins/radius/ip_util.c	/^UINT4 rc_get_ipaddr (char *host)$/;"	f
rc_get_nas_id	plugins/radius/buildreq.c	/^int rc_get_nas_id(VALUE_PAIR **sendpairs)$/;"	f
rc_get_seqnbr	plugins/radius/buildreq.c	/^unsigned char rc_get_seqnbr(void)$/;"	f
rc_good_ipaddr	plugins/radius/ip_util.c	/^int rc_good_ipaddr (char *addr)$/;"	f
rc_guess_seqnbr	plugins/radius/buildreq.c	/^static unsigned char rc_guess_seqnbr(void)$/;"	f	file:
rc_ip_hostname	plugins/radius/ip_util.c	/^const char *rc_ip_hostname (UINT4 h_ipaddr)$/;"	f
rc_map2id	plugins/radius/clientid.c	/^UINT4 rc_map2id(char *name)$/;"	f
rc_md5_calc	plugins/radius/md5.c	/^void rc_md5_calc (unsigned char *output, unsigned char *input, unsigned int inlen)$/;"	f
rc_mdelay	plugins/radius/util.c	/^void rc_mdelay(int msecs)$/;"	f
rc_mksid	plugins/radius/util.c	/^rc_mksid (void)$/;"	f
rc_own_bind_ipaddress	plugins/radius/ip_util.c	/^UINT4 rc_own_bind_ipaddress(void)$/;"	f
rc_own_ipaddress	plugins/radius/ip_util.c	/^UINT4 rc_own_ipaddress(void)$/;"	f
rc_pack_list	plugins/radius/sendserver.c	/^static int rc_pack_list (VALUE_PAIR *vp, char *secret, AUTH_HDR *auth)$/;"	f	file:
rc_random_vector	plugins/radius/sendserver.c	/^static void rc_random_vector (unsigned char *vector)$/;"	f	file:
rc_read_config	plugins/radius/config.c	/^int rc_read_config(char *filename)$/;"	f
rc_read_dictionary	plugins/radius/dict.c	/^int rc_read_dictionary (char *filename)$/;"	f
rc_read_mapfile	plugins/radius/clientid.c	/^int rc_read_mapfile(char *filename)$/;"	f
rc_send_server	plugins/radius/sendserver.c	/^int rc_send_server (SEND_DATA *data, char *msg, REQUEST_INFO *info)$/;"	f
rc_str2tm	plugins/radius/util.c	/^void rc_str2tm (char *valstr, struct tm *tm)$/;"	f
rcsid	auth.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	cbcp.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	ccp.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	chap_ms.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	demand.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	eap.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	ecp.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	eui64.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	fsm.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	ipcp.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	ipv6cp.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	ipxcp.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	lcp.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	magic.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	main.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	options.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	sys-solaris.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	upap.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
rcsid	utils.c	/^static const char rcsid[] = RCSID;$/;"	v	file:
read_packet	sys-linux.c	/^int read_packet (unsigned char *buf)$/;"	f
read_packet	sys-solaris.c	/^read_packet(buf)$/;"	f
read_route_table	sys-linux.c	/^static int read_route_table(struct rtentry *rt)$/;"	f	file:
readfile	options.c	/^readfile(argv)$/;"	f	file:
real_ttyfd	tty.c	/^static int real_ttyfd;		\/* fd for actual serial port (not pty) *\/$/;"	v	file:
reap_kids	main.c	/^reap_kids()$/;"	f	file:
receivePacket	plugins/rp-pppoe/if.c	/^receivePacket(int sock, PPPoEPacket *pkt, int *size)$/;"	f
receivePacket	plugins/rp-pppoe/pppoe-discovery.c	/^receivePacket(int sock, PPPoEPacket *pkt, int *size)$/;"	f
receive_pairs	plugins/radius/radiusclient.h	/^	VALUE_PAIR     *receive_pairs;  \/* Where to place received a\/v pairs *\/$/;"	m	struct:send_data
record_child	main.c	/^record_child(pid, prog, done, arg, killable)$/;"	f
record_file	tty.c	/^char	*record_file = NULL;	\/* File to record chars sent\/received *\/$/;"	v
record_write	tty.c	/^record_write(f, code, buf, nb, tp)$/;"	f	file:
recv_config	pppd.h	/^	void (*recv_config) __P((int, u_int32_t, int, int));$/;"	m	struct:channel
recv_idle	include/net/ppp_defs.h	/^    time_t recv_idle;		\/* time since last NP packet received *\/$/;"	m	struct:ppp_idle
refuse_chap	auth.c	/^bool refuse_chap = 0;		\/* Don't wanna auth. ourselves with CHAP *\/$/;"	v
refuse_eap	auth.c	/^bool refuse_eap = 0;		\/* Don't wanna auth. ourselves with EAP *\/$/;"	v
refuse_mppe_stateful	ccp.c	/^bool refuse_mppe_stateful = 1;		\/* Allow stateful mode? *\/$/;"	v
refuse_mschap	auth.c	/^bool refuse_mschap = 0;		\/* Don't wanna auth. ourselves with MS-CHAP *\/$/;"	v
refuse_mschap	auth.c	/^bool refuse_mschap = 1;		\/* Don't wanna auth. ourselves with MS-CHAP *\/$/;"	v
refuse_mschap_v2	auth.c	/^bool refuse_mschap_v2 = 0;	\/* Don't wanna auth. ourselves with MS-CHAPv2 *\/$/;"	v
refuse_mschap_v2	auth.c	/^bool refuse_mschap_v2 = 1;	\/* Don't wanna auth. ourselves with MS-CHAPv2 *\/$/;"	v
refuse_pap	auth.c	/^bool refuse_pap = 0;		\/* Don't wanna auth. ourselves with PAP *\/$/;"	v
rejci	fsm.h	/^    int  (*rejci)		\/* Reject our Configuration Information *\/$/;"	m	struct:fsm_callbacks
relayId	plugins/rp-pppoe/pppoe.h	/^    PPPoETag relayId;		\/* Ditto *\/$/;"	m	struct:PPPoEConnectionStruct
relock	utils.c	/^relock(pid)$/;"	f
remote_addr	sys-solaris.c	/^static u_int32_t remote_addr;		\/* IP address of peer *\/$/;"	v	file:
remote_name	auth.c	/^char remote_name[MAXNAMELEN];	\/* Peer's name for authentication *\/$/;"	v
remote_number	auth.c	/^char remote_number[MAXNAMELEN];$/;"	v
remove_fd	sys-linux.c	/^void remove_fd(int fd)$/;"	f
remove_fd	sys-solaris.c	/^void remove_fd(fd)$/;"	f
remove_notifier	main.c	/^remove_notifier(notif, func, arg)$/;"	f
remove_pidfiles	main.c	/^void remove_pidfiles()$/;"	f
remove_pn_file	eap.c	/^remove_pn_file()$/;"	f	file:
remove_script_env	main.c	/^remove_script_env(pos)$/;"	f	file:
reopen_log	main.c	/^reopen_log()$/;"	f
req_addr	ipcp.h	/^    bool req_addr;		\/* Ask peer to send IP address? *\/$/;"	m	struct:ipcp_options
req_dns1	ipcp.h	/^    bool req_dns1;		\/* Ask peer to send primary DNS address? *\/$/;"	m	struct:ipcp_options
req_dns2	ipcp.h	/^    bool req_dns2;		\/* Ask peer to send secondary DNS address? *\/$/;"	m	struct:ipcp_options
req_ifaceid	ipv6cp.h	/^    int req_ifaceid;		\/* Ask peer to send interface identifier? *\/$/;"	m	struct:ipv6cp_options
req_nn	ipxcp.h	/^    bool req_nn;		\/* Ask peer to send IPX network number *\/$/;"	m	struct:ipxcp_options
req_node	ipxcp.h	/^    bool req_node;		\/* Ask peer to send IPX node number? *\/$/;"	m	struct:ipxcp_options
req_peer	plugins/rp-pppoe/pppoe.h	/^    unsigned char req_peer;	\/* require mac addr to match req_peer_mac *\/$/;"	m	struct:PPPoEConnectionStruct
req_peer_mac	plugins/rp-pppoe/pppoe.h	/^    unsigned char req_peer_mac[ETH_ALEN]; \/* required peer MAC address *\/$/;"	m	struct:PPPoEConnectionStruct
req_unit	options.c	/^int	req_unit = -1;		\/* requested interface unit *\/$/;"	v
reqci	fsm.h	/^    int  (*reqci)		\/* Request peer's Configuration Information *\/$/;"	m	struct:fsm_callbacks
reqid	fsm.h	/^    u_char reqid;		\/* Current request id *\/$/;"	m	struct:fsm
request_info	plugins/radius/radiusclient.h	/^typedef struct request_info$/;"	s
request_vector	plugins/radius/radiusclient.h	/^	u_char		request_vector[AUTH_VECTOR_LEN];$/;"	m	struct:request_info
required	ecp.h	/^    bool required;		\/* Is ECP required? *\/$/;"	m	struct:ecp_options
reset_link_stats	main.c	/^reset_link_stats(u)$/;"	f
resetci	fsm.h	/^    void (*resetci)		\/* Reset our Configuration Information *\/$/;"	m	struct:fsm_callbacks
response	chap_ms.c	/^	unsigned char response[MS_CHAP2_RESPONSE_LEN];$/;"	m	struct:chapms2_response_cache_entry	file:
restart	lcp.h	/^    bool restart;		\/* Restart vs. exit after close *\/$/;"	m	struct:lcp_options
restore_term	sys-linux.c	/^static int restore_term        = 0;	\/* 1 => we've munged the terminal *\/$/;"	v	file:
restore_term	sys-solaris.c	/^static int	restore_term;$/;"	v	file:
restore_tty	sys-linux.c	/^void restore_tty (int tty_fd)$/;"	f
restore_tty	sys-solaris.c	/^restore_tty(fd)$/;"	f
retransmit	fsm.h	/^    void (*retransmit)		\/* Retransmission is necessary *\/$/;"	m	struct:fsm_callbacks
retransmits	fsm.h	/^    int retransmits;		\/* Number of retransmissions left *\/$/;"	m	struct:fsm
retries	plugins/radius/radiusclient.h	/^	int		retries;$/;"	m	struct:send_data
rfile	include/pcap-int.h	/^	FILE *rfile;$/;"	m	struct:pcap_sf
rnakloops	fsm.h	/^    int rnakloops;		\/* Number of naks received *\/$/;"	m	struct:fsm
rol	sha1.c	27;"	d	file:
rot	md4.c	77;"	d	file:
route_buffer	sys-linux.c	/^static char route_buffer[512];$/;"	v	file:
route_delims	sys-linux.c	/^static char route_delims[] = " \\t\\n";$/;"	v	file:
route_dest_col	sys-linux.c	/^static int route_dev_col, route_dest_col, route_gw_col;$/;"	v	file:
route_dev_col	sys-linux.c	/^static int route_dev_col, route_dest_col, route_gw_col;$/;"	v	file:
route_fd	sys-linux.c	/^FILE *route_fd = (FILE *) 0;$/;"	v
route_flags_col	sys-linux.c	/^static int route_flags_col, route_mask_col;$/;"	v	file:
route_gw_col	sys-linux.c	/^static int route_dev_col, route_dest_col, route_gw_col;$/;"	v	file:
route_mask_col	sys-linux.c	/^static int route_flags_col, route_mask_col;$/;"	v	file:
route_num_cols	sys-linux.c	/^static int route_num_cols;$/;"	v	file:
router	ipxcp.h	/^    int    router;		\/* routing protocol *\/$/;"	m	struct:ipxcp_options
rp_fatal	plugins/rp-pppoe/pppoe-discovery.c	/^void rp_fatal(char const *str)$/;"	f
rstate	include/net/slcompress.h	/^	struct cstate rstate[MAX_STATES];	\/* receive connection states *\/$/;"	m	struct:slcompress	typeref:struct:slcompress::cstate
rstate	include/net/vjcompress.h	/^    struct cstate rstate[MAX_STATES];	\/* receive connection states *\/$/;"	m	struct:vjcompress	typeref:struct:vjcompress::cstate
rstate	plugins/radius/radius.c	/^static struct radius_state rstate;$/;"	v	typeref:struct:radius_state	file:
run_ntlm_auth	plugins/winbind.c	/^unsigned int run_ntlm_auth(const char *username, $/;"	f
run_program	main.c	/^run_program(prog, args, must_exist, done, arg, wait)$/;"	f
s6_addr32	eui64.h	58;"	d
s6_addr8	eui64.h	57;"	d
s_down	auth.c	/^    s_down,$/;"	e	enum:script_state	file:
s_down	ipcp.c	/^    s_down,$/;"	e	enum:script_state	file:
s_down	ipv6cp.c	/^    s_down,$/;"	e	enum:script_state	file:
s_env_nalloc	main.c	/^int s_env_nalloc;		\/* # words avail at script_env *\/$/;"	v
s_up	auth.c	/^    s_up$/;"	e	enum:script_state	file:
s_up	ipcp.c	/^    s_up,$/;"	e	enum:script_state	file:
s_up	ipv6cp.c	/^    s_up,$/;"	e	enum:script_state	file:
safe_fork	main.c	/^safe_fork(int infd, int outfd, int errfd)$/;"	f
save_passwd	plugins/passwordfd.c	/^static char save_passwd[MAXSECRETLEN];$/;"	v	file:
scan_authfile	auth.c	/^scan_authfile(f, client, server, secret, addrs, opts, filename, flags)$/;"	f	file:
script_env	main.c	/^char **script_env;		\/* Env. variable values for scripts *\/$/;"	v
script_setenv	main.c	/^script_setenv(var, value, iskey)$/;"	f
script_state	auth.c	/^enum script_state {$/;"	g	file:
script_state	ipcp.c	/^static enum script_state {$/;"	g	file:
script_state	ipv6cp.c	/^static enum script_state {$/;"	g	file:
script_unsetenv	main.c	/^script_unsetenv(var)$/;"	f
search	plugins/pppoatm/text2atm.c	/^static int search(FILE *file,const char *text,struct sockaddr *addr,int length,$/;"	f	file:
secret	plugins/radius/radiusclient.h	/^	char		secret[MAX_SECRET_LENGTH + 1];$/;"	m	struct:request_info
seenACName	plugins/rp-pppoe/pppoe.h	/^    int seenACName;$/;"	m	struct:PacketCriteria
seenMaxPayload	plugins/rp-pppoe/pppoe.h	/^    int seenMaxPayload;$/;"	m	struct:PPPoEConnectionStruct
seenServiceName	plugins/rp-pppoe/pppoe.h	/^    int seenServiceName;$/;"	m	struct:PacketCriteria
seen_ack	fsm.h	/^    u_char seen_ack;		\/* Have received valid Ack\/Nak\/Rej to Req *\/$/;"	m	struct:fsm
sendPADI	plugins/rp-pppoe/discovery.c	/^sendPADI(PPPoEConnection *conn)$/;"	f	file:
sendPADI	plugins/rp-pppoe/pppoe-discovery.c	/^sendPADI(PPPoEConnection *conn)$/;"	f
sendPADR	plugins/rp-pppoe/discovery.c	/^sendPADR(PPPoEConnection *conn)$/;"	f	file:
sendPADT	plugins/rp-pppoe/common.c	/^sendPADT(PPPoEConnection *conn, char const *msg)$/;"	f
sendPacket	plugins/rp-pppoe/if.c	/^sendPacket(PPPoEConnection *conn, int sock, PPPoEPacket *pkt, int size)$/;"	f
sendPacket	plugins/rp-pppoe/pppoe-discovery.c	/^sendPacket(PPPoEConnection *conn, int sock, PPPoEPacket *pkt, int size)$/;"	f
send_config	pppd.h	/^	void (*send_config) __P((int, u_int32_t, int, int));$/;"	m	struct:channel
send_data	plugins/radius/radiusclient.h	/^typedef struct send_data \/* Used to pass information to sendserver() function *\/$/;"	s
send_pairs	plugins/radius/radiusclient.h	/^	VALUE_PAIR     *send_pairs;     \/* More a\/v pairs to send *\/$/;"	m	struct:send_data
seq_nbr	plugins/radius/radiusclient.h	/^	u_char          seq_nbr;	\/* Packet sequence number *\/$/;"	m	struct:send_data
server	chap-new.c	/^} server;$/;"	v	typeref:struct:chap_server_state	file:
server	plugins/radius/radiusclient.h	/^	char           *server;		\/* Name\/addrress of RADIUS server *\/$/;"	m	struct:send_data
server	plugins/radius/radiusclient.h	/^typedef struct server {$/;"	s
serviceName	plugins/rp-pppoe/pppoe.h	/^    char *serviceName;		\/* Desired service name, if any *\/$/;"	m	struct:PPPoEConnectionStruct
serviceNameOK	plugins/rp-pppoe/pppoe.h	/^    int serviceNameOK;$/;"	m	struct:PacketCriteria
session	plugins/rp-pppoe/pppoe.h	/^    UINT16_t session;		\/* Session ID *\/$/;"	m	struct:PPPoEConnectionStruct
session	plugins/rp-pppoe/pppoe.h	/^    unsigned int session:16;	\/* PPPoE session *\/$/;"	m	struct:PPPoEPacketStruct
sessionSocket	plugins/rp-pppoe/pppoe.h	/^    int sessionSocket;		\/* Raw socket for session frames *\/$/;"	m	struct:PPPoEConnectionStruct
session_auth	session.h	70;"	d
session_check	session.h	73;"	d
session_end	session.c	/^session_end(const char* ttyName)$/;"	f
session_full	session.h	76;"	d
session_id	plugins/radius/radius.c	/^    char session_id[MAXSESSIONID + 1];$/;"	m	struct:radius_state	file:
session_mgmt	auth.c	/^bool session_mgmt = 0;		\/* Do session management (login records) *\/$/;"	v
session_start	session.c	/^session_start(flags, user, passwd, ttyName, msg)$/;"	f
set_allowed_addrs	auth.c	/^set_allowed_addrs(unit, addrs, opts)$/;"	f	file:
set_filters	sys-linux.c	/^int set_filters(struct bpf_program *pass, struct bpf_program *active)$/;"	f
set_ifunit	main.c	/^set_ifunit(iskey)$/;"	f
set_kdebugflag	sys-linux.c	/^static int set_kdebugflag (int requested_level)$/;"	f	file:
set_line_discipline_pppoatm	plugins/pppoatm/pppoatm.c	/^static void set_line_discipline_pppoatm(int fd)$/;"	f	file:
set_mppe_enc_types	chap_ms.c	/^set_mppe_enc_types(int policy, int types)$/;"	f
set_noauth_addr	auth.c	/^set_noauth_addr(argv)$/;"	f	file:
set_ntlm_auth	plugins/winbind.c	/^static int set_ntlm_auth(char **argv)$/;"	f	file:
set_option_auo	plugins/radius/config.c	/^static int set_option_auo(char *filename, int line, OPTION *option, char *p)$/;"	f	file:
set_option_int	plugins/radius/config.c	/^static int set_option_int(char *filename, int line, OPTION *option, char *p)$/;"	f	file:
set_option_srv	plugins/radius/config.c	/^static int set_option_srv(char *filename, int line, OPTION *option, char *p)$/;"	f	file:
set_option_str	plugins/radius/config.c	/^static int set_option_str(char *filename, int line, OPTION *option, char *p)$/;"	f	file:
set_permitted_number	auth.c	/^set_permitted_number(argv)$/;"	f	file:
set_ppp_fd	sys-linux.c	/^static void set_ppp_fd (int new_fd)$/;"	f	file:
set_up_tty	sys-linux.c	/^void set_up_tty(int tty_fd, int local)$/;"	f
set_up_tty	sys-solaris.c	/^set_up_tty(fd, local)$/;"	f
setactivefilter	options.c	/^setactivefilter(argv)$/;"	f	file:
setbsdcomp	ccp.c	/^setbsdcomp(argv)$/;"	f	file:
setcbcp	cbcp.c	/^setcbcp(argv)$/;"	f	file:
setdeflate	ccp.c	/^setdeflate(argv)$/;"	f	file:
setdevname	tty.c	/^setdevname(cp, argv, doit)$/;"	f	file:
setdevname_pppoatm	plugins/pppoatm/pppoatm.c	/^static int setdevname_pppoatm(const char *cp, const char **argv, int doit)$/;"	f	file:
setdnsaddr	ipcp.c	/^setdnsaddr(argv)$/;"	f	file:
setdomain	options.c	/^setdomain(argv)$/;"	f	file:
setdtr	sys-linux.c	/^void setdtr (int tty_fd, int on)$/;"	f
setdtr	sys-solaris.c	/^setdtr(fd, on)$/;"	f
setendpoint	lcp.c	/^setendpoint(argv)$/;"	f	file:
setescape	tty.c	/^setescape(argv)$/;"	f	file:
setifaceid	ipv6cp.c	/^setifaceid(argv)$/;"	f	file:
setifstate	sys-linux.c	/^static int setifstate (int u, int state)$/;"	f	file:
setipaddr	ipcp.c	/^setipaddr(arg, argv, doit)$/;"	f
setipxname	ipxcp.c	/^setipxname (argv)$/;"	f	file:
setipxnode	ipxcp.c	/^setipxnode(argv)$/;"	f	file:
setipxnodevalue	ipxcp.c	/^setipxnodevalue(src,dst)$/;"	f	file:
setlogfile	options.c	/^setlogfile(argv)$/;"	f	file:
setlogmask	main.c	270;"	d	file:
setmodir	options.c	/^setmodir(argv)$/;"	f	file:
setnetmask	ipcp.c	/^setnetmask(argv)$/;"	f	file:
setpassfilter	options.c	/^setpassfilter(argv)$/;"	f	file:
setspeed	tty.c	/^setspeed(arg, argv, doit)$/;"	f	file:
setup_signals	main.c	/^setup_signals()$/;"	f	file:
setupapfile	auth.c	/^setupapfile(argv)$/;"	f	file:
setvjslots	ipcp.c	/^setvjslots(argv)$/;"	f	file:
setwinsaddr	ipcp.c	/^setwinsaddr(argv)$/;"	f	file:
setxonxoff	tty.c	/^setxonxoff(argv)$/;"	f	file:
sf	include/pcap-int.h	/^	struct pcap_sf sf;$/;"	m	struct:pcap	typeref:struct:pcap::pcap_sf
showhelp	options.c	/^showhelp(argv)$/;"	f	file:
showversion	options.c	/^showversion(argv)$/;"	f	file:
sif6addr	sys-linux.c	/^int sif6addr (int unit, eui64_t our_eui64, eui64_t his_eui64)$/;"	f
sif6addr	sys-solaris.c	/^sif6addr(u, o, h)$/;"	f
sif6down	sys-linux.c	/^int sif6down (int u)$/;"	f
sif6down	sys-solaris.c	/^sif6down(u)$/;"	f
sif6up	sys-linux.c	/^int sif6up(int u)$/;"	f
sif6up	sys-solaris.c	/^sif6up(u)$/;"	f
sifaddr	sys-linux.c	/^int sifaddr (int unit, u_int32_t our_adr, u_int32_t his_adr,$/;"	f
sifaddr	sys-solaris.c	/^sifaddr(u, o, h, m)$/;"	f
sifdefaultroute	sys-linux.c	/^int sifdefaultroute (int unit, u_int32_t ouraddr, u_int32_t gateway)$/;"	f
sifdefaultroute	sys-solaris.c	/^sifdefaultroute(u, l, g)$/;"	f
sifdown	sys-linux.c	/^int sifdown (int u)$/;"	f
sifdown	sys-solaris.c	/^sifdown(u)$/;"	f
sifnpmode	sys-linux.c	/^sifnpmode(u, proto, mode)$/;"	f
sifnpmode	sys-solaris.c	/^sifnpmode(u, proto, mode)$/;"	f
sifppa	sys-solaris.c	/^sifppa(fd, ppa)$/;"	f	file:
sifproxyarp	sys-linux.c	/^int sifproxyarp (int unit, u_int32_t his_adr)$/;"	f
sifproxyarp	sys-solaris.c	/^sifproxyarp(unit, hisaddr)$/;"	f
sifup	sys-linux.c	/^int sifup(int u)$/;"	f
sifup	sys-solaris.c	/^sifup(u)$/;"	f
sifvjcomp	sys-linux.c	/^int sifvjcomp (int u, int vjcomp, int cidcomp, int maxcid)$/;"	f
sifvjcomp	sys-solaris.c	/^sifvjcomp(u, vjcomp, xcidcomp, xmaxcid)$/;"	f
sigjmp	main.c	/^static sigjmp_buf sigjmp;$/;"	v	file:
signals_handled	main.c	/^static sigset_t signals_handled;$/;"	v	file:
sigreceived	main.c	/^struct notifier *sigreceived = NULL;$/;"	v	typeref:struct:notifier
silent	lcp.h	/^    bool silent;		\/* Wait for the other end to start first *\/$/;"	m	struct:lcp_options
sipxfaddr	sys-linux.c	/^int sipxfaddr (int unit, unsigned long int network, unsigned char * node )$/;"	f
size	plugins/radius/radiusclient.h	/^	int maxsize, size;$/;"	m	struct:env
skip	include/pcap-int.h	/^	int skip;$/;"	m	struct:pcap_md
slave_fd	sys-linux.c	/^static int slave_fd = -1;	\/* pty for old-style demand mode, slave *\/$/;"	v	file:
slcompress	include/net/slcompress.h	/^struct slcompress {$/;"	s
slcs_u	include/net/slcompress.h	/^	} slcs_u;$/;"	m	struct:cstate	typeref:union:cstate::__anon2
slifname	sys-solaris.c	/^slifname(fd, ppa)$/;"	f	file:
slprintf	utils.c	/^slprintf __V((char *buf, int buflen, char *fmt, ...))$/;"	f
sls_compressed	include/net/slcompress.h	/^	int sls_compressed;	\/* outbound compressed packets *\/$/;"	m	struct:slcompress
sls_compressedin	include/net/slcompress.h	/^	int sls_compressedin;	\/* inbound compressed packets *\/$/;"	m	struct:slcompress
sls_errorin	include/net/slcompress.h	/^	int sls_errorin;	\/* inbound unknown type packets *\/$/;"	m	struct:slcompress
sls_misses	include/net/slcompress.h	/^	int sls_misses;		\/* times couldn't find conn. state *\/$/;"	m	struct:slcompress
sls_packets	include/net/slcompress.h	/^	int sls_packets;	\/* outbound packets *\/$/;"	m	struct:slcompress
sls_searches	include/net/slcompress.h	/^	int sls_searches;	\/* searches for connection state *\/$/;"	m	struct:slcompress
sls_tossed	include/net/slcompress.h	/^	int sls_tossed;		\/* inbound packets tossed because of error *\/$/;"	m	struct:slcompress
sls_uncompressedin	include/net/slcompress.h	/^	int sls_uncompressedin;	\/* inbound uncompressed packets *\/$/;"	m	struct:slcompress
snapshot	include/pcap-int.h	/^	int snapshot;$/;"	m	struct:pcap
snoop_recv_hook	main.c	/^void (*snoop_recv_hook) __P((unsigned char *p, int len)) = NULL;$/;"	v
snoop_send_hook	main.c	/^void (*snoop_send_hook) __P((unsigned char *p, int len)) = NULL;$/;"	v
sock6_fd	sys-linux.c	/^static int sock6_fd = -1;$/;"	v	file:
sock_fd	sys-linux.c	/^static int sock_fd = -1;	\/* socket for doing interface ioctls *\/$/;"	v	file:
some_ip_ok	auth.c	/^some_ip_ok(addrs)$/;"	f	file:
source	options.c	/^    const char *source;$/;"	m	struct:option_value	file:
source	pppd.h	/^	const char *source;$/;"	m	struct:__anon3
speed	sys-linux.c	/^struct speed {$/;"	s	file:
speed	sys-solaris.c	/^struct speed {$/;"	s	file:
speed_int	sys-linux.c	/^    int speed_int, speed_val;$/;"	m	struct:speed	file:
speed_int	sys-solaris.c	/^    int speed_int, speed_val;$/;"	m	struct:speed	file:
speed_str	tty.c	/^static char speed_str[16];	\/* Serial port speed as string *\/$/;"	v	file:
speed_val	sys-linux.c	/^    int speed_int, speed_val;$/;"	m	struct:speed	file:
speed_val	sys-solaris.c	/^    int speed_int, speed_val;$/;"	m	struct:speed	file:
speeds	sys-linux.c	/^} speeds[] = {$/;"	v	typeref:struct:speed
speeds	sys-solaris.c	/^} speeds[] = {$/;"	v	typeref:struct:speed
srand48	magic.c	/^srand48(seedval)$/;"	f
srp_lwrechallenge	eap.c	/^srp_lwrechallenge(arg)$/;"	f	file:
start_charshunt	tty.c	/^start_charshunt(ifd, ofd)$/;"	f	file:
start_link	auth.c	/^void start_link(unit)$/;"	f
start_networks	auth.c	/^start_networks(unit)$/;"	f
start_time	main.c	/^static struct timeval start_time;	\/* Time when link was started. *\/$/;"	v	typeref:struct:timeval	file:
start_time	plugins/radius/radius.c	/^    time_t start_time;$/;"	m	struct:radius_state	file:
starting	fsm.h	/^    void (*starting)		\/* Called when we want the lower layer *\/$/;"	m	struct:fsm_callbacks
stat	include/pcap-int.h	/^	struct pcap_stat stat;$/;"	m	struct:pcap_md	typeref:struct:pcap_md::pcap_stat
state	fsm.h	/^    int state;			\/* State *\/$/;"	m	struct:fsm
state	sha1.h	/^    u_int32_t state[5];$/;"	m	struct:__anon8
stats	include/net/if_ppp.h	/^    struct ppp_comp_stats stats;$/;"	m	struct:ifpppcstatsreq	typeref:struct:ifpppcstatsreq::ppp_comp_stats
stats	include/net/if_ppp.h	/^    struct ppp_stats stats;$/;"	m	struct:ifpppstatsreq	typeref:struct:ifpppstatsreq::ppp_stats
stats	include/net/ppp_defs.h	/^   struct ppp_stats stats;$/;"	m	struct:ifpppstatsreq	typeref:struct:ifpppstatsreq::ppp_stats
stats	include/net/vjcompress.h	/^    struct vjstat stats;$/;"	m	struct:vjcompress	typeref:struct:vjcompress::vjstat
stats_ptr	include/net/ppp_defs.h	136;"	d
status	main.c	/^volatile int status;		\/* exit status for pppd *\/$/;"	v
status	plugins/radius/options.h	/^	int type, status;	  \/* type and status    *\/$/;"	m	struct:_option
still_ppp	sys-linux.c	/^static int still_ppp(void)$/;"	f	file:
stop_bits	tty.c	/^int	stop_bits = 1;		\/* Number of serial port stop bits *\/$/;"	v
stop_charshunt	tty.c	/^stop_charshunt(arg, sig)$/;"	f	file:
strhex_to_str	plugins/winbind.c	/^size_t strhex_to_str(char *p, size_t len, const char *strhex)$/;"	f
strioctl	sys-solaris.c	/^strioctl(fd, cmd, ptr, ilen, olen)$/;"	f	file:
strlcat	utils.c	/^strlcat(dest, src, len)$/;"	f
strlcpy	utils.c	/^strlcpy(dest, src, len)$/;"	f
strvalue	plugins/radius/radiusclient.h	/^	u_char             strvalue[AUTH_STRING_LEN + 1];$/;"	m	struct:value_pair
subprocess	main.c	/^struct subprocess {$/;"	s	file:
svc_port	plugins/radius/radiusclient.h	/^	int             svc_port;	\/* RADIUS protocol destination port *\/$/;"	m	struct:send_data
swapped	include/pcap-int.h	/^	int swapped;$/;"	m	struct:pcap_sf
sync_serial	tty.c	/^bool	sync_serial = 0;	\/* Device is synchronous serial device *\/$/;"	v
synchronous	plugins/rp-pppoe/pppoe.h	/^    int synchronous;		\/* Use synchronous PPP *\/$/;"	m	struct:PPPoEConnectionStruct
sysErr	plugins/rp-pppoe/pppoe-discovery.c	/^void sysErr(char const *str)$/;"	f
sys_check_options	sys-linux.c	/^sys_check_options(void)$/;"	f
sys_check_options	sys-solaris.c	/^sys_check_options()$/;"	f
sys_cleanup	sys-linux.c	/^void sys_cleanup(void)$/;"	f
sys_cleanup	sys-solaris.c	/^sys_cleanup()$/;"	f
sys_close	sys-linux.c	/^sys_close(void)$/;"	f
sys_close	sys-solaris.c	/^sys_close()$/;"	f
sys_init	sys-linux.c	/^void sys_init(void)$/;"	f
sys_init	sys-solaris.c	/^sys_init()$/;"	f
term	main.c	/^term(sig)$/;"	f	file:
term_reason	fsm.h	/^    char *term_reason;		\/* Reason for closing protocol *\/$/;"	m	struct:fsm
term_reason_len	fsm.h	/^    int term_reason_len;	\/* Length of term_reason *\/$/;"	m	struct:fsm
terminate_layer	fsm.c	/^terminate_layer(f, nextstate)$/;"	f	file:
termiox_ok	sys-solaris.c	/^static int	termiox_ok;$/;"	v	file:
test_config	plugins/radius/config.c	/^static int test_config(char *filename)$/;"	f	file:
text2atm	plugins/pppoatm/text2atm.c	/^int text2atm(const char *text,struct sockaddr *addr,int length,int flags)$/;"	f
text2qos	plugins/pppoatm/text2qos.c	/^int text2qos(const char *text,struct atm_qos *qos,int flags)$/;"	f
the_channel	main.c	/^struct channel *the_channel;$/;"	v	typeref:struct:channel
time_left	plugins/rp-pppoe/discovery.c	/^static int time_left(struct timeval *diff, struct timeval *exp)$/;"	f	file:
timeleft	main.c	/^timeleft(tvp)$/;"	f	file:
timenow	main.c	/^static struct timeval timenow;		\/* Current time *\/$/;"	v	typeref:struct:timeval	file:
timeout	main.c	/^timeout(func, arg, secs, usecs)$/;"	f
timeout	plugins/radius/radiusclient.h	/^	int             timeout;	\/* Session timeout in seconds *\/$/;"	m	struct:send_data
timeouttime	fsm.h	/^    int timeouttime;		\/* Timeout time in milliseconds *\/$/;"	m	struct:fsm
to_external	ipxcp.c	/^to_external(internal)$/;"	f	file:
toggle_debug	main.c	/^toggle_debug(sig)$/;"	f	file:
translate_speed	sys-linux.c	/^static int translate_speed (int bps)$/;"	f	file:
translate_speed	sys-solaris.c	/^translate_speed(bps)$/;"	f	file:
transmit	include/net/if_ppp.h	/^	int	transmit;$/;"	m	struct:ppp_option_data
tried_nlsp	ipxcp.h	/^    bool tried_nlsp;		\/* I have suggested NLSP already *\/$/;"	m	struct:ipxcp_options
tried_rip	ipxcp.h	/^    bool tried_rip;		\/* I have suggested RIP\/SAP already *\/$/;"	m	struct:ipxcp_options
try_e164	plugins/pppoatm/text2atm.c	/^static int try_e164(const char *text,struct sockaddr_atmsvc *addr,int flags)$/;"	f	file:
try_name	plugins/pppoatm/text2atm.c	/^static int try_name(const char *text,struct sockaddr *addr,int length,$/;"	f	file:
try_nsap	plugins/pppoatm/text2atm.c	/^static int try_nsap(const char *text,struct sockaddr_atmsvc *addr,int flags)$/;"	f	file:
try_pvc	plugins/pppoatm/text2atm.c	/^static int try_pvc(const char *text,struct sockaddr_atmpvc *addr,int flags)$/;"	f	file:
tstate	include/net/slcompress.h	/^	struct cstate tstate[MAX_STATES];	\/* xmit connection states *\/$/;"	m	struct:slcompress	typeref:struct:slcompress::cstate
tstate	include/net/vjcompress.h	/^    struct cstate tstate[MAX_STATES];	\/* xmit connection states *\/$/;"	m	struct:vjcompress	typeref:struct:vjcompress::cstate
tty_channel	tty.c	/^struct channel tty_channel = {$/;"	v	typeref:struct:channel
tty_check_options	tty.c	/^tty_check_options()$/;"	f
tty_close_fds	tty.c	/^void tty_close_fds()$/;"	f
tty_disc	sys-linux.c	/^static int tty_disc = N_TTY;	\/* The TTY discipline *\/$/;"	v	file:
tty_disestablish_ppp	sys-linux.c	/^void tty_disestablish_ppp(int tty_fd)$/;"	f
tty_disestablish_ppp	sys-solaris.c	/^tty_disestablish_ppp(fd)$/;"	f
tty_do_send_config	tty.c	/^tty_do_send_config(mtu, accm, pcomp, accomp)$/;"	f
tty_establish_ppp	sys-linux.c	/^int tty_establish_ppp (int tty_fd)$/;"	f
tty_establish_ppp	sys-solaris.c	/^tty_establish_ppp(fd)$/;"	f
tty_init	tty.c	/^void tty_init()$/;"	f
tty_mode	tty.c	/^mode_t tty_mode = (mode_t)-1;	\/* Original access permissions to tty *\/$/;"	v
tty_modules	sys-solaris.c	/^static char	tty_modules[NMODULES][FMNAMESZ+1];$/;"	v	file:
tty_nmodules	sys-solaris.c	/^static int	tty_nmodules;$/;"	v	file:
tty_npushed	sys-solaris.c	/^static int	tty_npushed;$/;"	v	file:
tty_options	tty.c	/^option_t tty_options[] = {$/;"	v
tty_process_extra_options	tty.c	/^void tty_process_extra_options()$/;"	f
tty_recv_config	sys-linux.c	/^void tty_recv_config(int mru, u_int32_t asyncmap, int pcomp, int accomp)$/;"	f
tty_recv_config	sys-solaris.c	/^tty_recv_config(mru, asyncmap, pcomp, accomp)$/;"	f
tty_send_config	sys-linux.c	/^void tty_send_config(int mtu, u_int32_t asyncmap, int pcomp, int accomp)$/;"	f
tty_send_config	sys-solaris.c	/^tty_send_config(mtu, asyncmap, pcomp, accomp)$/;"	f
tty_set_xaccm	sys-linux.c	/^void tty_set_xaccm (ext_accm accm)$/;"	f
tty_set_xaccm	sys-solaris.c	/^tty_set_xaccm(accm)$/;"	f
tty_sid	sys-solaris.c	/^static pid_t	tty_sid;	\/* original session ID for terminal *\/$/;"	v	file:
ttyfd	tty.c	/^static int ttyfd;		\/* Serial port file descriptor *\/$/;"	v	file:
tune_kernel	options.c	/^bool	tune_kernel;		\/* may alter kernel settings *\/$/;"	v
type	plugins/radius/options.h	/^	int type, status;	  \/* type and status    *\/$/;"	m	struct:_option
type	plugins/radius/radiusclient.h	/^	int                type;$/;"	m	struct:value_pair
type	plugins/radius/radiusclient.h	/^	int               type;				\/* string, int, etc. *\/$/;"	m	struct:dict_attr
type	plugins/rp-pppoe/pppoe.h	/^    unsigned int type:16;	\/* tag type *\/$/;"	m	struct:PPPoETagStruct
type	pppd.h	/^	enum opt_type type;$/;"	m	struct:__anon3	typeref:enum:__anon3::opt_type
tzoff	include/pcap-int.h	/^	int tzoff;		\/* timezone offset *\/$/;"	m	struct:pcap
u_int16_t	include/net/ppp_defs.h	/^typedef unsigned short  u_int16_t;$/;"	t
u_int32_t	include/net/ppp_defs.h	/^typedef UINT32_T	u_int32_t;$/;"	t
u_int32_t	include/net/ppp_defs.h	/^typedef unsigned int	u_int32_t;$/;"	t
uafname	auth.c	/^static char *uafname;		\/* name of most recent +ua file *\/$/;"	v	file:
ue_isset	pppd.h	/^	bool ue_isset;		\/* 1 for set, 0 for unset *\/$/;"	m	struct:userenv
ue_name	pppd.h	/^	char ue_name[1];	\/* variable name *\/$/;"	m	struct:userenv
ue_next	pppd.h	/^	struct userenv *ue_next;$/;"	m	struct:userenv	typeref:struct:userenv::userenv
ue_priv	pppd.h	/^	bool ue_priv;		\/* from privileged source *\/$/;"	m	struct:userenv
ue_source	pppd.h	/^	const char *ue_source;	\/* source name *\/$/;"	m	struct:userenv
ue_value	pppd.h	/^	char *ue_value;		\/* value (set only) *\/$/;"	m	struct:userenv
uid	main.c	/^uid_t uid;			\/* Our real user-id *\/$/;"	v
unc_bytes	include/net/ppp_defs.h	/^    unsigned int unc_bytes;	\/* total uncompressed bytes *\/$/;"	m	struct:compstat
unc_packets	include/net/ppp_defs.h	/^    unsigned int unc_packets;	\/* total uncompressed packets *\/$/;"	m	struct:compstat
unit	fsm.h	/^    int unit;			\/* Interface unit number *\/$/;"	m	struct:fsm
unlock	utils.c	/^unlock()$/;"	f
unlock_db	main.c	/^void unlock_db()$/;"	f
unsuccess	main.c	/^int unsuccess;			\/* # unsuccessful connection attempts *\/$/;"	v
untimeout	main.c	/^untimeout(func, arg)$/;"	f
up	fsm.h	/^    void (*up)			\/* Called when fsm reaches OPENED state *\/$/;"	m	struct:fsm_callbacks
upap	upap.c	/^upap_state upap[NUM_PPP];		\/* UPAP state; one for each unit *\/$/;"	v
upap_authpeer	upap.c	/^upap_authpeer(unit)$/;"	f
upap_authwithpeer	upap.c	/^upap_authwithpeer(unit, user, password)$/;"	f
upap_codenames	upap.c	/^static char *upap_codenames[] = {$/;"	v	file:
upap_init	upap.c	/^upap_init(unit)$/;"	f	file:
upap_input	upap.c	/^upap_input(unit, inpacket, l)$/;"	f	file:
upap_lowerdown	upap.c	/^upap_lowerdown(unit)$/;"	f	file:
upap_lowerup	upap.c	/^upap_lowerup(unit)$/;"	f	file:
upap_printpkt	upap.c	/^upap_printpkt(p, plen, printer, arg)$/;"	f	file:
upap_protrej	upap.c	/^upap_protrej(unit)$/;"	f	file:
upap_rauthack	upap.c	/^upap_rauthack(u, inp, id, len)$/;"	f	file:
upap_rauthnak	upap.c	/^upap_rauthnak(u, inp, id, len)$/;"	f	file:
upap_rauthreq	upap.c	/^upap_rauthreq(u, inp, id, len)$/;"	f	file:
upap_reqtimeout	upap.c	/^upap_reqtimeout(arg)$/;"	f	file:
upap_sauthreq	upap.c	/^upap_sauthreq(u)$/;"	f	file:
upap_sresp	upap.c	/^upap_sresp(u, code, id, msg, msglen)$/;"	f	file:
upap_state	upap.h	/^typedef struct upap_state {$/;"	s
upap_state	upap.h	/^} upap_state;$/;"	t	typeref:struct:upap_state
upap_timeout	upap.c	/^upap_timeout(arg)$/;"	f	file:
update_db_entry	main.c	/^update_db_entry()$/;"	f	file:
update_link_stats	main.c	/^update_link_stats(u)$/;"	f
update_script_environment	main.c	/^update_script_environment()$/;"	f	file:
update_system_environment	main.c	/^update_system_environment()$/;"	f	file:
updetach	options.c	/^bool	updetach = 0;		\/* Detach once link is up *\/$/;"	v
upper_layers_down	auth.c	/^void upper_layers_down(int unit)$/;"	f
upper_limit	pppd.h	/^	int	upper_limit;$/;"	m	struct:__anon3
us_allowed	cbcp.h	/^    u_char us_allowed;$/;"	m	struct:cbcp_state
us_clientstate	upap.h	/^    int us_clientstate;		\/* Client state *\/$/;"	m	struct:upap_state
us_id	cbcp.h	/^    u_char us_id;		\/* Current id *\/$/;"	m	struct:cbcp_state
us_id	upap.h	/^    u_char us_id;		\/* Current id *\/$/;"	m	struct:upap_state
us_maxtransmits	upap.h	/^    int us_maxtransmits;	\/* Maximum number of auth-reqs to send *\/$/;"	m	struct:upap_state
us_number	cbcp.h	/^    char   *us_number;    \/* Telefone Number *\/$/;"	m	struct:cbcp_state
us_passwd	upap.h	/^    char *us_passwd;		\/* Password *\/$/;"	m	struct:upap_state
us_passwdlen	upap.h	/^    int us_passwdlen;		\/* Password length *\/$/;"	m	struct:upap_state
us_reqtimeout	upap.h	/^    int us_reqtimeout;		\/* Time to wait for auth-req from peer *\/$/;"	m	struct:upap_state
us_serverstate	upap.h	/^    int us_serverstate;		\/* Server state *\/$/;"	m	struct:upap_state
us_timeouttime	upap.h	/^    int us_timeouttime;		\/* Timeout (seconds) for auth-req retrans. *\/$/;"	m	struct:upap_state
us_transmits	upap.h	/^    int us_transmits;		\/* Number of auth-reqs sent *\/$/;"	m	struct:upap_state
us_type	cbcp.h	/^    int    us_type;$/;"	m	struct:cbcp_state
us_unit	cbcp.h	/^    int    us_unit;	\/* Interface unit number *\/$/;"	m	struct:cbcp_state
us_unit	upap.h	/^    int us_unit;		\/* Interface unit number *\/$/;"	m	struct:upap_state
us_user	upap.h	/^    char *us_user;		\/* User *\/$/;"	m	struct:upap_state
us_userlen	upap.h	/^    int us_userlen;		\/* User length *\/$/;"	m	struct:upap_state
usage	options.c	/^usage()$/;"	f	file:
usage	plugins/rp-pppoe/pppoe-discovery.c	/^void usage(void)$/;"	f
usage	srp-entry.c	/^usage(void)$/;"	f	file:
usage_string	options.c	/^static char *usage_string = "\\$/;"	v	file:
useHostUniq	plugins/rp-pppoe/pppoe.h	/^    int useHostUniq;		\/* Use Host-Uniq tag *\/$/;"	m	struct:PPPoEConnectionStruct
use_bpf	include/pcap-int.h	/^	int use_bpf;$/;"	m	struct:pcap_md
use_ip	ipv6cp.h	/^    int use_ip;			\/* use IP as interface identifier *\/$/;"	m	struct:ipv6cp_options
use_persistent	ipv6cp.h	/^    int use_persistent;		\/* use uniquely persistent value for address *\/$/;"	m	struct:ipv6cp_options
usehostname	auth.c	/^bool usehostname = 0;		\/* Use hostname for our_name *\/$/;"	v
uselogin	auth.c	/^bool uselogin = 0;		\/* Use \/etc\/passwd for checking PAP *\/$/;"	v
usepeerdns	ipcp.c	/^static bool usepeerdns;			\/* Ask peer for DNS addrs *\/$/;"	v	file:
user	options.c	/^char	user[MAXNAMELEN];	\/* Username for PAP *\/$/;"	v
user	plugins/radius/radius.c	/^    char user[MAXNAMELEN];$/;"	m	struct:radius_state	file:
user_setenv	options.c	/^user_setenv(argv)$/;"	f	file:
user_setprint	options.c	/^user_setprint(opt, printer, arg)$/;"	f	file:
user_unsetenv	options.c	/^user_unsetenv(argv)$/;"	f	file:
user_unsetprint	options.c	/^user_unsetprint(opt, printer, arg)$/;"	f	file:
userenv	pppd.h	/^struct userenv {$/;"	s
userenv_list	options.c	/^struct userenv *userenv_list;	\/* user environment variables *\/$/;"	v	typeref:struct:userenv
using_pty	tty.c	/^int	using_pty = 0;		\/* we're allocating a pty as the device *\/$/;"	v
utsname	sys-linux.c	/^static struct utsname utsname;	\/* for the kernel version *\/$/;"	v	typeref:struct:utsname	file:
val	plugins/radius/options.h	/^	void *val;		  \/* pointer to option value *\/$/;"	m	struct:_option
value	options.c	/^    char value[1];$/;"	m	struct:option_value	file:
value	plugins/radius/radiusclient.h	/^	int                value;$/;"	m	struct:dict_value
value	plugins/radius/radiusclient.h	/^	int               value;			\/* attribute index *\/$/;"	m	struct:dict_attr
value	pppd.h	/^    unsigned char	value[MAX_ENDP_LEN];$/;"	m	struct:epdisc
value_pair	plugins/radius/radiusclient.h	/^typedef struct value_pair$/;"	s
vc_encaps	plugins/pppoatm/pppoatm.c	/^static bool vc_encaps = 0;$/;"	v	file:
vector	plugins/radius/radiusclient.h	/^	u_char          vector[AUTH_VECTOR_LEN];$/;"	m	struct:pw_auth_hdr
vendor_dict	plugins/radius/radiusclient.h	/^typedef struct vendor_dict$/;"	s
vendor_dictionaries	plugins/radius/dict.c	/^static VENDOR_DICT *vendor_dictionaries = NULL;$/;"	v	file:
vendorcode	plugins/radius/radiusclient.h	/^	int                vendorcode;$/;"	m	struct:value_pair
vendorcode	plugins/radius/radiusclient.h	/^	int               vendorcode;                   \/* vendor code *\/$/;"	m	struct:dict_attr
vendorcode	plugins/radius/radiusclient.h	/^    int vendorcode;$/;"	m	struct:vendor_dict
vendorname	plugins/radius/radiusclient.h	/^    char vendorname[NAME_LENGTH + 1];$/;"	m	struct:vendor_dict
verify_response	chap-new.h	/^	int (*verify_response)(int id, char *name,$/;"	m	struct:chap_digest_type
version_major	include/pcap-int.h	/^	int version_major;$/;"	m	struct:pcap_sf
version_minor	include/pcap-int.h	/^	int version_minor;$/;"	m	struct:pcap_sf
vertype	plugins/rp-pppoe/pppoe.h	/^    unsigned int vertype:8;	\/* PPPoE Version and Type (must both be 1) *\/$/;"	m	struct:PPPoEPacketStruct
vj	include/net/ppp_defs.h	/^    struct vjstat vj;		\/* VJ header compression statistics *\/$/;"	m	struct:ppp_stats	typeref:struct:ppp_stats::vjstat
vj_protocol	ipcp.h	/^    int  vj_protocol;		\/* protocol value to use in VJ option *\/$/;"	m	struct:ipcp_options
vj_protocol	ipv6cp.h	/^    u_short vj_protocol;	\/* protocol value to use in VJ option *\/$/;"	m	struct:ipv6cp_options
vj_value	ipcp.c	/^static char vj_value[8];		\/* string form of vj option value *\/$/;"	v	file:
vjcompress	include/net/vjcompress.h	/^struct vjcompress {$/;"	s
vjcs_u	include/net/vjcompress.h	/^    } vjcs_u;$/;"	m	struct:cstate	typeref:union:cstate::__anon1
vjs_compressed	include/net/ppp_defs.h	/^    unsigned int vjs_compressed; \/* outbound compressed packets *\/$/;"	m	struct:vjstat
vjs_compressedin	include/net/ppp_defs.h	/^    unsigned int vjs_compressedin; \/* inbound compressed packets *\/$/;"	m	struct:vjstat
vjs_errorin	include/net/ppp_defs.h	/^    unsigned int vjs_errorin;	\/* inbound unknown type packets *\/$/;"	m	struct:vjstat
vjs_misses	include/net/ppp_defs.h	/^    unsigned int vjs_misses;	\/* times couldn't find conn. state *\/$/;"	m	struct:vjstat
vjs_packets	include/net/ppp_defs.h	/^    unsigned int vjs_packets;	\/* outbound packets *\/$/;"	m	struct:vjstat
vjs_searches	include/net/ppp_defs.h	/^    unsigned int vjs_searches;	\/* searches for connection state *\/$/;"	m	struct:vjstat
vjs_tossed	include/net/ppp_defs.h	/^    unsigned int vjs_tossed;	\/* inbound packets tossed because of error *\/$/;"	m	struct:vjstat
vjs_uncompressedin	include/net/ppp_defs.h	/^    unsigned int vjs_uncompressedin; \/* inbound uncompressed packets *\/$/;"	m	struct:vjstat
vjstat	include/net/ppp_defs.h	/^struct vjstat {$/;"	s
volatile	pppd.h	67;"	d
vpstr	plugins/radius/radius.c	/^    char *vpstr;$/;"	m	struct:avpopt	file:
vslp_printer	utils.c	/^vslp_printer __V((void *arg, char *fmt, ...))$/;"	f	file:
vslprintf	utils.c	/^vslprintf(buf, buflen, fmt, args)$/;"	f
waitForPADO	plugins/rp-pppoe/discovery.c	/^waitForPADO(PPPoEConnection *conn, int timeout)$/;"	f
waitForPADO	plugins/rp-pppoe/pppoe-discovery.c	/^waitForPADO(PPPoEConnection *conn, int timeout)$/;"	f
waitForPADS	plugins/rp-pppoe/discovery.c	/^waitForPADS(PPPoEConnection *conn, int timeout)$/;"	f	file:
wait_input	sys-linux.c	/^void wait_input(struct timeval *timo)$/;"	f
wait_input	sys-solaris.c	/^wait_input(timo)$/;"	f
waiting	main.c	/^static int waiting;$/;"	v	file:
warn	utils.c	/^warn __V((char *fmt, ...))$/;"	f
welcomer	tty.c	/^char	*welcomer = NULL;	\/* Script to run after phys link estab. *\/$/;"	v
winbind_allowed_address	plugins/winbind.c	/^winbind_allowed_address(u_int32_t addr) $/;"	f	file:
winbind_chap_verify	plugins/winbind.c	/^winbind_chap_verify(char *user, char *ourname, int id,$/;"	f	file:
winbind_pap_auth	plugins/winbind.c	/^winbind_pap_auth(char *user,$/;"	f	file:
winbind_secret_check	plugins/winbind.c	/^winbind_secret_check(void)$/;"	f	file:
winner	pppd.h	/^	short int winner;$/;"	m	struct:__anon3
winsaddr	ipcp.h	/^    u_int32_t winsaddr[2];	\/* Primary and secondary MS WINS entries *\/$/;"	m	struct:ipcp_options
wkmodulus	eap.c	/^static const u_char wkmodulus[] = {$/;"	v	file:
wkmodulus	srp-entry.c	/^static const u_char wkmodulus[] = {$/;"	v	file:
wo	ipxcp.c	73;"	d	file:
word	pppd.h	/^    char		*word;$/;"	m	struct:wordlist
wordlist	pppd.h	/^struct wordlist {$/;"	s
wordlist_count	auth.c	/^wordlist_count(wp)$/;"	f	file:
write_pseudonym	eap.c	/^write_pseudonym(esp, inp, len, id)$/;"	f	file:
wsinfo	sys-solaris.c	/^static struct winsize wsinfo;	\/* Initial window size info *\/$/;"	v	typeref:struct:winsize	file:
xmit_accm	tty.c	/^u_int32_t xmit_accm[8];		\/* extended transmit ACCM *\/$/;"	v
xmit_idle	include/net/ppp_defs.h	/^    time_t xmit_idle;		\/* time since last NP packet sent *\/$/;"	m	struct:ppp_idle
xstrdup	plugins/rp-pppoe/pppoe-discovery.c	/^char *xstrdup(const char *s)$/;"	f
zero_node	ipxcp.c	/^zero_node (node)$/;"	f	file:
